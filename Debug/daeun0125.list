
daeun0125.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ae8  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08007ccc  08007ccc  00017ccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d8c  08007d8c  00020120  2**0
                  CONTENTS
  4 .ARM          00000000  08007d8c  08007d8c  00020120  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007d8c  08007d8c  00020120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d8c  08007d8c  00017d8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d90  08007d90  00017d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000120  20000000  08007d94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006e58  20000120  08007eb4  00020120  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006f78  08007eb4  00026f78  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014a54  00000000  00000000  00020149  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003264  00000000  00000000  00034b9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cc0  00000000  00000000  00037e08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b30  00000000  00000000  00038ac8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001cb91  00000000  00000000  000395f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ee6d  00000000  00000000  00056189  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00095911  00000000  00000000  00064ff6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fa907  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003120  00000000  00000000  000fa984  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000120 	.word	0x20000120
 8000200:	00000000 	.word	0x00000000
 8000204:	08007cb4 	.word	0x08007cb4

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000124 	.word	0x20000124
 8000220:	08007cb4 	.word	0x08007cb4

08000224 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000228:	f000 f954 	bl	80004d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022c:	f000 f807 	bl	800023e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000230:	f000 f882 	bl	8000338 <MX_GPIO_Init>
  MX_RTC_Init();
 8000234:	f000 f864 	bl	8000300 <MX_RTC_Init>
  MX_USB_DEVICE_Init();
 8000238:	f007 f892 	bl	8007360 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800023c:	e7fe      	b.n	800023c <main+0x18>

0800023e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800023e:	b580      	push	{r7, lr}
 8000240:	b096      	sub	sp, #88	; 0x58
 8000242:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000244:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000248:	2228      	movs	r2, #40	; 0x28
 800024a:	2100      	movs	r1, #0
 800024c:	4618      	mov	r0, r3
 800024e:	f007 fd28 	bl	8007ca2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000252:	f107 031c 	add.w	r3, r7, #28
 8000256:	2200      	movs	r2, #0
 8000258:	601a      	str	r2, [r3, #0]
 800025a:	605a      	str	r2, [r3, #4]
 800025c:	609a      	str	r2, [r3, #8]
 800025e:	60da      	str	r2, [r3, #12]
 8000260:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000262:	1d3b      	adds	r3, r7, #4
 8000264:	2200      	movs	r2, #0
 8000266:	601a      	str	r2, [r3, #0]
 8000268:	605a      	str	r2, [r3, #4]
 800026a:	609a      	str	r2, [r3, #8]
 800026c:	60da      	str	r2, [r3, #12]
 800026e:	611a      	str	r2, [r3, #16]
 8000270:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000272:	2309      	movs	r3, #9
 8000274:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000276:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800027a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800027c:	2300      	movs	r3, #0
 800027e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000280:	2301      	movs	r3, #1
 8000282:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000284:	2301      	movs	r3, #1
 8000286:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000288:	2302      	movs	r3, #2
 800028a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800028c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000290:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000292:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000296:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000298:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800029c:	4618      	mov	r0, r3
 800029e:	f001 fe45 	bl	8001f2c <HAL_RCC_OscConfig>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d001      	beq.n	80002ac <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002a8:	f000 f85c 	bl	8000364 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ac:	230f      	movs	r3, #15
 80002ae:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002b0:	2302      	movs	r3, #2
 80002b2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b4:	2300      	movs	r3, #0
 80002b6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002bc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002be:	2300      	movs	r3, #0
 80002c0:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002c2:	f107 031c 	add.w	r3, r7, #28
 80002c6:	2102      	movs	r1, #2
 80002c8:	4618      	mov	r0, r3
 80002ca:	f002 f8af 	bl	800242c <HAL_RCC_ClockConfig>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d001      	beq.n	80002d8 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80002d4:	f000 f846 	bl	8000364 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB;
 80002d8:	2311      	movs	r3, #17
 80002da:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80002dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80002e0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80002e2:	2300      	movs	r3, #0
 80002e4:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	4618      	mov	r0, r3
 80002ea:	f002 fa27 	bl	800273c <HAL_RCCEx_PeriphCLKConfig>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d001      	beq.n	80002f8 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80002f4:	f000 f836 	bl	8000364 <Error_Handler>
  }
}
 80002f8:	bf00      	nop
 80002fa:	3758      	adds	r7, #88	; 0x58
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bd80      	pop	{r7, pc}

08000300 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000304:	4b0a      	ldr	r3, [pc, #40]	; (8000330 <MX_RTC_Init+0x30>)
 8000306:	4a0b      	ldr	r2, [pc, #44]	; (8000334 <MX_RTC_Init+0x34>)
 8000308:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800030a:	4b09      	ldr	r3, [pc, #36]	; (8000330 <MX_RTC_Init+0x30>)
 800030c:	f04f 32ff 	mov.w	r2, #4294967295
 8000310:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8000312:	4b07      	ldr	r3, [pc, #28]	; (8000330 <MX_RTC_Init+0x30>)
 8000314:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000318:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800031a:	4805      	ldr	r0, [pc, #20]	; (8000330 <MX_RTC_Init+0x30>)
 800031c:	f002 fbac 	bl	8002a78 <HAL_RTC_Init>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 8000326:	f000 f81d 	bl	8000364 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800032a:	bf00      	nop
 800032c:	bd80      	pop	{r7, pc}
 800032e:	bf00      	nop
 8000330:	200003b0 	.word	0x200003b0
 8000334:	40002800 	.word	0x40002800

08000338 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000338:	b480      	push	{r7}
 800033a:	b083      	sub	sp, #12
 800033c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800033e:	4b08      	ldr	r3, [pc, #32]	; (8000360 <MX_GPIO_Init+0x28>)
 8000340:	699b      	ldr	r3, [r3, #24]
 8000342:	4a07      	ldr	r2, [pc, #28]	; (8000360 <MX_GPIO_Init+0x28>)
 8000344:	f043 0304 	orr.w	r3, r3, #4
 8000348:	6193      	str	r3, [r2, #24]
 800034a:	4b05      	ldr	r3, [pc, #20]	; (8000360 <MX_GPIO_Init+0x28>)
 800034c:	699b      	ldr	r3, [r3, #24]
 800034e:	f003 0304 	and.w	r3, r3, #4
 8000352:	607b      	str	r3, [r7, #4]
 8000354:	687b      	ldr	r3, [r7, #4]

}
 8000356:	bf00      	nop
 8000358:	370c      	adds	r7, #12
 800035a:	46bd      	mov	sp, r7
 800035c:	bc80      	pop	{r7}
 800035e:	4770      	bx	lr
 8000360:	40021000 	.word	0x40021000

08000364 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000368:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800036a:	e7fe      	b.n	800036a <Error_Handler+0x6>

0800036c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800036c:	b480      	push	{r7}
 800036e:	b085      	sub	sp, #20
 8000370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000372:	4b15      	ldr	r3, [pc, #84]	; (80003c8 <HAL_MspInit+0x5c>)
 8000374:	699b      	ldr	r3, [r3, #24]
 8000376:	4a14      	ldr	r2, [pc, #80]	; (80003c8 <HAL_MspInit+0x5c>)
 8000378:	f043 0301 	orr.w	r3, r3, #1
 800037c:	6193      	str	r3, [r2, #24]
 800037e:	4b12      	ldr	r3, [pc, #72]	; (80003c8 <HAL_MspInit+0x5c>)
 8000380:	699b      	ldr	r3, [r3, #24]
 8000382:	f003 0301 	and.w	r3, r3, #1
 8000386:	60bb      	str	r3, [r7, #8]
 8000388:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800038a:	4b0f      	ldr	r3, [pc, #60]	; (80003c8 <HAL_MspInit+0x5c>)
 800038c:	69db      	ldr	r3, [r3, #28]
 800038e:	4a0e      	ldr	r2, [pc, #56]	; (80003c8 <HAL_MspInit+0x5c>)
 8000390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000394:	61d3      	str	r3, [r2, #28]
 8000396:	4b0c      	ldr	r3, [pc, #48]	; (80003c8 <HAL_MspInit+0x5c>)
 8000398:	69db      	ldr	r3, [r3, #28]
 800039a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800039e:	607b      	str	r3, [r7, #4]
 80003a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003a2:	4b0a      	ldr	r3, [pc, #40]	; (80003cc <HAL_MspInit+0x60>)
 80003a4:	685b      	ldr	r3, [r3, #4]
 80003a6:	60fb      	str	r3, [r7, #12]
 80003a8:	68fb      	ldr	r3, [r7, #12]
 80003aa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003ae:	60fb      	str	r3, [r7, #12]
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003b6:	60fb      	str	r3, [r7, #12]
 80003b8:	4a04      	ldr	r2, [pc, #16]	; (80003cc <HAL_MspInit+0x60>)
 80003ba:	68fb      	ldr	r3, [r7, #12]
 80003bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003be:	bf00      	nop
 80003c0:	3714      	adds	r7, #20
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bc80      	pop	{r7}
 80003c6:	4770      	bx	lr
 80003c8:	40021000 	.word	0x40021000
 80003cc:	40010000 	.word	0x40010000

080003d0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b084      	sub	sp, #16
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	4a0b      	ldr	r2, [pc, #44]	; (800040c <HAL_RTC_MspInit+0x3c>)
 80003de:	4293      	cmp	r3, r2
 80003e0:	d110      	bne.n	8000404 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80003e2:	f001 fd97 	bl	8001f14 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80003e6:	4b0a      	ldr	r3, [pc, #40]	; (8000410 <HAL_RTC_MspInit+0x40>)
 80003e8:	69db      	ldr	r3, [r3, #28]
 80003ea:	4a09      	ldr	r2, [pc, #36]	; (8000410 <HAL_RTC_MspInit+0x40>)
 80003ec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80003f0:	61d3      	str	r3, [r2, #28]
 80003f2:	4b07      	ldr	r3, [pc, #28]	; (8000410 <HAL_RTC_MspInit+0x40>)
 80003f4:	69db      	ldr	r3, [r3, #28]
 80003f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80003fa:	60fb      	str	r3, [r7, #12]
 80003fc:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80003fe:	4b05      	ldr	r3, [pc, #20]	; (8000414 <HAL_RTC_MspInit+0x44>)
 8000400:	2201      	movs	r2, #1
 8000402:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000404:	bf00      	nop
 8000406:	3710      	adds	r7, #16
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}
 800040c:	40002800 	.word	0x40002800
 8000410:	40021000 	.word	0x40021000
 8000414:	4242043c 	.word	0x4242043c

08000418 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800041c:	e7fe      	b.n	800041c <NMI_Handler+0x4>

0800041e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800041e:	b480      	push	{r7}
 8000420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000422:	e7fe      	b.n	8000422 <HardFault_Handler+0x4>

08000424 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000428:	e7fe      	b.n	8000428 <MemManage_Handler+0x4>

0800042a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800042a:	b480      	push	{r7}
 800042c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800042e:	e7fe      	b.n	800042e <BusFault_Handler+0x4>

08000430 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000434:	e7fe      	b.n	8000434 <UsageFault_Handler+0x4>

08000436 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000436:	b480      	push	{r7}
 8000438:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800043a:	bf00      	nop
 800043c:	46bd      	mov	sp, r7
 800043e:	bc80      	pop	{r7}
 8000440:	4770      	bx	lr

08000442 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000442:	b480      	push	{r7}
 8000444:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000446:	bf00      	nop
 8000448:	46bd      	mov	sp, r7
 800044a:	bc80      	pop	{r7}
 800044c:	4770      	bx	lr

0800044e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800044e:	b480      	push	{r7}
 8000450:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000452:	bf00      	nop
 8000454:	46bd      	mov	sp, r7
 8000456:	bc80      	pop	{r7}
 8000458:	4770      	bx	lr

0800045a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800045a:	b580      	push	{r7, lr}
 800045c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800045e:	f000 f87f 	bl	8000560 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000462:	bf00      	nop
 8000464:	bd80      	pop	{r7, pc}
	...

08000468 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800046c:	4802      	ldr	r0, [pc, #8]	; (8000478 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800046e:	f000 fad1 	bl	8000a14 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000472:	bf00      	nop
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	20006c8c 	.word	0x20006c8c

0800047c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000480:	bf00      	nop
 8000482:	46bd      	mov	sp, r7
 8000484:	bc80      	pop	{r7}
 8000486:	4770      	bx	lr

08000488 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000488:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800048a:	e003      	b.n	8000494 <LoopCopyDataInit>

0800048c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800048c:	4b0b      	ldr	r3, [pc, #44]	; (80004bc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800048e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000490:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000492:	3104      	adds	r1, #4

08000494 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000494:	480a      	ldr	r0, [pc, #40]	; (80004c0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000496:	4b0b      	ldr	r3, [pc, #44]	; (80004c4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000498:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800049a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800049c:	d3f6      	bcc.n	800048c <CopyDataInit>
  ldr r2, =_sbss
 800049e:	4a0a      	ldr	r2, [pc, #40]	; (80004c8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80004a0:	e002      	b.n	80004a8 <LoopFillZerobss>

080004a2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80004a2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80004a4:	f842 3b04 	str.w	r3, [r2], #4

080004a8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80004a8:	4b08      	ldr	r3, [pc, #32]	; (80004cc <LoopFillZerobss+0x24>)
  cmp r2, r3
 80004aa:	429a      	cmp	r2, r3
  bcc FillZerobss
 80004ac:	d3f9      	bcc.n	80004a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80004ae:	f7ff ffe5 	bl	800047c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004b2:	f007 fbc7 	bl	8007c44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004b6:	f7ff feb5 	bl	8000224 <main>
  bx lr
 80004ba:	4770      	bx	lr
  ldr r3, =_sidata
 80004bc:	08007d94 	.word	0x08007d94
  ldr r0, =_sdata
 80004c0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80004c4:	20000120 	.word	0x20000120
  ldr r2, =_sbss
 80004c8:	20000120 	.word	0x20000120
  ldr r3, = _ebss
 80004cc:	20006f78 	.word	0x20006f78

080004d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004d0:	e7fe      	b.n	80004d0 <ADC1_2_IRQHandler>
	...

080004d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004d8:	4b08      	ldr	r3, [pc, #32]	; (80004fc <HAL_Init+0x28>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a07      	ldr	r2, [pc, #28]	; (80004fc <HAL_Init+0x28>)
 80004de:	f043 0310 	orr.w	r3, r3, #16
 80004e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004e4:	2003      	movs	r0, #3
 80004e6:	f000 f923 	bl	8000730 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004ea:	2000      	movs	r0, #0
 80004ec:	f000 f808 	bl	8000500 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004f0:	f7ff ff3c 	bl	800036c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004f4:	2300      	movs	r3, #0
}
 80004f6:	4618      	mov	r0, r3
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	40022000 	.word	0x40022000

08000500 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000508:	4b12      	ldr	r3, [pc, #72]	; (8000554 <HAL_InitTick+0x54>)
 800050a:	681a      	ldr	r2, [r3, #0]
 800050c:	4b12      	ldr	r3, [pc, #72]	; (8000558 <HAL_InitTick+0x58>)
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	4619      	mov	r1, r3
 8000512:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000516:	fbb3 f3f1 	udiv	r3, r3, r1
 800051a:	fbb2 f3f3 	udiv	r3, r2, r3
 800051e:	4618      	mov	r0, r3
 8000520:	f000 f93b 	bl	800079a <HAL_SYSTICK_Config>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800052a:	2301      	movs	r3, #1
 800052c:	e00e      	b.n	800054c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	2b0f      	cmp	r3, #15
 8000532:	d80a      	bhi.n	800054a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000534:	2200      	movs	r2, #0
 8000536:	6879      	ldr	r1, [r7, #4]
 8000538:	f04f 30ff 	mov.w	r0, #4294967295
 800053c:	f000 f903 	bl	8000746 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000540:	4a06      	ldr	r2, [pc, #24]	; (800055c <HAL_InitTick+0x5c>)
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000546:	2300      	movs	r3, #0
 8000548:	e000      	b.n	800054c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800054a:	2301      	movs	r3, #1
}
 800054c:	4618      	mov	r0, r3
 800054e:	3708      	adds	r7, #8
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	20000000 	.word	0x20000000
 8000558:	20000008 	.word	0x20000008
 800055c:	20000004 	.word	0x20000004

08000560 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000564:	4b05      	ldr	r3, [pc, #20]	; (800057c <HAL_IncTick+0x1c>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	461a      	mov	r2, r3
 800056a:	4b05      	ldr	r3, [pc, #20]	; (8000580 <HAL_IncTick+0x20>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	4413      	add	r3, r2
 8000570:	4a03      	ldr	r2, [pc, #12]	; (8000580 <HAL_IncTick+0x20>)
 8000572:	6013      	str	r3, [r2, #0]
}
 8000574:	bf00      	nop
 8000576:	46bd      	mov	sp, r7
 8000578:	bc80      	pop	{r7}
 800057a:	4770      	bx	lr
 800057c:	20000008 	.word	0x20000008
 8000580:	200003c4 	.word	0x200003c4

08000584 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  return uwTick;
 8000588:	4b02      	ldr	r3, [pc, #8]	; (8000594 <HAL_GetTick+0x10>)
 800058a:	681b      	ldr	r3, [r3, #0]
}
 800058c:	4618      	mov	r0, r3
 800058e:	46bd      	mov	sp, r7
 8000590:	bc80      	pop	{r7}
 8000592:	4770      	bx	lr
 8000594:	200003c4 	.word	0x200003c4

08000598 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000598:	b480      	push	{r7}
 800059a:	b085      	sub	sp, #20
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	f003 0307 	and.w	r3, r3, #7
 80005a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005a8:	4b0c      	ldr	r3, [pc, #48]	; (80005dc <__NVIC_SetPriorityGrouping+0x44>)
 80005aa:	68db      	ldr	r3, [r3, #12]
 80005ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005ae:	68ba      	ldr	r2, [r7, #8]
 80005b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005b4:	4013      	ands	r3, r2
 80005b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005bc:	68bb      	ldr	r3, [r7, #8]
 80005be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005ca:	4a04      	ldr	r2, [pc, #16]	; (80005dc <__NVIC_SetPriorityGrouping+0x44>)
 80005cc:	68bb      	ldr	r3, [r7, #8]
 80005ce:	60d3      	str	r3, [r2, #12]
}
 80005d0:	bf00      	nop
 80005d2:	3714      	adds	r7, #20
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bc80      	pop	{r7}
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	e000ed00 	.word	0xe000ed00

080005e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005e4:	4b04      	ldr	r3, [pc, #16]	; (80005f8 <__NVIC_GetPriorityGrouping+0x18>)
 80005e6:	68db      	ldr	r3, [r3, #12]
 80005e8:	0a1b      	lsrs	r3, r3, #8
 80005ea:	f003 0307 	and.w	r3, r3, #7
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bc80      	pop	{r7}
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	e000ed00 	.word	0xe000ed00

080005fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800060a:	2b00      	cmp	r3, #0
 800060c:	db0b      	blt.n	8000626 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	f003 021f 	and.w	r2, r3, #31
 8000614:	4906      	ldr	r1, [pc, #24]	; (8000630 <__NVIC_EnableIRQ+0x34>)
 8000616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800061a:	095b      	lsrs	r3, r3, #5
 800061c:	2001      	movs	r0, #1
 800061e:	fa00 f202 	lsl.w	r2, r0, r2
 8000622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000626:	bf00      	nop
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	bc80      	pop	{r7}
 800062e:	4770      	bx	lr
 8000630:	e000e100 	.word	0xe000e100

08000634 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	6039      	str	r1, [r7, #0]
 800063e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000644:	2b00      	cmp	r3, #0
 8000646:	db0a      	blt.n	800065e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000648:	683b      	ldr	r3, [r7, #0]
 800064a:	b2da      	uxtb	r2, r3
 800064c:	490c      	ldr	r1, [pc, #48]	; (8000680 <__NVIC_SetPriority+0x4c>)
 800064e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000652:	0112      	lsls	r2, r2, #4
 8000654:	b2d2      	uxtb	r2, r2
 8000656:	440b      	add	r3, r1
 8000658:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800065c:	e00a      	b.n	8000674 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800065e:	683b      	ldr	r3, [r7, #0]
 8000660:	b2da      	uxtb	r2, r3
 8000662:	4908      	ldr	r1, [pc, #32]	; (8000684 <__NVIC_SetPriority+0x50>)
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	f003 030f 	and.w	r3, r3, #15
 800066a:	3b04      	subs	r3, #4
 800066c:	0112      	lsls	r2, r2, #4
 800066e:	b2d2      	uxtb	r2, r2
 8000670:	440b      	add	r3, r1
 8000672:	761a      	strb	r2, [r3, #24]
}
 8000674:	bf00      	nop
 8000676:	370c      	adds	r7, #12
 8000678:	46bd      	mov	sp, r7
 800067a:	bc80      	pop	{r7}
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	e000e100 	.word	0xe000e100
 8000684:	e000ed00 	.word	0xe000ed00

08000688 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000688:	b480      	push	{r7}
 800068a:	b089      	sub	sp, #36	; 0x24
 800068c:	af00      	add	r7, sp, #0
 800068e:	60f8      	str	r0, [r7, #12]
 8000690:	60b9      	str	r1, [r7, #8]
 8000692:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	f003 0307 	and.w	r3, r3, #7
 800069a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800069c:	69fb      	ldr	r3, [r7, #28]
 800069e:	f1c3 0307 	rsb	r3, r3, #7
 80006a2:	2b04      	cmp	r3, #4
 80006a4:	bf28      	it	cs
 80006a6:	2304      	movcs	r3, #4
 80006a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006aa:	69fb      	ldr	r3, [r7, #28]
 80006ac:	3304      	adds	r3, #4
 80006ae:	2b06      	cmp	r3, #6
 80006b0:	d902      	bls.n	80006b8 <NVIC_EncodePriority+0x30>
 80006b2:	69fb      	ldr	r3, [r7, #28]
 80006b4:	3b03      	subs	r3, #3
 80006b6:	e000      	b.n	80006ba <NVIC_EncodePriority+0x32>
 80006b8:	2300      	movs	r3, #0
 80006ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006bc:	f04f 32ff 	mov.w	r2, #4294967295
 80006c0:	69bb      	ldr	r3, [r7, #24]
 80006c2:	fa02 f303 	lsl.w	r3, r2, r3
 80006c6:	43da      	mvns	r2, r3
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	401a      	ands	r2, r3
 80006cc:	697b      	ldr	r3, [r7, #20]
 80006ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006d0:	f04f 31ff 	mov.w	r1, #4294967295
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	fa01 f303 	lsl.w	r3, r1, r3
 80006da:	43d9      	mvns	r1, r3
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e0:	4313      	orrs	r3, r2
         );
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	3724      	adds	r7, #36	; 0x24
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bc80      	pop	{r7}
 80006ea:	4770      	bx	lr

080006ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	3b01      	subs	r3, #1
 80006f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006fc:	d301      	bcc.n	8000702 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006fe:	2301      	movs	r3, #1
 8000700:	e00f      	b.n	8000722 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000702:	4a0a      	ldr	r2, [pc, #40]	; (800072c <SysTick_Config+0x40>)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	3b01      	subs	r3, #1
 8000708:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800070a:	210f      	movs	r1, #15
 800070c:	f04f 30ff 	mov.w	r0, #4294967295
 8000710:	f7ff ff90 	bl	8000634 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000714:	4b05      	ldr	r3, [pc, #20]	; (800072c <SysTick_Config+0x40>)
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800071a:	4b04      	ldr	r3, [pc, #16]	; (800072c <SysTick_Config+0x40>)
 800071c:	2207      	movs	r2, #7
 800071e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000720:	2300      	movs	r3, #0
}
 8000722:	4618      	mov	r0, r3
 8000724:	3708      	adds	r7, #8
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	e000e010 	.word	0xe000e010

08000730 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000738:	6878      	ldr	r0, [r7, #4]
 800073a:	f7ff ff2d 	bl	8000598 <__NVIC_SetPriorityGrouping>
}
 800073e:	bf00      	nop
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}

08000746 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000746:	b580      	push	{r7, lr}
 8000748:	b086      	sub	sp, #24
 800074a:	af00      	add	r7, sp, #0
 800074c:	4603      	mov	r3, r0
 800074e:	60b9      	str	r1, [r7, #8]
 8000750:	607a      	str	r2, [r7, #4]
 8000752:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000754:	2300      	movs	r3, #0
 8000756:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000758:	f7ff ff42 	bl	80005e0 <__NVIC_GetPriorityGrouping>
 800075c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800075e:	687a      	ldr	r2, [r7, #4]
 8000760:	68b9      	ldr	r1, [r7, #8]
 8000762:	6978      	ldr	r0, [r7, #20]
 8000764:	f7ff ff90 	bl	8000688 <NVIC_EncodePriority>
 8000768:	4602      	mov	r2, r0
 800076a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800076e:	4611      	mov	r1, r2
 8000770:	4618      	mov	r0, r3
 8000772:	f7ff ff5f 	bl	8000634 <__NVIC_SetPriority>
}
 8000776:	bf00      	nop
 8000778:	3718      	adds	r7, #24
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}

0800077e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800077e:	b580      	push	{r7, lr}
 8000780:	b082      	sub	sp, #8
 8000782:	af00      	add	r7, sp, #0
 8000784:	4603      	mov	r3, r0
 8000786:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800078c:	4618      	mov	r0, r3
 800078e:	f7ff ff35 	bl	80005fc <__NVIC_EnableIRQ>
}
 8000792:	bf00      	nop
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}

0800079a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800079a:	b580      	push	{r7, lr}
 800079c:	b082      	sub	sp, #8
 800079e:	af00      	add	r7, sp, #0
 80007a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007a2:	6878      	ldr	r0, [r7, #4]
 80007a4:	f7ff ffa2 	bl	80006ec <SysTick_Config>
 80007a8:	4603      	mov	r3, r0
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80007b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007b4:	b08b      	sub	sp, #44	; 0x2c
 80007b6:	af06      	add	r7, sp, #24
 80007b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d101      	bne.n	80007c4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80007c0:	2301      	movs	r3, #1
 80007c2:	e0fd      	b.n	80009c0 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d106      	bne.n	80007de <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2200      	movs	r2, #0
 80007d4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80007d8:	6878      	ldr	r0, [r7, #4]
 80007da:	f006 ff73 	bl	80076c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	2203      	movs	r2, #3
 80007e2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4618      	mov	r0, r3
 80007ec:	f002 fa7d 	bl	8002cea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	603b      	str	r3, [r7, #0]
 80007f6:	687e      	ldr	r6, [r7, #4]
 80007f8:	466d      	mov	r5, sp
 80007fa:	f106 0410 	add.w	r4, r6, #16
 80007fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000800:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000802:	6823      	ldr	r3, [r4, #0]
 8000804:	602b      	str	r3, [r5, #0]
 8000806:	1d33      	adds	r3, r6, #4
 8000808:	cb0e      	ldmia	r3, {r1, r2, r3}
 800080a:	6838      	ldr	r0, [r7, #0]
 800080c:	f002 fa47 	bl	8002c9e <USB_CoreInit>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d005      	beq.n	8000822 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	2202      	movs	r2, #2
 800081a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800081e:	2301      	movs	r3, #1
 8000820:	e0ce      	b.n	80009c0 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	2100      	movs	r1, #0
 8000828:	4618      	mov	r0, r3
 800082a:	f002 fa78 	bl	8002d1e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800082e:	2300      	movs	r3, #0
 8000830:	73fb      	strb	r3, [r7, #15]
 8000832:	e04c      	b.n	80008ce <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000834:	7bfb      	ldrb	r3, [r7, #15]
 8000836:	6879      	ldr	r1, [r7, #4]
 8000838:	1c5a      	adds	r2, r3, #1
 800083a:	4613      	mov	r3, r2
 800083c:	009b      	lsls	r3, r3, #2
 800083e:	4413      	add	r3, r2
 8000840:	00db      	lsls	r3, r3, #3
 8000842:	440b      	add	r3, r1
 8000844:	3301      	adds	r3, #1
 8000846:	2201      	movs	r2, #1
 8000848:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800084a:	7bfb      	ldrb	r3, [r7, #15]
 800084c:	6879      	ldr	r1, [r7, #4]
 800084e:	1c5a      	adds	r2, r3, #1
 8000850:	4613      	mov	r3, r2
 8000852:	009b      	lsls	r3, r3, #2
 8000854:	4413      	add	r3, r2
 8000856:	00db      	lsls	r3, r3, #3
 8000858:	440b      	add	r3, r1
 800085a:	7bfa      	ldrb	r2, [r7, #15]
 800085c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800085e:	7bfa      	ldrb	r2, [r7, #15]
 8000860:	7bfb      	ldrb	r3, [r7, #15]
 8000862:	b298      	uxth	r0, r3
 8000864:	6879      	ldr	r1, [r7, #4]
 8000866:	4613      	mov	r3, r2
 8000868:	009b      	lsls	r3, r3, #2
 800086a:	4413      	add	r3, r2
 800086c:	00db      	lsls	r3, r3, #3
 800086e:	440b      	add	r3, r1
 8000870:	3336      	adds	r3, #54	; 0x36
 8000872:	4602      	mov	r2, r0
 8000874:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000876:	7bfb      	ldrb	r3, [r7, #15]
 8000878:	6879      	ldr	r1, [r7, #4]
 800087a:	1c5a      	adds	r2, r3, #1
 800087c:	4613      	mov	r3, r2
 800087e:	009b      	lsls	r3, r3, #2
 8000880:	4413      	add	r3, r2
 8000882:	00db      	lsls	r3, r3, #3
 8000884:	440b      	add	r3, r1
 8000886:	3303      	adds	r3, #3
 8000888:	2200      	movs	r2, #0
 800088a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800088c:	7bfa      	ldrb	r2, [r7, #15]
 800088e:	6879      	ldr	r1, [r7, #4]
 8000890:	4613      	mov	r3, r2
 8000892:	009b      	lsls	r3, r3, #2
 8000894:	4413      	add	r3, r2
 8000896:	00db      	lsls	r3, r3, #3
 8000898:	440b      	add	r3, r1
 800089a:	3338      	adds	r3, #56	; 0x38
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80008a0:	7bfa      	ldrb	r2, [r7, #15]
 80008a2:	6879      	ldr	r1, [r7, #4]
 80008a4:	4613      	mov	r3, r2
 80008a6:	009b      	lsls	r3, r3, #2
 80008a8:	4413      	add	r3, r2
 80008aa:	00db      	lsls	r3, r3, #3
 80008ac:	440b      	add	r3, r1
 80008ae:	333c      	adds	r3, #60	; 0x3c
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80008b4:	7bfa      	ldrb	r2, [r7, #15]
 80008b6:	6879      	ldr	r1, [r7, #4]
 80008b8:	4613      	mov	r3, r2
 80008ba:	009b      	lsls	r3, r3, #2
 80008bc:	4413      	add	r3, r2
 80008be:	00db      	lsls	r3, r3, #3
 80008c0:	440b      	add	r3, r1
 80008c2:	3340      	adds	r3, #64	; 0x40
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80008c8:	7bfb      	ldrb	r3, [r7, #15]
 80008ca:	3301      	adds	r3, #1
 80008cc:	73fb      	strb	r3, [r7, #15]
 80008ce:	7bfa      	ldrb	r2, [r7, #15]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	685b      	ldr	r3, [r3, #4]
 80008d4:	429a      	cmp	r2, r3
 80008d6:	d3ad      	bcc.n	8000834 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80008d8:	2300      	movs	r3, #0
 80008da:	73fb      	strb	r3, [r7, #15]
 80008dc:	e044      	b.n	8000968 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80008de:	7bfa      	ldrb	r2, [r7, #15]
 80008e0:	6879      	ldr	r1, [r7, #4]
 80008e2:	4613      	mov	r3, r2
 80008e4:	009b      	lsls	r3, r3, #2
 80008e6:	4413      	add	r3, r2
 80008e8:	00db      	lsls	r3, r3, #3
 80008ea:	440b      	add	r3, r1
 80008ec:	f203 1369 	addw	r3, r3, #361	; 0x169
 80008f0:	2200      	movs	r2, #0
 80008f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80008f4:	7bfa      	ldrb	r2, [r7, #15]
 80008f6:	6879      	ldr	r1, [r7, #4]
 80008f8:	4613      	mov	r3, r2
 80008fa:	009b      	lsls	r3, r3, #2
 80008fc:	4413      	add	r3, r2
 80008fe:	00db      	lsls	r3, r3, #3
 8000900:	440b      	add	r3, r1
 8000902:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000906:	7bfa      	ldrb	r2, [r7, #15]
 8000908:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800090a:	7bfa      	ldrb	r2, [r7, #15]
 800090c:	6879      	ldr	r1, [r7, #4]
 800090e:	4613      	mov	r3, r2
 8000910:	009b      	lsls	r3, r3, #2
 8000912:	4413      	add	r3, r2
 8000914:	00db      	lsls	r3, r3, #3
 8000916:	440b      	add	r3, r1
 8000918:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800091c:	2200      	movs	r2, #0
 800091e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000920:	7bfa      	ldrb	r2, [r7, #15]
 8000922:	6879      	ldr	r1, [r7, #4]
 8000924:	4613      	mov	r3, r2
 8000926:	009b      	lsls	r3, r3, #2
 8000928:	4413      	add	r3, r2
 800092a:	00db      	lsls	r3, r3, #3
 800092c:	440b      	add	r3, r1
 800092e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000936:	7bfa      	ldrb	r2, [r7, #15]
 8000938:	6879      	ldr	r1, [r7, #4]
 800093a:	4613      	mov	r3, r2
 800093c:	009b      	lsls	r3, r3, #2
 800093e:	4413      	add	r3, r2
 8000940:	00db      	lsls	r3, r3, #3
 8000942:	440b      	add	r3, r1
 8000944:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800094c:	7bfa      	ldrb	r2, [r7, #15]
 800094e:	6879      	ldr	r1, [r7, #4]
 8000950:	4613      	mov	r3, r2
 8000952:	009b      	lsls	r3, r3, #2
 8000954:	4413      	add	r3, r2
 8000956:	00db      	lsls	r3, r3, #3
 8000958:	440b      	add	r3, r1
 800095a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000962:	7bfb      	ldrb	r3, [r7, #15]
 8000964:	3301      	adds	r3, #1
 8000966:	73fb      	strb	r3, [r7, #15]
 8000968:	7bfa      	ldrb	r2, [r7, #15]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	685b      	ldr	r3, [r3, #4]
 800096e:	429a      	cmp	r2, r3
 8000970:	d3b5      	bcc.n	80008de <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	603b      	str	r3, [r7, #0]
 8000978:	687e      	ldr	r6, [r7, #4]
 800097a:	466d      	mov	r5, sp
 800097c:	f106 0410 	add.w	r4, r6, #16
 8000980:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000982:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000984:	6823      	ldr	r3, [r4, #0]
 8000986:	602b      	str	r3, [r5, #0]
 8000988:	1d33      	adds	r3, r6, #4
 800098a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800098c:	6838      	ldr	r0, [r7, #0]
 800098e:	f002 f9d2 	bl	8002d36 <USB_DevInit>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d005      	beq.n	80009a4 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2202      	movs	r2, #2
 800099c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80009a0:	2301      	movs	r3, #1
 80009a2:	e00d      	b.n	80009c0 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	2200      	movs	r2, #0
 80009a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2201      	movs	r2, #1
 80009b0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4618      	mov	r0, r3
 80009ba:	f004 f981 	bl	8004cc0 <USB_DevDisconnect>

  return HAL_OK;
 80009be:	2300      	movs	r3, #0
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3714      	adds	r7, #20
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080009c8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80009d6:	2b01      	cmp	r3, #1
 80009d8:	d101      	bne.n	80009de <HAL_PCD_Start+0x16>
 80009da:	2302      	movs	r3, #2
 80009dc:	e016      	b.n	8000a0c <HAL_PCD_Start+0x44>
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	2201      	movs	r2, #1
 80009e2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4618      	mov	r0, r3
 80009ec:	f002 f967 	bl	8002cbe <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80009f0:	2101      	movs	r1, #1
 80009f2:	6878      	ldr	r0, [r7, #4]
 80009f4:	f007 f8ef 	bl	8007bd6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4618      	mov	r0, r3
 80009fe:	f004 f955 	bl	8004cac <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	2200      	movs	r2, #0
 8000a06:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000a0a:	2300      	movs	r3, #0
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b088      	sub	sp, #32
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4618      	mov	r0, r3
 8000a22:	f004 f957 	bl	8004cd4 <USB_ReadInterrupts>
 8000a26:	4603      	mov	r3, r0
 8000a28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000a30:	d102      	bne.n	8000a38 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000a32:	6878      	ldr	r0, [r7, #4]
 8000a34:	f000 fb8e 	bl	8001154 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f004 f949 	bl	8004cd4 <USB_ReadInterrupts>
 8000a42:	4603      	mov	r3, r0
 8000a44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a4c:	d112      	bne.n	8000a74 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000a56:	b29a      	uxth	r2, r3
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000a60:	b292      	uxth	r2, r2
 8000a62:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000a66:	6878      	ldr	r0, [r7, #4]
 8000a68:	f006 fea7 	bl	80077ba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	6878      	ldr	r0, [r7, #4]
 8000a70:	f000 f925 	bl	8000cbe <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f004 f92b 	bl	8004cd4 <USB_ReadInterrupts>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000a88:	d10b      	bne.n	8000aa2 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000a92:	b29a      	uxth	r2, r3
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000a9c:	b292      	uxth	r2, r2
 8000a9e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f004 f914 	bl	8004cd4 <USB_ReadInterrupts>
 8000aac:	4603      	mov	r3, r0
 8000aae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ab2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ab6:	d10b      	bne.n	8000ad0 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ac0:	b29a      	uxth	r2, r3
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000aca:	b292      	uxth	r2, r2
 8000acc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f004 f8fd 	bl	8004cd4 <USB_ReadInterrupts>
 8000ada:	4603      	mov	r3, r0
 8000adc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ae0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ae4:	d126      	bne.n	8000b34 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000aee:	b29a      	uxth	r2, r3
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f022 0204 	bic.w	r2, r2, #4
 8000af8:	b292      	uxth	r2, r2
 8000afa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000b06:	b29a      	uxth	r2, r3
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f022 0208 	bic.w	r2, r2, #8
 8000b10:	b292      	uxth	r2, r2
 8000b12:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000b16:	6878      	ldr	r0, [r7, #4]
 8000b18:	f006 fe88 	bl	800782c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000b24:	b29a      	uxth	r2, r3
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000b2e:	b292      	uxth	r2, r2
 8000b30:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f004 f8cb 	bl	8004cd4 <USB_ReadInterrupts>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000b48:	f040 8084 	bne.w	8000c54 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	77fb      	strb	r3, [r7, #31]
 8000b50:	e011      	b.n	8000b76 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	461a      	mov	r2, r3
 8000b58:	7ffb      	ldrb	r3, [r7, #31]
 8000b5a:	009b      	lsls	r3, r3, #2
 8000b5c:	441a      	add	r2, r3
 8000b5e:	7ffb      	ldrb	r3, [r7, #31]
 8000b60:	8812      	ldrh	r2, [r2, #0]
 8000b62:	b292      	uxth	r2, r2
 8000b64:	005b      	lsls	r3, r3, #1
 8000b66:	f107 0120 	add.w	r1, r7, #32
 8000b6a:	440b      	add	r3, r1
 8000b6c:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8000b70:	7ffb      	ldrb	r3, [r7, #31]
 8000b72:	3301      	adds	r3, #1
 8000b74:	77fb      	strb	r3, [r7, #31]
 8000b76:	7ffb      	ldrb	r3, [r7, #31]
 8000b78:	2b07      	cmp	r3, #7
 8000b7a:	d9ea      	bls.n	8000b52 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000b84:	b29a      	uxth	r2, r3
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f042 0201 	orr.w	r2, r2, #1
 8000b8e:	b292      	uxth	r2, r2
 8000b90:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000b9c:	b29a      	uxth	r2, r3
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f022 0201 	bic.w	r2, r2, #1
 8000ba6:	b292      	uxth	r2, r2
 8000ba8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8000bac:	bf00      	nop
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000bb6:	b29b      	uxth	r3, r3
 8000bb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d0f6      	beq.n	8000bae <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000bc8:	b29a      	uxth	r2, r3
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000bd2:	b292      	uxth	r2, r2
 8000bd4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8000bd8:	2300      	movs	r3, #0
 8000bda:	77fb      	strb	r3, [r7, #31]
 8000bdc:	e010      	b.n	8000c00 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8000bde:	7ffb      	ldrb	r3, [r7, #31]
 8000be0:	687a      	ldr	r2, [r7, #4]
 8000be2:	6812      	ldr	r2, [r2, #0]
 8000be4:	4611      	mov	r1, r2
 8000be6:	7ffa      	ldrb	r2, [r7, #31]
 8000be8:	0092      	lsls	r2, r2, #2
 8000bea:	440a      	add	r2, r1
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	f107 0120 	add.w	r1, r7, #32
 8000bf2:	440b      	add	r3, r1
 8000bf4:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8000bf8:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8000bfa:	7ffb      	ldrb	r3, [r7, #31]
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	77fb      	strb	r3, [r7, #31]
 8000c00:	7ffb      	ldrb	r3, [r7, #31]
 8000c02:	2b07      	cmp	r3, #7
 8000c04:	d9eb      	bls.n	8000bde <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000c0e:	b29a      	uxth	r2, r3
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f042 0208 	orr.w	r2, r2, #8
 8000c18:	b292      	uxth	r2, r2
 8000c1a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000c26:	b29a      	uxth	r2, r3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000c30:	b292      	uxth	r2, r2
 8000c32:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000c3e:	b29a      	uxth	r2, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f042 0204 	orr.w	r2, r2, #4
 8000c48:	b292      	uxth	r2, r2
 8000c4a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f006 fdd2 	bl	80077f8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f004 f83b 	bl	8004cd4 <USB_ReadInterrupts>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c68:	d10e      	bne.n	8000c88 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000c72:	b29a      	uxth	r2, r3
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000c7c:	b292      	uxth	r2, r2
 8000c7e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000c82:	6878      	ldr	r0, [r7, #4]
 8000c84:	f006 fd8b 	bl	800779e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f004 f821 	bl	8004cd4 <USB_ReadInterrupts>
 8000c92:	4603      	mov	r3, r0
 8000c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c9c:	d10b      	bne.n	8000cb6 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ca6:	b29a      	uxth	r2, r3
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000cb0:	b292      	uxth	r2, r2
 8000cb2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8000cb6:	bf00      	nop
 8000cb8:	3720      	adds	r7, #32
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b082      	sub	sp, #8
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
 8000cc6:	460b      	mov	r3, r1
 8000cc8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d101      	bne.n	8000cd8 <HAL_PCD_SetAddress+0x1a>
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	e013      	b.n	8000d00 <HAL_PCD_SetAddress+0x42>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2201      	movs	r2, #1
 8000cdc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	78fa      	ldrb	r2, [r7, #3]
 8000ce4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	78fa      	ldrb	r2, [r7, #3]
 8000cee:	4611      	mov	r1, r2
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f003 ffc8 	bl	8004c86 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000cfe:	2300      	movs	r3, #0
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	4608      	mov	r0, r1
 8000d12:	4611      	mov	r1, r2
 8000d14:	461a      	mov	r2, r3
 8000d16:	4603      	mov	r3, r0
 8000d18:	70fb      	strb	r3, [r7, #3]
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	803b      	strh	r3, [r7, #0]
 8000d1e:	4613      	mov	r3, r2
 8000d20:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8000d22:	2300      	movs	r3, #0
 8000d24:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000d26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	da0e      	bge.n	8000d4c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000d2e:	78fb      	ldrb	r3, [r7, #3]
 8000d30:	f003 0307 	and.w	r3, r3, #7
 8000d34:	1c5a      	adds	r2, r3, #1
 8000d36:	4613      	mov	r3, r2
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	4413      	add	r3, r2
 8000d3c:	00db      	lsls	r3, r3, #3
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	4413      	add	r3, r2
 8000d42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	2201      	movs	r2, #1
 8000d48:	705a      	strb	r2, [r3, #1]
 8000d4a:	e00e      	b.n	8000d6a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000d4c:	78fb      	ldrb	r3, [r7, #3]
 8000d4e:	f003 0207 	and.w	r2, r3, #7
 8000d52:	4613      	mov	r3, r2
 8000d54:	009b      	lsls	r3, r3, #2
 8000d56:	4413      	add	r3, r2
 8000d58:	00db      	lsls	r3, r3, #3
 8000d5a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000d5e:	687a      	ldr	r2, [r7, #4]
 8000d60:	4413      	add	r3, r2
 8000d62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	2200      	movs	r2, #0
 8000d68:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8000d6a:	78fb      	ldrb	r3, [r7, #3]
 8000d6c:	f003 0307 	and.w	r3, r3, #7
 8000d70:	b2da      	uxtb	r2, r3
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8000d76:	883a      	ldrh	r2, [r7, #0]
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	78ba      	ldrb	r2, [r7, #2]
 8000d80:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	785b      	ldrb	r3, [r3, #1]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d004      	beq.n	8000d94 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	b29a      	uxth	r2, r3
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8000d94:	78bb      	ldrb	r3, [r7, #2]
 8000d96:	2b02      	cmp	r3, #2
 8000d98:	d102      	bne.n	8000da0 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d101      	bne.n	8000dae <HAL_PCD_EP_Open+0xa6>
 8000daa:	2302      	movs	r3, #2
 8000dac:	e00e      	b.n	8000dcc <HAL_PCD_EP_Open+0xc4>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2201      	movs	r2, #1
 8000db2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	68f9      	ldr	r1, [r7, #12]
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f001 ffef 	bl	8002da0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8000dca:	7afb      	ldrb	r3, [r7, #11]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3710      	adds	r7, #16
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	460b      	mov	r3, r1
 8000dde:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000de0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	da0e      	bge.n	8000e06 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000de8:	78fb      	ldrb	r3, [r7, #3]
 8000dea:	f003 0307 	and.w	r3, r3, #7
 8000dee:	1c5a      	adds	r2, r3, #1
 8000df0:	4613      	mov	r3, r2
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	4413      	add	r3, r2
 8000df6:	00db      	lsls	r3, r3, #3
 8000df8:	687a      	ldr	r2, [r7, #4]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	2201      	movs	r2, #1
 8000e02:	705a      	strb	r2, [r3, #1]
 8000e04:	e00e      	b.n	8000e24 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000e06:	78fb      	ldrb	r3, [r7, #3]
 8000e08:	f003 0207 	and.w	r2, r3, #7
 8000e0c:	4613      	mov	r3, r2
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	4413      	add	r3, r2
 8000e12:	00db      	lsls	r3, r3, #3
 8000e14:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000e18:	687a      	ldr	r2, [r7, #4]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	2200      	movs	r2, #0
 8000e22:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8000e24:	78fb      	ldrb	r3, [r7, #3]
 8000e26:	f003 0307 	and.w	r3, r3, #7
 8000e2a:	b2da      	uxtb	r2, r3
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d101      	bne.n	8000e3e <HAL_PCD_EP_Close+0x6a>
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	e00e      	b.n	8000e5c <HAL_PCD_EP_Close+0x88>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2201      	movs	r2, #1
 8000e42:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	68f9      	ldr	r1, [r7, #12]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f002 fb11 	bl	8003474 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2200      	movs	r2, #0
 8000e56:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8000e5a:	2300      	movs	r3, #0
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3710      	adds	r7, #16
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b086      	sub	sp, #24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	607a      	str	r2, [r7, #4]
 8000e6e:	603b      	str	r3, [r7, #0]
 8000e70:	460b      	mov	r3, r1
 8000e72:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000e74:	7afb      	ldrb	r3, [r7, #11]
 8000e76:	f003 0207 	and.w	r2, r3, #7
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	4413      	add	r3, r2
 8000e80:	00db      	lsls	r3, r3, #3
 8000e82:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000e86:	68fa      	ldr	r2, [r7, #12]
 8000e88:	4413      	add	r3, r2
 8000e8a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	687a      	ldr	r2, [r7, #4]
 8000e90:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	683a      	ldr	r2, [r7, #0]
 8000e96:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000ea4:	7afb      	ldrb	r3, [r7, #11]
 8000ea6:	f003 0307 	and.w	r3, r3, #7
 8000eaa:	b2da      	uxtb	r2, r3
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000eb0:	7afb      	ldrb	r3, [r7, #11]
 8000eb2:	f003 0307 	and.w	r3, r3, #7
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d106      	bne.n	8000ec8 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	6979      	ldr	r1, [r7, #20]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f002 fcc3 	bl	800384c <USB_EPStartXfer>
 8000ec6:	e005      	b.n	8000ed4 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	6979      	ldr	r1, [r7, #20]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f002 fcbc 	bl	800384c <USB_EPStartXfer>
  }

  return HAL_OK;
 8000ed4:	2300      	movs	r3, #0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3718      	adds	r7, #24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	b083      	sub	sp, #12
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
 8000ee6:	460b      	mov	r3, r1
 8000ee8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8000eea:	78fb      	ldrb	r3, [r7, #3]
 8000eec:	f003 0207 	and.w	r2, r3, #7
 8000ef0:	6879      	ldr	r1, [r7, #4]
 8000ef2:	4613      	mov	r3, r2
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	4413      	add	r3, r2
 8000ef8:	00db      	lsls	r3, r3, #3
 8000efa:	440b      	add	r3, r1
 8000efc:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8000f00:	681b      	ldr	r3, [r3, #0]
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bc80      	pop	{r7}
 8000f0a:	4770      	bx	lr

08000f0c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b086      	sub	sp, #24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	607a      	str	r2, [r7, #4]
 8000f16:	603b      	str	r3, [r7, #0]
 8000f18:	460b      	mov	r3, r1
 8000f1a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000f1c:	7afb      	ldrb	r3, [r7, #11]
 8000f1e:	f003 0307 	and.w	r3, r3, #7
 8000f22:	1c5a      	adds	r2, r3, #1
 8000f24:	4613      	mov	r3, r2
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	4413      	add	r3, r2
 8000f2a:	00db      	lsls	r3, r3, #3
 8000f2c:	68fa      	ldr	r2, [r7, #12]
 8000f2e:	4413      	add	r3, r2
 8000f30:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	687a      	ldr	r2, [r7, #4]
 8000f36:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	683a      	ldr	r2, [r7, #0]
 8000f3c:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	2201      	movs	r2, #1
 8000f42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	683a      	ldr	r2, [r7, #0]
 8000f4a:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	2200      	movs	r2, #0
 8000f50:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	2201      	movs	r2, #1
 8000f56:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000f58:	7afb      	ldrb	r3, [r7, #11]
 8000f5a:	f003 0307 	and.w	r3, r3, #7
 8000f5e:	b2da      	uxtb	r2, r3
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000f64:	7afb      	ldrb	r3, [r7, #11]
 8000f66:	f003 0307 	and.w	r3, r3, #7
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d106      	bne.n	8000f7c <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	6979      	ldr	r1, [r7, #20]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f002 fc69 	bl	800384c <USB_EPStartXfer>
 8000f7a:	e005      	b.n	8000f88 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	6979      	ldr	r1, [r7, #20]
 8000f82:	4618      	mov	r0, r3
 8000f84:	f002 fc62 	bl	800384c <USB_EPStartXfer>
  }

  return HAL_OK;
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3718      	adds	r7, #24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b084      	sub	sp, #16
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
 8000f9a:	460b      	mov	r3, r1
 8000f9c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8000f9e:	78fb      	ldrb	r3, [r7, #3]
 8000fa0:	f003 0207 	and.w	r2, r3, #7
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d901      	bls.n	8000fb0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8000fac:	2301      	movs	r3, #1
 8000fae:	e04c      	b.n	800104a <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000fb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	da0e      	bge.n	8000fd6 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000fb8:	78fb      	ldrb	r3, [r7, #3]
 8000fba:	f003 0307 	and.w	r3, r3, #7
 8000fbe:	1c5a      	adds	r2, r3, #1
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	4413      	add	r3, r2
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	687a      	ldr	r2, [r7, #4]
 8000fca:	4413      	add	r3, r2
 8000fcc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	705a      	strb	r2, [r3, #1]
 8000fd4:	e00c      	b.n	8000ff0 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000fd6:	78fa      	ldrb	r2, [r7, #3]
 8000fd8:	4613      	mov	r3, r2
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	4413      	add	r3, r2
 8000fde:	00db      	lsls	r3, r3, #3
 8000fe0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000fe4:	687a      	ldr	r2, [r7, #4]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	2200      	movs	r2, #0
 8000fee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000ff6:	78fb      	ldrb	r3, [r7, #3]
 8000ff8:	f003 0307 	and.w	r3, r3, #7
 8000ffc:	b2da      	uxtb	r2, r3
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001008:	2b01      	cmp	r3, #1
 800100a:	d101      	bne.n	8001010 <HAL_PCD_EP_SetStall+0x7e>
 800100c:	2302      	movs	r3, #2
 800100e:	e01c      	b.n	800104a <HAL_PCD_EP_SetStall+0xb8>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2201      	movs	r2, #1
 8001014:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	68f9      	ldr	r1, [r7, #12]
 800101e:	4618      	mov	r0, r3
 8001020:	f003 fd34 	bl	8004a8c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001024:	78fb      	ldrb	r3, [r7, #3]
 8001026:	f003 0307 	and.w	r3, r3, #7
 800102a:	2b00      	cmp	r3, #0
 800102c:	d108      	bne.n	8001040 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001038:	4619      	mov	r1, r3
 800103a:	4610      	mov	r0, r2
 800103c:	f003 fe59 	bl	8004cf2 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2200      	movs	r2, #0
 8001044:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001048:	2300      	movs	r3, #0
}
 800104a:	4618      	mov	r0, r3
 800104c:	3710      	adds	r7, #16
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b084      	sub	sp, #16
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
 800105a:	460b      	mov	r3, r1
 800105c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800105e:	78fb      	ldrb	r3, [r7, #3]
 8001060:	f003 020f 	and.w	r2, r3, #15
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	429a      	cmp	r2, r3
 800106a:	d901      	bls.n	8001070 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800106c:	2301      	movs	r3, #1
 800106e:	e040      	b.n	80010f2 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001070:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001074:	2b00      	cmp	r3, #0
 8001076:	da0e      	bge.n	8001096 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001078:	78fb      	ldrb	r3, [r7, #3]
 800107a:	f003 0307 	and.w	r3, r3, #7
 800107e:	1c5a      	adds	r2, r3, #1
 8001080:	4613      	mov	r3, r2
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	4413      	add	r3, r2
 8001086:	00db      	lsls	r3, r3, #3
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	4413      	add	r3, r2
 800108c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	2201      	movs	r2, #1
 8001092:	705a      	strb	r2, [r3, #1]
 8001094:	e00e      	b.n	80010b4 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001096:	78fb      	ldrb	r3, [r7, #3]
 8001098:	f003 0207 	and.w	r2, r3, #7
 800109c:	4613      	mov	r3, r2
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	4413      	add	r3, r2
 80010a2:	00db      	lsls	r3, r3, #3
 80010a4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80010a8:	687a      	ldr	r2, [r7, #4]
 80010aa:	4413      	add	r3, r2
 80010ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	2200      	movs	r2, #0
 80010b2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	2200      	movs	r2, #0
 80010b8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80010ba:	78fb      	ldrb	r3, [r7, #3]
 80010bc:	f003 0307 	and.w	r3, r3, #7
 80010c0:	b2da      	uxtb	r2, r3
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d101      	bne.n	80010d4 <HAL_PCD_EP_ClrStall+0x82>
 80010d0:	2302      	movs	r3, #2
 80010d2:	e00e      	b.n	80010f2 <HAL_PCD_EP_ClrStall+0xa0>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2201      	movs	r2, #1
 80010d8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	68f9      	ldr	r1, [r7, #12]
 80010e2:	4618      	mov	r0, r3
 80010e4:	f003 fd22 	bl	8004b2c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2200      	movs	r2, #0
 80010ec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b082      	sub	sp, #8
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
 8001102:	460b      	mov	r3, r1
 8001104:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800110c:	2b01      	cmp	r3, #1
 800110e:	d101      	bne.n	8001114 <HAL_PCD_EP_Flush+0x1a>
 8001110:	2302      	movs	r3, #2
 8001112:	e01b      	b.n	800114c <HAL_PCD_EP_Flush+0x52>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2201      	movs	r2, #1
 8001118:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  if ((ep_addr & 0x80U) == 0x80U)
 800111c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001120:	2b00      	cmp	r3, #0
 8001122:	da09      	bge.n	8001138 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	78fb      	ldrb	r3, [r7, #3]
 800112a:	f003 0307 	and.w	r3, r3, #7
 800112e:	4619      	mov	r1, r3
 8001130:	4610      	mov	r0, r2
 8001132:	f001 fe20 	bl	8002d76 <USB_FlushTxFifo>
 8001136:	e004      	b.n	8001142 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4618      	mov	r0, r3
 800113e:	f001 fe25 	bl	8002d8c <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2200      	movs	r2, #0
 8001146:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800114a:	2300      	movs	r3, #0
}
 800114c:	4618      	mov	r0, r3
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b08e      	sub	sp, #56	; 0x38
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800115c:	e2df      	b.n	800171e <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001166:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001168:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800116a:	b2db      	uxtb	r3, r3
 800116c:	f003 030f 	and.w	r3, r3, #15
 8001170:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001174:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001178:	2b00      	cmp	r3, #0
 800117a:	f040 8158 	bne.w	800142e <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800117e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001180:	f003 0310 	and.w	r3, r3, #16
 8001184:	2b00      	cmp	r3, #0
 8001186:	d152      	bne.n	800122e <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	881b      	ldrh	r3, [r3, #0]
 800118e:	b29b      	uxth	r3, r3
 8001190:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001194:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001198:	81fb      	strh	r3, [r7, #14]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	89fb      	ldrh	r3, [r7, #14]
 80011a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80011a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3328      	adds	r3, #40	; 0x28
 80011b0:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	461a      	mov	r2, r3
 80011be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	00db      	lsls	r3, r3, #3
 80011c4:	4413      	add	r3, r2
 80011c6:	3302      	adds	r3, #2
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	6812      	ldr	r2, [r2, #0]
 80011ce:	4413      	add	r3, r2
 80011d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80011d4:	881b      	ldrh	r3, [r3, #0]
 80011d6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80011da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011dc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80011de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e0:	695a      	ldr	r2, [r3, #20]
 80011e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e4:	69db      	ldr	r3, [r3, #28]
 80011e6:	441a      	add	r2, r3
 80011e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ea:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80011ec:	2100      	movs	r1, #0
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f006 fabb 	bl	800776a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	f000 828e 	beq.w	800171e <PCD_EP_ISR_Handler+0x5ca>
 8001202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001204:	699b      	ldr	r3, [r3, #24]
 8001206:	2b00      	cmp	r3, #0
 8001208:	f040 8289 	bne.w	800171e <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001212:	b2db      	uxtb	r3, r3
 8001214:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001218:	b2da      	uxtb	r2, r3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	b292      	uxth	r2, r2
 8001220:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2200      	movs	r2, #0
 8001228:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800122c:	e277      	b.n	800171e <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001234:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	881b      	ldrh	r3, [r3, #0]
 800123c:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800123e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001240:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001244:	2b00      	cmp	r3, #0
 8001246:	d034      	beq.n	80012b2 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001250:	b29b      	uxth	r3, r3
 8001252:	461a      	mov	r2, r3
 8001254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	00db      	lsls	r3, r3, #3
 800125a:	4413      	add	r3, r2
 800125c:	3306      	adds	r3, #6
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	687a      	ldr	r2, [r7, #4]
 8001262:	6812      	ldr	r2, [r2, #0]
 8001264:	4413      	add	r3, r2
 8001266:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800126a:	881b      	ldrh	r3, [r3, #0]
 800126c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001272:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6818      	ldr	r0, [r3, #0]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800127e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001280:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001284:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001286:	b29b      	uxth	r3, r3
 8001288:	f003 fd82 	bl	8004d90 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	881b      	ldrh	r3, [r3, #0]
 8001292:	b29a      	uxth	r2, r3
 8001294:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001298:	4013      	ands	r3, r2
 800129a:	823b      	strh	r3, [r7, #16]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	8a3a      	ldrh	r2, [r7, #16]
 80012a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80012a6:	b292      	uxth	r2, r2
 80012a8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f006 fa30 	bl	8007710 <HAL_PCD_SetupStageCallback>
 80012b0:	e235      	b.n	800171e <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80012b2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	f280 8231 	bge.w	800171e <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	881b      	ldrh	r3, [r3, #0]
 80012c2:	b29a      	uxth	r2, r3
 80012c4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80012c8:	4013      	ands	r3, r2
 80012ca:	83bb      	strh	r3, [r7, #28]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	8bba      	ldrh	r2, [r7, #28]
 80012d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80012d6:	b292      	uxth	r2, r2
 80012d8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	461a      	mov	r2, r3
 80012e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	00db      	lsls	r3, r3, #3
 80012ec:	4413      	add	r3, r2
 80012ee:	3306      	adds	r3, #6
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	6812      	ldr	r2, [r2, #0]
 80012f6:	4413      	add	r3, r2
 80012f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80012fc:	881b      	ldrh	r3, [r3, #0]
 80012fe:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001304:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001308:	69db      	ldr	r3, [r3, #28]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d019      	beq.n	8001342 <PCD_EP_ISR_Handler+0x1ee>
 800130e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001310:	695b      	ldr	r3, [r3, #20]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d015      	beq.n	8001342 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6818      	ldr	r0, [r3, #0]
 800131a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131c:	6959      	ldr	r1, [r3, #20]
 800131e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001320:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001324:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001326:	b29b      	uxth	r3, r3
 8001328:	f003 fd32 	bl	8004d90 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800132c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132e:	695a      	ldr	r2, [r3, #20]
 8001330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001332:	69db      	ldr	r3, [r3, #28]
 8001334:	441a      	add	r2, r3
 8001336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001338:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800133a:	2100      	movs	r1, #0
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f006 f9f9 	bl	8007734 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	61bb      	str	r3, [r7, #24]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001350:	b29b      	uxth	r3, r3
 8001352:	461a      	mov	r2, r3
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	4413      	add	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001360:	617b      	str	r3, [r7, #20]
 8001362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001364:	691b      	ldr	r3, [r3, #16]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d112      	bne.n	8001390 <PCD_EP_ISR_Handler+0x23c>
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	881b      	ldrh	r3, [r3, #0]
 800136e:	b29b      	uxth	r3, r3
 8001370:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001374:	b29a      	uxth	r2, r3
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	801a      	strh	r2, [r3, #0]
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	881b      	ldrh	r3, [r3, #0]
 800137e:	b29b      	uxth	r3, r3
 8001380:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001384:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001388:	b29a      	uxth	r2, r3
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	801a      	strh	r2, [r3, #0]
 800138e:	e02f      	b.n	80013f0 <PCD_EP_ISR_Handler+0x29c>
 8001390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001392:	691b      	ldr	r3, [r3, #16]
 8001394:	2b3e      	cmp	r3, #62	; 0x3e
 8001396:	d813      	bhi.n	80013c0 <PCD_EP_ISR_Handler+0x26c>
 8001398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139a:	691b      	ldr	r3, [r3, #16]
 800139c:	085b      	lsrs	r3, r3, #1
 800139e:	633b      	str	r3, [r7, #48]	; 0x30
 80013a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a2:	691b      	ldr	r3, [r3, #16]
 80013a4:	f003 0301 	and.w	r3, r3, #1
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d002      	beq.n	80013b2 <PCD_EP_ISR_Handler+0x25e>
 80013ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013ae:	3301      	adds	r3, #1
 80013b0:	633b      	str	r3, [r7, #48]	; 0x30
 80013b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	029b      	lsls	r3, r3, #10
 80013b8:	b29a      	uxth	r2, r3
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	801a      	strh	r2, [r3, #0]
 80013be:	e017      	b.n	80013f0 <PCD_EP_ISR_Handler+0x29c>
 80013c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c2:	691b      	ldr	r3, [r3, #16]
 80013c4:	095b      	lsrs	r3, r3, #5
 80013c6:	633b      	str	r3, [r7, #48]	; 0x30
 80013c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ca:	691b      	ldr	r3, [r3, #16]
 80013cc:	f003 031f 	and.w	r3, r3, #31
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d102      	bne.n	80013da <PCD_EP_ISR_Handler+0x286>
 80013d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013d6:	3b01      	subs	r3, #1
 80013d8:	633b      	str	r3, [r7, #48]	; 0x30
 80013da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013dc:	b29b      	uxth	r3, r3
 80013de:	029b      	lsls	r3, r3, #10
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80013e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80013ea:	b29a      	uxth	r2, r3
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	881b      	ldrh	r3, [r3, #0]
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80013fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001400:	827b      	strh	r3, [r7, #18]
 8001402:	8a7b      	ldrh	r3, [r7, #18]
 8001404:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001408:	827b      	strh	r3, [r7, #18]
 800140a:	8a7b      	ldrh	r3, [r7, #18]
 800140c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001410:	827b      	strh	r3, [r7, #18]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	8a7b      	ldrh	r3, [r7, #18]
 8001418:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800141c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001420:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001428:	b29b      	uxth	r3, r3
 800142a:	8013      	strh	r3, [r2, #0]
 800142c:	e177      	b.n	800171e <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	461a      	mov	r2, r3
 8001434:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	4413      	add	r3, r2
 800143c:	881b      	ldrh	r3, [r3, #0]
 800143e:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001440:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001444:	2b00      	cmp	r3, #0
 8001446:	f280 80ea 	bge.w	800161e <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	461a      	mov	r2, r3
 8001450:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	4413      	add	r3, r2
 8001458:	881b      	ldrh	r3, [r3, #0]
 800145a:	b29a      	uxth	r2, r3
 800145c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001460:	4013      	ands	r3, r2
 8001462:	853b      	strh	r3, [r7, #40]	; 0x28
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	461a      	mov	r2, r3
 800146a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	4413      	add	r3, r2
 8001472:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001474:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001478:	b292      	uxth	r2, r2
 800147a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800147c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001480:	4613      	mov	r3, r2
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	4413      	add	r3, r2
 8001486:	00db      	lsls	r3, r3, #3
 8001488:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	4413      	add	r3, r2
 8001490:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001494:	7b1b      	ldrb	r3, [r3, #12]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d122      	bne.n	80014e0 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	461a      	mov	r2, r3
 80014a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	00db      	lsls	r3, r3, #3
 80014ac:	4413      	add	r3, r2
 80014ae:	3306      	adds	r3, #6
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	6812      	ldr	r2, [r2, #0]
 80014b6:	4413      	add	r3, r2
 80014b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80014bc:	881b      	ldrh	r3, [r3, #0]
 80014be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80014c2:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80014c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	f000 8087 	beq.w	80015da <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6818      	ldr	r0, [r3, #0]
 80014d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d2:	6959      	ldr	r1, [r3, #20]
 80014d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d6:	88da      	ldrh	r2, [r3, #6]
 80014d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80014da:	f003 fc59 	bl	8004d90 <USB_ReadPMA>
 80014de:	e07c      	b.n	80015da <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80014e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e2:	78db      	ldrb	r3, [r3, #3]
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d108      	bne.n	80014fa <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80014e8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80014ea:	461a      	mov	r2, r3
 80014ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f000 f923 	bl	800173a <HAL_PCD_EP_DB_Receive>
 80014f4:	4603      	mov	r3, r0
 80014f6:	86fb      	strh	r3, [r7, #54]	; 0x36
 80014f8:	e06f      	b.n	80015da <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	461a      	mov	r2, r3
 8001500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	4413      	add	r3, r2
 8001508:	881b      	ldrh	r3, [r3, #0]
 800150a:	b29b      	uxth	r3, r3
 800150c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001510:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001514:	847b      	strh	r3, [r7, #34]	; 0x22
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	461a      	mov	r2, r3
 800151c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	441a      	add	r2, r3
 8001524:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001526:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800152a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800152e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001532:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001536:	b29b      	uxth	r3, r3
 8001538:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	461a      	mov	r2, r3
 8001540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	4413      	add	r3, r2
 8001548:	881b      	ldrh	r3, [r3, #0]
 800154a:	b29b      	uxth	r3, r3
 800154c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d021      	beq.n	8001598 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800155c:	b29b      	uxth	r3, r3
 800155e:	461a      	mov	r2, r3
 8001560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	00db      	lsls	r3, r3, #3
 8001566:	4413      	add	r3, r2
 8001568:	3302      	adds	r3, #2
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	6812      	ldr	r2, [r2, #0]
 8001570:	4413      	add	r3, r2
 8001572:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001576:	881b      	ldrh	r3, [r3, #0]
 8001578:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800157c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800157e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001580:	2b00      	cmp	r3, #0
 8001582:	d02a      	beq.n	80015da <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6818      	ldr	r0, [r3, #0]
 8001588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158a:	6959      	ldr	r1, [r3, #20]
 800158c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158e:	891a      	ldrh	r2, [r3, #8]
 8001590:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001592:	f003 fbfd 	bl	8004d90 <USB_ReadPMA>
 8001596:	e020      	b.n	80015da <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	461a      	mov	r2, r3
 80015a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	00db      	lsls	r3, r3, #3
 80015aa:	4413      	add	r3, r2
 80015ac:	3306      	adds	r3, #6
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	6812      	ldr	r2, [r2, #0]
 80015b4:	4413      	add	r3, r2
 80015b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80015ba:	881b      	ldrh	r3, [r3, #0]
 80015bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80015c0:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80015c2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d008      	beq.n	80015da <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6818      	ldr	r0, [r3, #0]
 80015cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ce:	6959      	ldr	r1, [r3, #20]
 80015d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d2:	895a      	ldrh	r2, [r3, #10]
 80015d4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80015d6:	f003 fbdb 	bl	8004d90 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80015da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015dc:	69da      	ldr	r2, [r3, #28]
 80015de:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80015e0:	441a      	add	r2, r3
 80015e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80015e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e8:	695a      	ldr	r2, [r3, #20]
 80015ea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80015ec:	441a      	add	r2, r3
 80015ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f0:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80015f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f4:	699b      	ldr	r3, [r3, #24]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d004      	beq.n	8001604 <PCD_EP_ISR_Handler+0x4b0>
 80015fa:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80015fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fe:	691b      	ldr	r3, [r3, #16]
 8001600:	429a      	cmp	r2, r3
 8001602:	d206      	bcs.n	8001612 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	4619      	mov	r1, r3
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f006 f892 	bl	8007734 <HAL_PCD_DataOutStageCallback>
 8001610:	e005      	b.n	800161e <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001618:	4618      	mov	r0, r3
 800161a:	f002 f917 	bl	800384c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800161e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001620:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001624:	2b00      	cmp	r3, #0
 8001626:	d07a      	beq.n	800171e <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8001628:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800162c:	1c5a      	adds	r2, r3, #1
 800162e:	4613      	mov	r3, r2
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	4413      	add	r3, r2
 8001634:	00db      	lsls	r3, r3, #3
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	4413      	add	r3, r2
 800163a:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	461a      	mov	r2, r3
 8001642:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	4413      	add	r3, r2
 800164a:	881b      	ldrh	r3, [r3, #0]
 800164c:	b29b      	uxth	r3, r3
 800164e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001656:	843b      	strh	r3, [r7, #32]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	461a      	mov	r2, r3
 800165e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	441a      	add	r2, r3
 8001666:	8c3b      	ldrh	r3, [r7, #32]
 8001668:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800166c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001670:	b29b      	uxth	r3, r3
 8001672:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8001674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001676:	78db      	ldrb	r3, [r3, #3]
 8001678:	2b02      	cmp	r3, #2
 800167a:	d108      	bne.n	800168e <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800167c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167e:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8001680:	2b02      	cmp	r3, #2
 8001682:	d146      	bne.n	8001712 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001684:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800168a:	2b00      	cmp	r3, #0
 800168c:	d141      	bne.n	8001712 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001696:	b29b      	uxth	r3, r3
 8001698:	461a      	mov	r2, r3
 800169a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	00db      	lsls	r3, r3, #3
 80016a0:	4413      	add	r3, r2
 80016a2:	3302      	adds	r3, #2
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	6812      	ldr	r2, [r2, #0]
 80016aa:	4413      	add	r3, r2
 80016ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80016b0:	881b      	ldrh	r3, [r3, #0]
 80016b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80016b6:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80016b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ba:	699a      	ldr	r2, [r3, #24]
 80016bc:	8bfb      	ldrh	r3, [r7, #30]
 80016be:	429a      	cmp	r2, r3
 80016c0:	d906      	bls.n	80016d0 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 80016c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c4:	699a      	ldr	r2, [r3, #24]
 80016c6:	8bfb      	ldrh	r3, [r7, #30]
 80016c8:	1ad2      	subs	r2, r2, r3
 80016ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016cc:	619a      	str	r2, [r3, #24]
 80016ce:	e002      	b.n	80016d6 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 80016d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d2:	2200      	movs	r2, #0
 80016d4:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80016d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d106      	bne.n	80016ec <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80016de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	4619      	mov	r1, r3
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f006 f840 	bl	800776a <HAL_PCD_DataInStageCallback>
 80016ea:	e018      	b.n	800171e <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80016ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ee:	695a      	ldr	r2, [r3, #20]
 80016f0:	8bfb      	ldrh	r3, [r7, #30]
 80016f2:	441a      	add	r2, r3
 80016f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f6:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80016f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fa:	69da      	ldr	r2, [r3, #28]
 80016fc:	8bfb      	ldrh	r3, [r7, #30]
 80016fe:	441a      	add	r2, r3
 8001700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001702:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800170a:	4618      	mov	r0, r3
 800170c:	f002 f89e 	bl	800384c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8001710:	e005      	b.n	800171e <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001712:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001714:	461a      	mov	r2, r3
 8001716:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f000 f91b 	bl	8001954 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001726:	b29b      	uxth	r3, r3
 8001728:	b21b      	sxth	r3, r3
 800172a:	2b00      	cmp	r3, #0
 800172c:	f6ff ad17 	blt.w	800115e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3738      	adds	r7, #56	; 0x38
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b088      	sub	sp, #32
 800173e:	af00      	add	r7, sp, #0
 8001740:	60f8      	str	r0, [r7, #12]
 8001742:	60b9      	str	r1, [r7, #8]
 8001744:	4613      	mov	r3, r2
 8001746:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001748:	88fb      	ldrh	r3, [r7, #6]
 800174a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d07e      	beq.n	8001850 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800175a:	b29b      	uxth	r3, r3
 800175c:	461a      	mov	r2, r3
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	00db      	lsls	r3, r3, #3
 8001764:	4413      	add	r3, r2
 8001766:	3302      	adds	r3, #2
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	68fa      	ldr	r2, [r7, #12]
 800176c:	6812      	ldr	r2, [r2, #0]
 800176e:	4413      	add	r3, r2
 8001770:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001774:	881b      	ldrh	r3, [r3, #0]
 8001776:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800177a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	699a      	ldr	r2, [r3, #24]
 8001780:	8b7b      	ldrh	r3, [r7, #26]
 8001782:	429a      	cmp	r2, r3
 8001784:	d306      	bcc.n	8001794 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	699a      	ldr	r2, [r3, #24]
 800178a:	8b7b      	ldrh	r3, [r7, #26]
 800178c:	1ad2      	subs	r2, r2, r3
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	619a      	str	r2, [r3, #24]
 8001792:	e002      	b.n	800179a <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	2200      	movs	r2, #0
 8001798:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	699b      	ldr	r3, [r3, #24]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d123      	bne.n	80017ea <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	461a      	mov	r2, r3
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	4413      	add	r3, r2
 80017b0:	881b      	ldrh	r3, [r3, #0]
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80017b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017bc:	833b      	strh	r3, [r7, #24]
 80017be:	8b3b      	ldrh	r3, [r7, #24]
 80017c0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80017c4:	833b      	strh	r3, [r7, #24]
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	461a      	mov	r2, r3
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	441a      	add	r2, r3
 80017d4:	8b3b      	ldrh	r3, [r7, #24]
 80017d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80017da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80017de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017e6:	b29b      	uxth	r3, r3
 80017e8:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80017ea:	88fb      	ldrh	r3, [r7, #6]
 80017ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d01f      	beq.n	8001834 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	461a      	mov	r2, r3
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	4413      	add	r3, r2
 8001802:	881b      	ldrh	r3, [r3, #0]
 8001804:	b29b      	uxth	r3, r3
 8001806:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800180a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800180e:	82fb      	strh	r3, [r7, #22]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	461a      	mov	r2, r3
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	441a      	add	r2, r3
 800181e:	8afb      	ldrh	r3, [r7, #22]
 8001820:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001824:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001828:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800182c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001830:	b29b      	uxth	r3, r3
 8001832:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001834:	8b7b      	ldrh	r3, [r7, #26]
 8001836:	2b00      	cmp	r3, #0
 8001838:	f000 8087 	beq.w	800194a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	6818      	ldr	r0, [r3, #0]
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	6959      	ldr	r1, [r3, #20]
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	891a      	ldrh	r2, [r3, #8]
 8001848:	8b7b      	ldrh	r3, [r7, #26]
 800184a:	f003 faa1 	bl	8004d90 <USB_ReadPMA>
 800184e:	e07c      	b.n	800194a <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001858:	b29b      	uxth	r3, r3
 800185a:	461a      	mov	r2, r3
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	00db      	lsls	r3, r3, #3
 8001862:	4413      	add	r3, r2
 8001864:	3306      	adds	r3, #6
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	68fa      	ldr	r2, [r7, #12]
 800186a:	6812      	ldr	r2, [r2, #0]
 800186c:	4413      	add	r3, r2
 800186e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001872:	881b      	ldrh	r3, [r3, #0]
 8001874:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001878:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	699a      	ldr	r2, [r3, #24]
 800187e:	8b7b      	ldrh	r3, [r7, #26]
 8001880:	429a      	cmp	r2, r3
 8001882:	d306      	bcc.n	8001892 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	699a      	ldr	r2, [r3, #24]
 8001888:	8b7b      	ldrh	r3, [r7, #26]
 800188a:	1ad2      	subs	r2, r2, r3
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	619a      	str	r2, [r3, #24]
 8001890:	e002      	b.n	8001898 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	2200      	movs	r2, #0
 8001896:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d123      	bne.n	80018e8 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	461a      	mov	r2, r3
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	4413      	add	r3, r2
 80018ae:	881b      	ldrh	r3, [r3, #0]
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80018b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018ba:	83fb      	strh	r3, [r7, #30]
 80018bc:	8bfb      	ldrh	r3, [r7, #30]
 80018be:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80018c2:	83fb      	strh	r3, [r7, #30]
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	461a      	mov	r2, r3
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	441a      	add	r2, r3
 80018d2:	8bfb      	ldrh	r3, [r7, #30]
 80018d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80018d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80018dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80018e8:	88fb      	ldrh	r3, [r7, #6]
 80018ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d11f      	bne.n	8001932 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	461a      	mov	r2, r3
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	4413      	add	r3, r2
 8001900:	881b      	ldrh	r3, [r3, #0]
 8001902:	b29b      	uxth	r3, r3
 8001904:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001908:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800190c:	83bb      	strh	r3, [r7, #28]
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	461a      	mov	r2, r3
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	441a      	add	r2, r3
 800191c:	8bbb      	ldrh	r3, [r7, #28]
 800191e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001922:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001926:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800192a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800192e:	b29b      	uxth	r3, r3
 8001930:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001932:	8b7b      	ldrh	r3, [r7, #26]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d008      	beq.n	800194a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	6818      	ldr	r0, [r3, #0]
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	6959      	ldr	r1, [r3, #20]
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	895a      	ldrh	r2, [r3, #10]
 8001944:	8b7b      	ldrh	r3, [r7, #26]
 8001946:	f003 fa23 	bl	8004d90 <USB_ReadPMA>
    }
  }

  return count;
 800194a:	8b7b      	ldrh	r3, [r7, #26]
}
 800194c:	4618      	mov	r0, r3
 800194e:	3720      	adds	r7, #32
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}

08001954 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b092      	sub	sp, #72	; 0x48
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	4613      	mov	r3, r2
 8001960:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001962:	88fb      	ldrh	r3, [r7, #6]
 8001964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001968:	2b00      	cmp	r3, #0
 800196a:	f000 8132 	beq.w	8001bd2 <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001976:	b29b      	uxth	r3, r3
 8001978:	461a      	mov	r2, r3
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	00db      	lsls	r3, r3, #3
 8001980:	4413      	add	r3, r2
 8001982:	3302      	adds	r3, #2
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	68fa      	ldr	r2, [r7, #12]
 8001988:	6812      	ldr	r2, [r2, #0]
 800198a:	4413      	add	r3, r2
 800198c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001990:	881b      	ldrh	r3, [r3, #0]
 8001992:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001996:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	699a      	ldr	r2, [r3, #24]
 800199c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800199e:	429a      	cmp	r2, r3
 80019a0:	d906      	bls.n	80019b0 <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	699a      	ldr	r2, [r3, #24]
 80019a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80019a8:	1ad2      	subs	r2, r2, r3
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	619a      	str	r2, [r3, #24]
 80019ae:	e002      	b.n	80019b6 <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	2200      	movs	r2, #0
 80019b4:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	699b      	ldr	r3, [r3, #24]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d12c      	bne.n	8001a18 <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	4619      	mov	r1, r3
 80019c4:	68f8      	ldr	r0, [r7, #12]
 80019c6:	f005 fed0 	bl	800776a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80019ca:	88fb      	ldrh	r3, [r7, #6]
 80019cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	f000 822f 	beq.w	8001e34 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	461a      	mov	r2, r3
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	4413      	add	r3, r2
 80019e4:	881b      	ldrh	r3, [r3, #0]
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80019ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019f0:	827b      	strh	r3, [r7, #18]
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	461a      	mov	r2, r3
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	441a      	add	r2, r3
 8001a00:	8a7b      	ldrh	r3, [r7, #18]
 8001a02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001a06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001a0a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	8013      	strh	r3, [r2, #0]
 8001a16:	e20d      	b.n	8001e34 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001a18:	88fb      	ldrh	r3, [r7, #6]
 8001a1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d01f      	beq.n	8001a62 <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	461a      	mov	r2, r3
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	4413      	add	r3, r2
 8001a30:	881b      	ldrh	r3, [r3, #0]
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001a38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a3c:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	461a      	mov	r2, r3
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	441a      	add	r2, r3
 8001a4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001a4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001a52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001a56:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	f040 81e3 	bne.w	8001e34 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	695a      	ldr	r2, [r3, #20]
 8001a72:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001a74:	441a      	add	r2, r3
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	69da      	ldr	r2, [r3, #28]
 8001a7e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001a80:	441a      	add	r2, r3
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	6a1a      	ldr	r2, [r3, #32]
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	691b      	ldr	r3, [r3, #16]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d309      	bcc.n	8001aa6 <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	6a1a      	ldr	r2, [r3, #32]
 8001a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a9e:	1ad2      	subs	r2, r2, r3
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	621a      	str	r2, [r3, #32]
 8001aa4:	e014      	b.n	8001ad0 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	6a1b      	ldr	r3, [r3, #32]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d106      	bne.n	8001abc <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 8001aae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001ab0:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001aba:	e009      	b.n	8001ad0 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	6a1b      	ldr	r3, [r3, #32]
 8001ac8:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	2200      	movs	r2, #0
 8001ace:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	785b      	ldrb	r3, [r3, #1]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d155      	bne.n	8001b84 <HAL_PCD_EP_DB_Transmit+0x230>
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	61bb      	str	r3, [r7, #24]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	461a      	mov	r2, r3
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	4413      	add	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	011a      	lsls	r2, r3, #4
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	4413      	add	r3, r2
 8001afa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001afe:	617b      	str	r3, [r7, #20]
 8001b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d112      	bne.n	8001b2c <HAL_PCD_EP_DB_Transmit+0x1d8>
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	881b      	ldrh	r3, [r3, #0]
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	801a      	strh	r2, [r3, #0]
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	881b      	ldrh	r3, [r3, #0]
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b24:	b29a      	uxth	r2, r3
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	801a      	strh	r2, [r3, #0]
 8001b2a:	e047      	b.n	8001bbc <HAL_PCD_EP_DB_Transmit+0x268>
 8001b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b2e:	2b3e      	cmp	r3, #62	; 0x3e
 8001b30:	d811      	bhi.n	8001b56 <HAL_PCD_EP_DB_Transmit+0x202>
 8001b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b34:	085b      	lsrs	r3, r3, #1
 8001b36:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d002      	beq.n	8001b48 <HAL_PCD_EP_DB_Transmit+0x1f4>
 8001b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b44:	3301      	adds	r3, #1
 8001b46:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	029b      	lsls	r3, r3, #10
 8001b4e:	b29a      	uxth	r2, r3
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	801a      	strh	r2, [r3, #0]
 8001b54:	e032      	b.n	8001bbc <HAL_PCD_EP_DB_Transmit+0x268>
 8001b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b58:	095b      	lsrs	r3, r3, #5
 8001b5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b5e:	f003 031f 	and.w	r3, r3, #31
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d102      	bne.n	8001b6c <HAL_PCD_EP_DB_Transmit+0x218>
 8001b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b68:	3b01      	subs	r3, #1
 8001b6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	029b      	lsls	r3, r3, #10
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b7c:	b29a      	uxth	r2, r3
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	801a      	strh	r2, [r3, #0]
 8001b82:	e01b      	b.n	8001bbc <HAL_PCD_EP_DB_Transmit+0x268>
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	785b      	ldrb	r3, [r3, #1]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d117      	bne.n	8001bbc <HAL_PCD_EP_DB_Transmit+0x268>
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	623b      	str	r3, [r7, #32]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	6a3b      	ldr	r3, [r7, #32]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	623b      	str	r3, [r7, #32]
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	011a      	lsls	r2, r3, #4
 8001baa:	6a3b      	ldr	r3, [r7, #32]
 8001bac:	4413      	add	r3, r2
 8001bae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001bb2:	61fb      	str	r3, [r7, #28]
 8001bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	6818      	ldr	r0, [r3, #0]
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	6959      	ldr	r1, [r3, #20]
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	891a      	ldrh	r2, [r3, #8]
 8001bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	f003 f89c 	bl	8004d08 <USB_WritePMA>
 8001bd0:	e130      	b.n	8001e34 <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	461a      	mov	r2, r3
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	00db      	lsls	r3, r3, #3
 8001be4:	4413      	add	r3, r2
 8001be6:	3306      	adds	r3, #6
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	68fa      	ldr	r2, [r7, #12]
 8001bec:	6812      	ldr	r2, [r2, #0]
 8001bee:	4413      	add	r3, r2
 8001bf0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001bf4:	881b      	ldrh	r3, [r3, #0]
 8001bf6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bfa:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	699a      	ldr	r2, [r3, #24]
 8001c00:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d306      	bcc.n	8001c14 <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	699a      	ldr	r2, [r3, #24]
 8001c0a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001c0c:	1ad2      	subs	r2, r2, r3
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	619a      	str	r2, [r3, #24]
 8001c12:	e002      	b.n	8001c1a <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	2200      	movs	r2, #0
 8001c18:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	699b      	ldr	r3, [r3, #24]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d12c      	bne.n	8001c7c <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	4619      	mov	r1, r3
 8001c28:	68f8      	ldr	r0, [r7, #12]
 8001c2a:	f005 fd9e 	bl	800776a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001c2e:	88fb      	ldrh	r3, [r7, #6]
 8001c30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	f040 80fd 	bne.w	8001e34 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	461a      	mov	r2, r3
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	4413      	add	r3, r2
 8001c48:	881b      	ldrh	r3, [r3, #0]
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c54:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	441a      	add	r2, r3
 8001c64:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	8013      	strh	r3, [r2, #0]
 8001c7a:	e0db      	b.n	8001e34 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001c7c:	88fb      	ldrh	r3, [r7, #6]
 8001c7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d11f      	bne.n	8001cc6 <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	4413      	add	r3, r2
 8001c94:	881b      	ldrh	r3, [r3, #0]
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ca0:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	441a      	add	r2, r3
 8001cb0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001cb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001cb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001cba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001cbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	f040 80b1 	bne.w	8001e34 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	695a      	ldr	r2, [r3, #20]
 8001cd6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001cd8:	441a      	add	r2, r3
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	69da      	ldr	r2, [r3, #28]
 8001ce2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001ce4:	441a      	add	r2, r3
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	6a1a      	ldr	r2, [r3, #32]
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	691b      	ldr	r3, [r3, #16]
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d309      	bcc.n	8001d0a <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	6a1a      	ldr	r2, [r3, #32]
 8001d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d02:	1ad2      	subs	r2, r2, r3
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	621a      	str	r2, [r3, #32]
 8001d08:	e014      	b.n	8001d34 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	6a1b      	ldr	r3, [r3, #32]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d106      	bne.n	8001d20 <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 8001d12:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001d14:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001d1e:	e009      	b.n	8001d34 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	6a1b      	ldr	r3, [r3, #32]
 8001d24:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	637b      	str	r3, [r7, #52]	; 0x34
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	785b      	ldrb	r3, [r3, #1]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d155      	bne.n	8001dee <HAL_PCD_EP_DB_Transmit+0x49a>
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	647b      	str	r3, [r7, #68]	; 0x44
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	461a      	mov	r2, r3
 8001d54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d56:	4413      	add	r3, r2
 8001d58:	647b      	str	r3, [r7, #68]	; 0x44
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	011a      	lsls	r2, r3, #4
 8001d60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d62:	4413      	add	r3, r2
 8001d64:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001d68:	643b      	str	r3, [r7, #64]	; 0x40
 8001d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d112      	bne.n	8001d96 <HAL_PCD_EP_DB_Transmit+0x442>
 8001d70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d72:	881b      	ldrh	r3, [r3, #0]
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001d7a:	b29a      	uxth	r2, r3
 8001d7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d7e:	801a      	strh	r2, [r3, #0]
 8001d80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d82:	881b      	ldrh	r3, [r3, #0]
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d8e:	b29a      	uxth	r2, r3
 8001d90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d92:	801a      	strh	r2, [r3, #0]
 8001d94:	e044      	b.n	8001e20 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8001d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d98:	2b3e      	cmp	r3, #62	; 0x3e
 8001d9a:	d811      	bhi.n	8001dc0 <HAL_PCD_EP_DB_Transmit+0x46c>
 8001d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d9e:	085b      	lsrs	r3, r3, #1
 8001da0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001da4:	f003 0301 	and.w	r3, r3, #1
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d002      	beq.n	8001db2 <HAL_PCD_EP_DB_Transmit+0x45e>
 8001dac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dae:	3301      	adds	r3, #1
 8001db0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001db2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	029b      	lsls	r3, r3, #10
 8001db8:	b29a      	uxth	r2, r3
 8001dba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dbc:	801a      	strh	r2, [r3, #0]
 8001dbe:	e02f      	b.n	8001e20 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8001dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dc2:	095b      	lsrs	r3, r3, #5
 8001dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dc8:	f003 031f 	and.w	r3, r3, #31
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d102      	bne.n	8001dd6 <HAL_PCD_EP_DB_Transmit+0x482>
 8001dd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001dd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	029b      	lsls	r3, r3, #10
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001de2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001de6:	b29a      	uxth	r2, r3
 8001de8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dea:	801a      	strh	r2, [r3, #0]
 8001dec:	e018      	b.n	8001e20 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	785b      	ldrb	r3, [r3, #1]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d114      	bne.n	8001e20 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	461a      	mov	r2, r3
 8001e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e04:	4413      	add	r3, r2
 8001e06:	637b      	str	r3, [r7, #52]	; 0x34
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	011a      	lsls	r2, r3, #4
 8001e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e10:	4413      	add	r3, r2
 8001e12:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001e16:	633b      	str	r3, [r7, #48]	; 0x30
 8001e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e1a:	b29a      	uxth	r2, r3
 8001e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e1e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6818      	ldr	r0, [r3, #0]
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	6959      	ldr	r1, [r3, #20]
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	895a      	ldrh	r2, [r3, #10]
 8001e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	f002 ff6a 	bl	8004d08 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	461a      	mov	r2, r3
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	4413      	add	r3, r2
 8001e42:	881b      	ldrh	r3, [r3, #0]
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e4e:	823b      	strh	r3, [r7, #16]
 8001e50:	8a3b      	ldrh	r3, [r7, #16]
 8001e52:	f083 0310 	eor.w	r3, r3, #16
 8001e56:	823b      	strh	r3, [r7, #16]
 8001e58:	8a3b      	ldrh	r3, [r7, #16]
 8001e5a:	f083 0320 	eor.w	r3, r3, #32
 8001e5e:	823b      	strh	r3, [r7, #16]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	461a      	mov	r2, r3
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	441a      	add	r2, r3
 8001e6e:	8a3b      	ldrh	r3, [r7, #16]
 8001e70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3748      	adds	r7, #72	; 0x48
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	b087      	sub	sp, #28
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	60f8      	str	r0, [r7, #12]
 8001e96:	607b      	str	r3, [r7, #4]
 8001e98:	460b      	mov	r3, r1
 8001e9a:	817b      	strh	r3, [r7, #10]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8001ea0:	897b      	ldrh	r3, [r7, #10]
 8001ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d00b      	beq.n	8001ec4 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001eac:	897b      	ldrh	r3, [r7, #10]
 8001eae:	f003 0307 	and.w	r3, r3, #7
 8001eb2:	1c5a      	adds	r2, r3, #1
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	4413      	add	r3, r2
 8001eba:	00db      	lsls	r3, r3, #3
 8001ebc:	68fa      	ldr	r2, [r7, #12]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	617b      	str	r3, [r7, #20]
 8001ec2:	e009      	b.n	8001ed8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001ec4:	897a      	ldrh	r2, [r7, #10]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	4413      	add	r3, r2
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8001ed8:	893b      	ldrh	r3, [r7, #8]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d107      	bne.n	8001eee <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	b29a      	uxth	r2, r3
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	80da      	strh	r2, [r3, #6]
 8001eec:	e00b      	b.n	8001f06 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	b29a      	uxth	r2, r3
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	0c1b      	lsrs	r3, r3, #16
 8001f00:	b29a      	uxth	r2, r3
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8001f06:	2300      	movs	r3, #0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	371c      	adds	r7, #28
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bc80      	pop	{r7}
 8001f10:	4770      	bx	lr
	...

08001f14 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8001f18:	4b03      	ldr	r3, [pc, #12]	; (8001f28 <HAL_PWR_EnableBkUpAccess+0x14>)
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	601a      	str	r2, [r3, #0]
}
 8001f1e:	bf00      	nop
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bc80      	pop	{r7}
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	420e0020 	.word	0x420e0020

08001f2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d101      	bne.n	8001f3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e26c      	b.n	8002418 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	f000 8087 	beq.w	800205a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f4c:	4b92      	ldr	r3, [pc, #584]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f003 030c 	and.w	r3, r3, #12
 8001f54:	2b04      	cmp	r3, #4
 8001f56:	d00c      	beq.n	8001f72 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f58:	4b8f      	ldr	r3, [pc, #572]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f003 030c 	and.w	r3, r3, #12
 8001f60:	2b08      	cmp	r3, #8
 8001f62:	d112      	bne.n	8001f8a <HAL_RCC_OscConfig+0x5e>
 8001f64:	4b8c      	ldr	r3, [pc, #560]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f70:	d10b      	bne.n	8001f8a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f72:	4b89      	ldr	r3, [pc, #548]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d06c      	beq.n	8002058 <HAL_RCC_OscConfig+0x12c>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d168      	bne.n	8002058 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e246      	b.n	8002418 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f92:	d106      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x76>
 8001f94:	4b80      	ldr	r3, [pc, #512]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a7f      	ldr	r2, [pc, #508]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8001f9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f9e:	6013      	str	r3, [r2, #0]
 8001fa0:	e02e      	b.n	8002000 <HAL_RCC_OscConfig+0xd4>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d10c      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x98>
 8001faa:	4b7b      	ldr	r3, [pc, #492]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a7a      	ldr	r2, [pc, #488]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8001fb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fb4:	6013      	str	r3, [r2, #0]
 8001fb6:	4b78      	ldr	r3, [pc, #480]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a77      	ldr	r2, [pc, #476]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8001fbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fc0:	6013      	str	r3, [r2, #0]
 8001fc2:	e01d      	b.n	8002000 <HAL_RCC_OscConfig+0xd4>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fcc:	d10c      	bne.n	8001fe8 <HAL_RCC_OscConfig+0xbc>
 8001fce:	4b72      	ldr	r3, [pc, #456]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a71      	ldr	r2, [pc, #452]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8001fd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fd8:	6013      	str	r3, [r2, #0]
 8001fda:	4b6f      	ldr	r3, [pc, #444]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a6e      	ldr	r2, [pc, #440]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8001fe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fe4:	6013      	str	r3, [r2, #0]
 8001fe6:	e00b      	b.n	8002000 <HAL_RCC_OscConfig+0xd4>
 8001fe8:	4b6b      	ldr	r3, [pc, #428]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a6a      	ldr	r2, [pc, #424]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8001fee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ff2:	6013      	str	r3, [r2, #0]
 8001ff4:	4b68      	ldr	r3, [pc, #416]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a67      	ldr	r2, [pc, #412]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8001ffa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ffe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d013      	beq.n	8002030 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002008:	f7fe fabc 	bl	8000584 <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002010:	f7fe fab8 	bl	8000584 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b64      	cmp	r3, #100	; 0x64
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e1fa      	b.n	8002418 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002022:	4b5d      	ldr	r3, [pc, #372]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d0f0      	beq.n	8002010 <HAL_RCC_OscConfig+0xe4>
 800202e:	e014      	b.n	800205a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002030:	f7fe faa8 	bl	8000584 <HAL_GetTick>
 8002034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002036:	e008      	b.n	800204a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002038:	f7fe faa4 	bl	8000584 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b64      	cmp	r3, #100	; 0x64
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e1e6      	b.n	8002418 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800204a:	4b53      	ldr	r3, [pc, #332]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d1f0      	bne.n	8002038 <HAL_RCC_OscConfig+0x10c>
 8002056:	e000      	b.n	800205a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002058:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d063      	beq.n	800212e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002066:	4b4c      	ldr	r3, [pc, #304]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f003 030c 	and.w	r3, r3, #12
 800206e:	2b00      	cmp	r3, #0
 8002070:	d00b      	beq.n	800208a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002072:	4b49      	ldr	r3, [pc, #292]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f003 030c 	and.w	r3, r3, #12
 800207a:	2b08      	cmp	r3, #8
 800207c:	d11c      	bne.n	80020b8 <HAL_RCC_OscConfig+0x18c>
 800207e:	4b46      	ldr	r3, [pc, #280]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d116      	bne.n	80020b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800208a:	4b43      	ldr	r3, [pc, #268]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d005      	beq.n	80020a2 <HAL_RCC_OscConfig+0x176>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d001      	beq.n	80020a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e1ba      	b.n	8002418 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020a2:	4b3d      	ldr	r3, [pc, #244]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	4939      	ldr	r1, [pc, #228]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020b6:	e03a      	b.n	800212e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	691b      	ldr	r3, [r3, #16]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d020      	beq.n	8002102 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020c0:	4b36      	ldr	r3, [pc, #216]	; (800219c <HAL_RCC_OscConfig+0x270>)
 80020c2:	2201      	movs	r2, #1
 80020c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c6:	f7fe fa5d 	bl	8000584 <HAL_GetTick>
 80020ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020cc:	e008      	b.n	80020e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020ce:	f7fe fa59 	bl	8000584 <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d901      	bls.n	80020e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	e19b      	b.n	8002418 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020e0:	4b2d      	ldr	r3, [pc, #180]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0302 	and.w	r3, r3, #2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d0f0      	beq.n	80020ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ec:	4b2a      	ldr	r3, [pc, #168]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	695b      	ldr	r3, [r3, #20]
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	4927      	ldr	r1, [pc, #156]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	600b      	str	r3, [r1, #0]
 8002100:	e015      	b.n	800212e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002102:	4b26      	ldr	r3, [pc, #152]	; (800219c <HAL_RCC_OscConfig+0x270>)
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002108:	f7fe fa3c 	bl	8000584 <HAL_GetTick>
 800210c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800210e:	e008      	b.n	8002122 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002110:	f7fe fa38 	bl	8000584 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e17a      	b.n	8002418 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002122:	4b1d      	ldr	r3, [pc, #116]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1f0      	bne.n	8002110 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0308 	and.w	r3, r3, #8
 8002136:	2b00      	cmp	r3, #0
 8002138:	d03a      	beq.n	80021b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	699b      	ldr	r3, [r3, #24]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d019      	beq.n	8002176 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002142:	4b17      	ldr	r3, [pc, #92]	; (80021a0 <HAL_RCC_OscConfig+0x274>)
 8002144:	2201      	movs	r2, #1
 8002146:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002148:	f7fe fa1c 	bl	8000584 <HAL_GetTick>
 800214c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800214e:	e008      	b.n	8002162 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002150:	f7fe fa18 	bl	8000584 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b02      	cmp	r3, #2
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e15a      	b.n	8002418 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002162:	4b0d      	ldr	r3, [pc, #52]	; (8002198 <HAL_RCC_OscConfig+0x26c>)
 8002164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	2b00      	cmp	r3, #0
 800216c:	d0f0      	beq.n	8002150 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800216e:	2001      	movs	r0, #1
 8002170:	f000 fac6 	bl	8002700 <RCC_Delay>
 8002174:	e01c      	b.n	80021b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002176:	4b0a      	ldr	r3, [pc, #40]	; (80021a0 <HAL_RCC_OscConfig+0x274>)
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800217c:	f7fe fa02 	bl	8000584 <HAL_GetTick>
 8002180:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002182:	e00f      	b.n	80021a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002184:	f7fe f9fe 	bl	8000584 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b02      	cmp	r3, #2
 8002190:	d908      	bls.n	80021a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e140      	b.n	8002418 <HAL_RCC_OscConfig+0x4ec>
 8002196:	bf00      	nop
 8002198:	40021000 	.word	0x40021000
 800219c:	42420000 	.word	0x42420000
 80021a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021a4:	4b9e      	ldr	r3, [pc, #632]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 80021a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a8:	f003 0302 	and.w	r3, r3, #2
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d1e9      	bne.n	8002184 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0304 	and.w	r3, r3, #4
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f000 80a6 	beq.w	800230a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021be:	2300      	movs	r3, #0
 80021c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021c2:	4b97      	ldr	r3, [pc, #604]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 80021c4:	69db      	ldr	r3, [r3, #28]
 80021c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d10d      	bne.n	80021ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021ce:	4b94      	ldr	r3, [pc, #592]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 80021d0:	69db      	ldr	r3, [r3, #28]
 80021d2:	4a93      	ldr	r2, [pc, #588]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 80021d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021d8:	61d3      	str	r3, [r2, #28]
 80021da:	4b91      	ldr	r3, [pc, #580]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 80021dc:	69db      	ldr	r3, [r3, #28]
 80021de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e2:	60bb      	str	r3, [r7, #8]
 80021e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021e6:	2301      	movs	r3, #1
 80021e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ea:	4b8e      	ldr	r3, [pc, #568]	; (8002424 <HAL_RCC_OscConfig+0x4f8>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d118      	bne.n	8002228 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021f6:	4b8b      	ldr	r3, [pc, #556]	; (8002424 <HAL_RCC_OscConfig+0x4f8>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a8a      	ldr	r2, [pc, #552]	; (8002424 <HAL_RCC_OscConfig+0x4f8>)
 80021fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002200:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002202:	f7fe f9bf 	bl	8000584 <HAL_GetTick>
 8002206:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002208:	e008      	b.n	800221c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800220a:	f7fe f9bb 	bl	8000584 <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	2b64      	cmp	r3, #100	; 0x64
 8002216:	d901      	bls.n	800221c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e0fd      	b.n	8002418 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800221c:	4b81      	ldr	r3, [pc, #516]	; (8002424 <HAL_RCC_OscConfig+0x4f8>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002224:	2b00      	cmp	r3, #0
 8002226:	d0f0      	beq.n	800220a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	2b01      	cmp	r3, #1
 800222e:	d106      	bne.n	800223e <HAL_RCC_OscConfig+0x312>
 8002230:	4b7b      	ldr	r3, [pc, #492]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 8002232:	6a1b      	ldr	r3, [r3, #32]
 8002234:	4a7a      	ldr	r2, [pc, #488]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 8002236:	f043 0301 	orr.w	r3, r3, #1
 800223a:	6213      	str	r3, [r2, #32]
 800223c:	e02d      	b.n	800229a <HAL_RCC_OscConfig+0x36e>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d10c      	bne.n	8002260 <HAL_RCC_OscConfig+0x334>
 8002246:	4b76      	ldr	r3, [pc, #472]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 8002248:	6a1b      	ldr	r3, [r3, #32]
 800224a:	4a75      	ldr	r2, [pc, #468]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 800224c:	f023 0301 	bic.w	r3, r3, #1
 8002250:	6213      	str	r3, [r2, #32]
 8002252:	4b73      	ldr	r3, [pc, #460]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 8002254:	6a1b      	ldr	r3, [r3, #32]
 8002256:	4a72      	ldr	r2, [pc, #456]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 8002258:	f023 0304 	bic.w	r3, r3, #4
 800225c:	6213      	str	r3, [r2, #32]
 800225e:	e01c      	b.n	800229a <HAL_RCC_OscConfig+0x36e>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	2b05      	cmp	r3, #5
 8002266:	d10c      	bne.n	8002282 <HAL_RCC_OscConfig+0x356>
 8002268:	4b6d      	ldr	r3, [pc, #436]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 800226a:	6a1b      	ldr	r3, [r3, #32]
 800226c:	4a6c      	ldr	r2, [pc, #432]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 800226e:	f043 0304 	orr.w	r3, r3, #4
 8002272:	6213      	str	r3, [r2, #32]
 8002274:	4b6a      	ldr	r3, [pc, #424]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 8002276:	6a1b      	ldr	r3, [r3, #32]
 8002278:	4a69      	ldr	r2, [pc, #420]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 800227a:	f043 0301 	orr.w	r3, r3, #1
 800227e:	6213      	str	r3, [r2, #32]
 8002280:	e00b      	b.n	800229a <HAL_RCC_OscConfig+0x36e>
 8002282:	4b67      	ldr	r3, [pc, #412]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 8002284:	6a1b      	ldr	r3, [r3, #32]
 8002286:	4a66      	ldr	r2, [pc, #408]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 8002288:	f023 0301 	bic.w	r3, r3, #1
 800228c:	6213      	str	r3, [r2, #32]
 800228e:	4b64      	ldr	r3, [pc, #400]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 8002290:	6a1b      	ldr	r3, [r3, #32]
 8002292:	4a63      	ldr	r2, [pc, #396]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 8002294:	f023 0304 	bic.w	r3, r3, #4
 8002298:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d015      	beq.n	80022ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022a2:	f7fe f96f 	bl	8000584 <HAL_GetTick>
 80022a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022a8:	e00a      	b.n	80022c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022aa:	f7fe f96b 	bl	8000584 <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d901      	bls.n	80022c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e0ab      	b.n	8002418 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022c0:	4b57      	ldr	r3, [pc, #348]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 80022c2:	6a1b      	ldr	r3, [r3, #32]
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d0ee      	beq.n	80022aa <HAL_RCC_OscConfig+0x37e>
 80022cc:	e014      	b.n	80022f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ce:	f7fe f959 	bl	8000584 <HAL_GetTick>
 80022d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022d4:	e00a      	b.n	80022ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022d6:	f7fe f955 	bl	8000584 <HAL_GetTick>
 80022da:	4602      	mov	r2, r0
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d901      	bls.n	80022ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e095      	b.n	8002418 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022ec:	4b4c      	ldr	r3, [pc, #304]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 80022ee:	6a1b      	ldr	r3, [r3, #32]
 80022f0:	f003 0302 	and.w	r3, r3, #2
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d1ee      	bne.n	80022d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022f8:	7dfb      	ldrb	r3, [r7, #23]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d105      	bne.n	800230a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022fe:	4b48      	ldr	r3, [pc, #288]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 8002300:	69db      	ldr	r3, [r3, #28]
 8002302:	4a47      	ldr	r2, [pc, #284]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 8002304:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002308:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	2b00      	cmp	r3, #0
 8002310:	f000 8081 	beq.w	8002416 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002314:	4b42      	ldr	r3, [pc, #264]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f003 030c 	and.w	r3, r3, #12
 800231c:	2b08      	cmp	r3, #8
 800231e:	d061      	beq.n	80023e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	69db      	ldr	r3, [r3, #28]
 8002324:	2b02      	cmp	r3, #2
 8002326:	d146      	bne.n	80023b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002328:	4b3f      	ldr	r3, [pc, #252]	; (8002428 <HAL_RCC_OscConfig+0x4fc>)
 800232a:	2200      	movs	r2, #0
 800232c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800232e:	f7fe f929 	bl	8000584 <HAL_GetTick>
 8002332:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002334:	e008      	b.n	8002348 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002336:	f7fe f925 	bl	8000584 <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	2b02      	cmp	r3, #2
 8002342:	d901      	bls.n	8002348 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e067      	b.n	8002418 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002348:	4b35      	ldr	r3, [pc, #212]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d1f0      	bne.n	8002336 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a1b      	ldr	r3, [r3, #32]
 8002358:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800235c:	d108      	bne.n	8002370 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800235e:	4b30      	ldr	r3, [pc, #192]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	492d      	ldr	r1, [pc, #180]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 800236c:	4313      	orrs	r3, r2
 800236e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002370:	4b2b      	ldr	r3, [pc, #172]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a19      	ldr	r1, [r3, #32]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002380:	430b      	orrs	r3, r1
 8002382:	4927      	ldr	r1, [pc, #156]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 8002384:	4313      	orrs	r3, r2
 8002386:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002388:	4b27      	ldr	r3, [pc, #156]	; (8002428 <HAL_RCC_OscConfig+0x4fc>)
 800238a:	2201      	movs	r2, #1
 800238c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800238e:	f7fe f8f9 	bl	8000584 <HAL_GetTick>
 8002392:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002394:	e008      	b.n	80023a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002396:	f7fe f8f5 	bl	8000584 <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d901      	bls.n	80023a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e037      	b.n	8002418 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023a8:	4b1d      	ldr	r3, [pc, #116]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d0f0      	beq.n	8002396 <HAL_RCC_OscConfig+0x46a>
 80023b4:	e02f      	b.n	8002416 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023b6:	4b1c      	ldr	r3, [pc, #112]	; (8002428 <HAL_RCC_OscConfig+0x4fc>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023bc:	f7fe f8e2 	bl	8000584 <HAL_GetTick>
 80023c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023c2:	e008      	b.n	80023d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023c4:	f7fe f8de 	bl	8000584 <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d901      	bls.n	80023d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e020      	b.n	8002418 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023d6:	4b12      	ldr	r3, [pc, #72]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d1f0      	bne.n	80023c4 <HAL_RCC_OscConfig+0x498>
 80023e2:	e018      	b.n	8002416 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	69db      	ldr	r3, [r3, #28]
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d101      	bne.n	80023f0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e013      	b.n	8002418 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023f0:	4b0b      	ldr	r3, [pc, #44]	; (8002420 <HAL_RCC_OscConfig+0x4f4>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a1b      	ldr	r3, [r3, #32]
 8002400:	429a      	cmp	r2, r3
 8002402:	d106      	bne.n	8002412 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800240e:	429a      	cmp	r2, r3
 8002410:	d001      	beq.n	8002416 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e000      	b.n	8002418 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002416:	2300      	movs	r3, #0
}
 8002418:	4618      	mov	r0, r3
 800241a:	3718      	adds	r7, #24
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	40021000 	.word	0x40021000
 8002424:	40007000 	.word	0x40007000
 8002428:	42420060 	.word	0x42420060

0800242c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d101      	bne.n	8002440 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e0d0      	b.n	80025e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002440:	4b6a      	ldr	r3, [pc, #424]	; (80025ec <HAL_RCC_ClockConfig+0x1c0>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0307 	and.w	r3, r3, #7
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	429a      	cmp	r2, r3
 800244c:	d910      	bls.n	8002470 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800244e:	4b67      	ldr	r3, [pc, #412]	; (80025ec <HAL_RCC_ClockConfig+0x1c0>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f023 0207 	bic.w	r2, r3, #7
 8002456:	4965      	ldr	r1, [pc, #404]	; (80025ec <HAL_RCC_ClockConfig+0x1c0>)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	4313      	orrs	r3, r2
 800245c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800245e:	4b63      	ldr	r3, [pc, #396]	; (80025ec <HAL_RCC_ClockConfig+0x1c0>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0307 	and.w	r3, r3, #7
 8002466:	683a      	ldr	r2, [r7, #0]
 8002468:	429a      	cmp	r2, r3
 800246a:	d001      	beq.n	8002470 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e0b8      	b.n	80025e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0302 	and.w	r3, r3, #2
 8002478:	2b00      	cmp	r3, #0
 800247a:	d020      	beq.n	80024be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0304 	and.w	r3, r3, #4
 8002484:	2b00      	cmp	r3, #0
 8002486:	d005      	beq.n	8002494 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002488:	4b59      	ldr	r3, [pc, #356]	; (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	4a58      	ldr	r2, [pc, #352]	; (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 800248e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002492:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0308 	and.w	r3, r3, #8
 800249c:	2b00      	cmp	r3, #0
 800249e:	d005      	beq.n	80024ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024a0:	4b53      	ldr	r3, [pc, #332]	; (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	4a52      	ldr	r2, [pc, #328]	; (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 80024a6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80024aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024ac:	4b50      	ldr	r3, [pc, #320]	; (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	494d      	ldr	r1, [pc, #308]	; (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d040      	beq.n	800254c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d107      	bne.n	80024e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024d2:	4b47      	ldr	r3, [pc, #284]	; (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d115      	bne.n	800250a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e07f      	b.n	80025e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d107      	bne.n	80024fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ea:	4b41      	ldr	r3, [pc, #260]	; (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d109      	bne.n	800250a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e073      	b.n	80025e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024fa:	4b3d      	ldr	r3, [pc, #244]	; (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e06b      	b.n	80025e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800250a:	4b39      	ldr	r3, [pc, #228]	; (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f023 0203 	bic.w	r2, r3, #3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	4936      	ldr	r1, [pc, #216]	; (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002518:	4313      	orrs	r3, r2
 800251a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800251c:	f7fe f832 	bl	8000584 <HAL_GetTick>
 8002520:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002522:	e00a      	b.n	800253a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002524:	f7fe f82e 	bl	8000584 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002532:	4293      	cmp	r3, r2
 8002534:	d901      	bls.n	800253a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e053      	b.n	80025e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800253a:	4b2d      	ldr	r3, [pc, #180]	; (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f003 020c 	and.w	r2, r3, #12
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	429a      	cmp	r2, r3
 800254a:	d1eb      	bne.n	8002524 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800254c:	4b27      	ldr	r3, [pc, #156]	; (80025ec <HAL_RCC_ClockConfig+0x1c0>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0307 	and.w	r3, r3, #7
 8002554:	683a      	ldr	r2, [r7, #0]
 8002556:	429a      	cmp	r2, r3
 8002558:	d210      	bcs.n	800257c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800255a:	4b24      	ldr	r3, [pc, #144]	; (80025ec <HAL_RCC_ClockConfig+0x1c0>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f023 0207 	bic.w	r2, r3, #7
 8002562:	4922      	ldr	r1, [pc, #136]	; (80025ec <HAL_RCC_ClockConfig+0x1c0>)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	4313      	orrs	r3, r2
 8002568:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800256a:	4b20      	ldr	r3, [pc, #128]	; (80025ec <HAL_RCC_ClockConfig+0x1c0>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0307 	and.w	r3, r3, #7
 8002572:	683a      	ldr	r2, [r7, #0]
 8002574:	429a      	cmp	r2, r3
 8002576:	d001      	beq.n	800257c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e032      	b.n	80025e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0304 	and.w	r3, r3, #4
 8002584:	2b00      	cmp	r3, #0
 8002586:	d008      	beq.n	800259a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002588:	4b19      	ldr	r3, [pc, #100]	; (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	4916      	ldr	r1, [pc, #88]	; (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002596:	4313      	orrs	r3, r2
 8002598:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0308 	and.w	r3, r3, #8
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d009      	beq.n	80025ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025a6:	4b12      	ldr	r3, [pc, #72]	; (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	00db      	lsls	r3, r3, #3
 80025b4:	490e      	ldr	r1, [pc, #56]	; (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025ba:	f000 f821 	bl	8002600 <HAL_RCC_GetSysClockFreq>
 80025be:	4601      	mov	r1, r0
 80025c0:	4b0b      	ldr	r3, [pc, #44]	; (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	091b      	lsrs	r3, r3, #4
 80025c6:	f003 030f 	and.w	r3, r3, #15
 80025ca:	4a0a      	ldr	r2, [pc, #40]	; (80025f4 <HAL_RCC_ClockConfig+0x1c8>)
 80025cc:	5cd3      	ldrb	r3, [r2, r3]
 80025ce:	fa21 f303 	lsr.w	r3, r1, r3
 80025d2:	4a09      	ldr	r2, [pc, #36]	; (80025f8 <HAL_RCC_ClockConfig+0x1cc>)
 80025d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025d6:	4b09      	ldr	r3, [pc, #36]	; (80025fc <HAL_RCC_ClockConfig+0x1d0>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4618      	mov	r0, r3
 80025dc:	f7fd ff90 	bl	8000500 <HAL_InitTick>

  return HAL_OK;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3710      	adds	r7, #16
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	40022000 	.word	0x40022000
 80025f0:	40021000 	.word	0x40021000
 80025f4:	08007d38 	.word	0x08007d38
 80025f8:	20000000 	.word	0x20000000
 80025fc:	20000004 	.word	0x20000004

08002600 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002600:	b490      	push	{r4, r7}
 8002602:	b08a      	sub	sp, #40	; 0x28
 8002604:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002606:	4b2a      	ldr	r3, [pc, #168]	; (80026b0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002608:	1d3c      	adds	r4, r7, #4
 800260a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800260c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002610:	4b28      	ldr	r3, [pc, #160]	; (80026b4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002612:	881b      	ldrh	r3, [r3, #0]
 8002614:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002616:	2300      	movs	r3, #0
 8002618:	61fb      	str	r3, [r7, #28]
 800261a:	2300      	movs	r3, #0
 800261c:	61bb      	str	r3, [r7, #24]
 800261e:	2300      	movs	r3, #0
 8002620:	627b      	str	r3, [r7, #36]	; 0x24
 8002622:	2300      	movs	r3, #0
 8002624:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002626:	2300      	movs	r3, #0
 8002628:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800262a:	4b23      	ldr	r3, [pc, #140]	; (80026b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	f003 030c 	and.w	r3, r3, #12
 8002636:	2b04      	cmp	r3, #4
 8002638:	d002      	beq.n	8002640 <HAL_RCC_GetSysClockFreq+0x40>
 800263a:	2b08      	cmp	r3, #8
 800263c:	d003      	beq.n	8002646 <HAL_RCC_GetSysClockFreq+0x46>
 800263e:	e02d      	b.n	800269c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002640:	4b1e      	ldr	r3, [pc, #120]	; (80026bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002642:	623b      	str	r3, [r7, #32]
      break;
 8002644:	e02d      	b.n	80026a2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	0c9b      	lsrs	r3, r3, #18
 800264a:	f003 030f 	and.w	r3, r3, #15
 800264e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002652:	4413      	add	r3, r2
 8002654:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002658:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d013      	beq.n	800268c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002664:	4b14      	ldr	r3, [pc, #80]	; (80026b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	0c5b      	lsrs	r3, r3, #17
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002672:	4413      	add	r3, r2
 8002674:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002678:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	4a0f      	ldr	r2, [pc, #60]	; (80026bc <HAL_RCC_GetSysClockFreq+0xbc>)
 800267e:	fb02 f203 	mul.w	r2, r2, r3
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	fbb2 f3f3 	udiv	r3, r2, r3
 8002688:	627b      	str	r3, [r7, #36]	; 0x24
 800268a:	e004      	b.n	8002696 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	4a0c      	ldr	r2, [pc, #48]	; (80026c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002690:	fb02 f303 	mul.w	r3, r2, r3
 8002694:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002698:	623b      	str	r3, [r7, #32]
      break;
 800269a:	e002      	b.n	80026a2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800269c:	4b07      	ldr	r3, [pc, #28]	; (80026bc <HAL_RCC_GetSysClockFreq+0xbc>)
 800269e:	623b      	str	r3, [r7, #32]
      break;
 80026a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026a2:	6a3b      	ldr	r3, [r7, #32]
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3728      	adds	r7, #40	; 0x28
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bc90      	pop	{r4, r7}
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	08007ccc 	.word	0x08007ccc
 80026b4:	08007cdc 	.word	0x08007cdc
 80026b8:	40021000 	.word	0x40021000
 80026bc:	007a1200 	.word	0x007a1200
 80026c0:	003d0900 	.word	0x003d0900

080026c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026c8:	4b02      	ldr	r3, [pc, #8]	; (80026d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80026ca:	681b      	ldr	r3, [r3, #0]
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bc80      	pop	{r7}
 80026d2:	4770      	bx	lr
 80026d4:	20000000 	.word	0x20000000

080026d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026dc:	f7ff fff2 	bl	80026c4 <HAL_RCC_GetHCLKFreq>
 80026e0:	4601      	mov	r1, r0
 80026e2:	4b05      	ldr	r3, [pc, #20]	; (80026f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	0adb      	lsrs	r3, r3, #11
 80026e8:	f003 0307 	and.w	r3, r3, #7
 80026ec:	4a03      	ldr	r2, [pc, #12]	; (80026fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80026ee:	5cd3      	ldrb	r3, [r2, r3]
 80026f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	40021000 	.word	0x40021000
 80026fc:	08007d48 	.word	0x08007d48

08002700 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002700:	b480      	push	{r7}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002708:	4b0a      	ldr	r3, [pc, #40]	; (8002734 <RCC_Delay+0x34>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a0a      	ldr	r2, [pc, #40]	; (8002738 <RCC_Delay+0x38>)
 800270e:	fba2 2303 	umull	r2, r3, r2, r3
 8002712:	0a5b      	lsrs	r3, r3, #9
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	fb02 f303 	mul.w	r3, r2, r3
 800271a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800271c:	bf00      	nop
  }
  while (Delay --);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	1e5a      	subs	r2, r3, #1
 8002722:	60fa      	str	r2, [r7, #12]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1f9      	bne.n	800271c <RCC_Delay+0x1c>
}
 8002728:	bf00      	nop
 800272a:	3714      	adds	r7, #20
 800272c:	46bd      	mov	sp, r7
 800272e:	bc80      	pop	{r7}
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	20000000 	.word	0x20000000
 8002738:	10624dd3 	.word	0x10624dd3

0800273c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b086      	sub	sp, #24
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002744:	2300      	movs	r3, #0
 8002746:	613b      	str	r3, [r7, #16]
 8002748:	2300      	movs	r3, #0
 800274a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0301 	and.w	r3, r3, #1
 8002754:	2b00      	cmp	r3, #0
 8002756:	d07d      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002758:	2300      	movs	r3, #0
 800275a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800275c:	4b4f      	ldr	r3, [pc, #316]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800275e:	69db      	ldr	r3, [r3, #28]
 8002760:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d10d      	bne.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002768:	4b4c      	ldr	r3, [pc, #304]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800276a:	69db      	ldr	r3, [r3, #28]
 800276c:	4a4b      	ldr	r2, [pc, #300]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800276e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002772:	61d3      	str	r3, [r2, #28]
 8002774:	4b49      	ldr	r3, [pc, #292]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002776:	69db      	ldr	r3, [r3, #28]
 8002778:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800277c:	60bb      	str	r3, [r7, #8]
 800277e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002780:	2301      	movs	r3, #1
 8002782:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002784:	4b46      	ldr	r3, [pc, #280]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800278c:	2b00      	cmp	r3, #0
 800278e:	d118      	bne.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002790:	4b43      	ldr	r3, [pc, #268]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a42      	ldr	r2, [pc, #264]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002796:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800279a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800279c:	f7fd fef2 	bl	8000584 <HAL_GetTick>
 80027a0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027a2:	e008      	b.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027a4:	f7fd feee 	bl	8000584 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b64      	cmp	r3, #100	; 0x64
 80027b0:	d901      	bls.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e06d      	b.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027b6:	4b3a      	ldr	r3, [pc, #232]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d0f0      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80027c2:	4b36      	ldr	r3, [pc, #216]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027c4:	6a1b      	ldr	r3, [r3, #32]
 80027c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ca:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d02e      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d027      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027e0:	4b2e      	ldr	r3, [pc, #184]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027e2:	6a1b      	ldr	r3, [r3, #32]
 80027e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027e8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80027ea:	4b2e      	ldr	r3, [pc, #184]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80027ec:	2201      	movs	r2, #1
 80027ee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027f0:	4b2c      	ldr	r3, [pc, #176]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80027f6:	4a29      	ldr	r2, [pc, #164]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	2b00      	cmp	r3, #0
 8002804:	d014      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002806:	f7fd febd 	bl	8000584 <HAL_GetTick>
 800280a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800280c:	e00a      	b.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800280e:	f7fd feb9 	bl	8000584 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	f241 3288 	movw	r2, #5000	; 0x1388
 800281c:	4293      	cmp	r3, r2
 800281e:	d901      	bls.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e036      	b.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002824:	4b1d      	ldr	r3, [pc, #116]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002826:	6a1b      	ldr	r3, [r3, #32]
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d0ee      	beq.n	800280e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002830:	4b1a      	ldr	r3, [pc, #104]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	4917      	ldr	r1, [pc, #92]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800283e:	4313      	orrs	r3, r2
 8002840:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002842:	7dfb      	ldrb	r3, [r7, #23]
 8002844:	2b01      	cmp	r3, #1
 8002846:	d105      	bne.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002848:	4b14      	ldr	r3, [pc, #80]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800284a:	69db      	ldr	r3, [r3, #28]
 800284c:	4a13      	ldr	r2, [pc, #76]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800284e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002852:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d008      	beq.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002860:	4b0e      	ldr	r3, [pc, #56]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	490b      	ldr	r1, [pc, #44]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800286e:	4313      	orrs	r3, r2
 8002870:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0310 	and.w	r3, r3, #16
 800287a:	2b00      	cmp	r3, #0
 800287c:	d008      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800287e:	4b07      	ldr	r3, [pc, #28]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	4904      	ldr	r1, [pc, #16]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800288c:	4313      	orrs	r3, r2
 800288e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3718      	adds	r7, #24
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	40021000 	.word	0x40021000
 80028a0:	40007000 	.word	0x40007000
 80028a4:	42420440 	.word	0x42420440

080028a8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80028a8:	b590      	push	{r4, r7, lr}
 80028aa:	b08d      	sub	sp, #52	; 0x34
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80028b0:	4b6b      	ldr	r3, [pc, #428]	; (8002a60 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 80028b2:	f107 040c 	add.w	r4, r7, #12
 80028b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80028bc:	4b69      	ldr	r3, [pc, #420]	; (8002a64 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 80028be:	881b      	ldrh	r3, [r3, #0]
 80028c0:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80028c2:	2300      	movs	r3, #0
 80028c4:	627b      	str	r3, [r7, #36]	; 0x24
 80028c6:	2300      	movs	r3, #0
 80028c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028ca:	2300      	movs	r3, #0
 80028cc:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80028ce:	2300      	movs	r3, #0
 80028d0:	61fb      	str	r3, [r7, #28]
 80028d2:	2300      	movs	r3, #0
 80028d4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	3b01      	subs	r3, #1
 80028da:	2b0f      	cmp	r3, #15
 80028dc:	f200 80b6 	bhi.w	8002a4c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 80028e0:	a201      	add	r2, pc, #4	; (adr r2, 80028e8 <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 80028e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028e6:	bf00      	nop
 80028e8:	080029cb 	.word	0x080029cb
 80028ec:	08002a31 	.word	0x08002a31
 80028f0:	08002a4d 	.word	0x08002a4d
 80028f4:	080029bb 	.word	0x080029bb
 80028f8:	08002a4d 	.word	0x08002a4d
 80028fc:	08002a4d 	.word	0x08002a4d
 8002900:	08002a4d 	.word	0x08002a4d
 8002904:	080029c3 	.word	0x080029c3
 8002908:	08002a4d 	.word	0x08002a4d
 800290c:	08002a4d 	.word	0x08002a4d
 8002910:	08002a4d 	.word	0x08002a4d
 8002914:	08002a4d 	.word	0x08002a4d
 8002918:	08002a4d 	.word	0x08002a4d
 800291c:	08002a4d 	.word	0x08002a4d
 8002920:	08002a4d 	.word	0x08002a4d
 8002924:	08002929 	.word	0x08002929
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8002928:	4b4f      	ldr	r3, [pc, #316]	; (8002a68 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800292e:	4b4e      	ldr	r3, [pc, #312]	; (8002a68 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	f000 808a 	beq.w	8002a50 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	0c9b      	lsrs	r3, r3, #18
 8002940:	f003 030f 	and.w	r3, r3, #15
 8002944:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002948:	4413      	add	r3, r2
 800294a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800294e:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d018      	beq.n	800298c <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800295a:	4b43      	ldr	r3, [pc, #268]	; (8002a68 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	0c5b      	lsrs	r3, r3, #17
 8002960:	f003 0301 	and.w	r3, r3, #1
 8002964:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002968:	4413      	add	r3, r2
 800296a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800296e:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d00d      	beq.n	8002996 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800297a:	4a3c      	ldr	r2, [pc, #240]	; (8002a6c <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 800297c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002982:	6a3b      	ldr	r3, [r7, #32]
 8002984:	fb02 f303 	mul.w	r3, r2, r3
 8002988:	62fb      	str	r3, [r7, #44]	; 0x2c
 800298a:	e004      	b.n	8002996 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800298c:	6a3b      	ldr	r3, [r7, #32]
 800298e:	4a38      	ldr	r2, [pc, #224]	; (8002a70 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>)
 8002990:	fb02 f303 	mul.w	r3, r2, r3
 8002994:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002996:	4b34      	ldr	r3, [pc, #208]	; (8002a68 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800299e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029a2:	d102      	bne.n	80029aa <HAL_RCCEx_GetPeriphCLKFreq+0x102>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 80029a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029a6:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 80029a8:	e052      	b.n	8002a50 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          frequency = (pllclk * 2) / 3;
 80029aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	4a31      	ldr	r2, [pc, #196]	; (8002a74 <HAL_RCCEx_GetPeriphCLKFreq+0x1cc>)
 80029b0:	fba2 2303 	umull	r2, r3, r2, r3
 80029b4:	085b      	lsrs	r3, r3, #1
 80029b6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80029b8:	e04a      	b.n	8002a50 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 80029ba:	f7ff fe21 	bl	8002600 <HAL_RCC_GetSysClockFreq>
 80029be:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80029c0:	e049      	b.n	8002a56 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 80029c2:	f7ff fe1d 	bl	8002600 <HAL_RCC_GetSysClockFreq>
 80029c6:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80029c8:	e045      	b.n	8002a56 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 80029ca:	4b27      	ldr	r3, [pc, #156]	; (8002a68 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 80029cc:	6a1b      	ldr	r3, [r3, #32]
 80029ce:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029da:	d108      	bne.n	80029ee <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d003      	beq.n	80029ee <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSE_VALUE;
 80029e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80029ec:	e01f      	b.n	8002a2e <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029f8:	d109      	bne.n	8002a0e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80029fa:	4b1b      	ldr	r3, [pc, #108]	; (8002a68 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 80029fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d003      	beq.n	8002a0e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      {
        frequency = LSI_VALUE;
 8002a06:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002a0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a0c:	e00f      	b.n	8002a2e <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a18:	d11c      	bne.n	8002a54 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8002a1a:	4b13      	ldr	r3, [pc, #76]	; (8002a68 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d016      	beq.n	8002a54 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
      {
        frequency = HSE_VALUE / 128U;
 8002a26:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002a2a:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8002a2c:	e012      	b.n	8002a54 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8002a2e:	e011      	b.n	8002a54 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002a30:	f7ff fe52 	bl	80026d8 <HAL_RCC_GetPCLK2Freq>
 8002a34:	4602      	mov	r2, r0
 8002a36:	4b0c      	ldr	r3, [pc, #48]	; (8002a68 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	0b9b      	lsrs	r3, r3, #14
 8002a3c:	f003 0303 	and.w	r3, r3, #3
 8002a40:	3301      	adds	r3, #1
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a48:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002a4a:	e004      	b.n	8002a56 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
    default:
    {
      break;
 8002a4c:	bf00      	nop
 8002a4e:	e002      	b.n	8002a56 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
      break;
 8002a50:	bf00      	nop
 8002a52:	e000      	b.n	8002a56 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
      break;
 8002a54:	bf00      	nop
    }
  }
  return (frequency);
 8002a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3734      	adds	r7, #52	; 0x34
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd90      	pop	{r4, r7, pc}
 8002a60:	08007ce0 	.word	0x08007ce0
 8002a64:	08007cf0 	.word	0x08007cf0
 8002a68:	40021000 	.word	0x40021000
 8002a6c:	007a1200 	.word	0x007a1200
 8002a70:	003d0900 	.word	0x003d0900
 8002a74:	aaaaaaab 	.word	0xaaaaaaab

08002a78 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8002a80:	2300      	movs	r3, #0
 8002a82:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d101      	bne.n	8002a8e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e084      	b.n	8002b98 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	7c5b      	ldrb	r3, [r3, #17]
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d105      	bne.n	8002aa4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f7fd fc96 	bl	80003d0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 f87a 	bl	8002ba4 <HAL_RTC_WaitForSynchro>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d004      	beq.n	8002ac0 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2204      	movs	r2, #4
 8002aba:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e06b      	b.n	8002b98 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f000 f89c 	bl	8002bfe <RTC_EnterInitMode>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d004      	beq.n	8002ad6 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2204      	movs	r2, #4
 8002ad0:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e060      	b.n	8002b98 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	685a      	ldr	r2, [r3, #4]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f022 0207 	bic.w	r2, r2, #7
 8002ae4:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d005      	beq.n	8002afa <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8002aee:	4b2c      	ldr	r3, [pc, #176]	; (8002ba0 <HAL_RTC_Init+0x128>)
 8002af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af2:	4a2b      	ldr	r2, [pc, #172]	; (8002ba0 <HAL_RTC_Init+0x128>)
 8002af4:	f023 0301 	bic.w	r3, r3, #1
 8002af8:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8002afa:	4b29      	ldr	r3, [pc, #164]	; (8002ba0 <HAL_RTC_Init+0x128>)
 8002afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002afe:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	4926      	ldr	r1, [pc, #152]	; (8002ba0 <HAL_RTC_Init+0x128>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b14:	d003      	beq.n	8002b1e <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	60fb      	str	r3, [r7, #12]
 8002b1c:	e00e      	b.n	8002b3c <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8002b1e:	2001      	movs	r0, #1
 8002b20:	f7ff fec2 	bl	80028a8 <HAL_RCCEx_GetPeriphCLKFreq>
 8002b24:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d104      	bne.n	8002b36 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2204      	movs	r2, #4
 8002b30:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e030      	b.n	8002b98 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	3b01      	subs	r3, #1
 8002b3a:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f023 010f 	bic.w	r1, r3, #15
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	0c1a      	lsrs	r2, r3, #16
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	0c1b      	lsrs	r3, r3, #16
 8002b5a:	041b      	lsls	r3, r3, #16
 8002b5c:	68fa      	ldr	r2, [r7, #12]
 8002b5e:	b291      	uxth	r1, r2
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	6812      	ldr	r2, [r2, #0]
 8002b64:	430b      	orrs	r3, r1
 8002b66:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f000 f870 	bl	8002c4e <RTC_ExitInitMode>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d004      	beq.n	8002b7e <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2204      	movs	r2, #4
 8002b78:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e00c      	b.n	8002b98 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8002b96:	2300      	movs	r3, #0
  }
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3710      	adds	r7, #16
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	40006c00 	.word	0x40006c00

08002ba4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bac:	2300      	movs	r3, #0
 8002bae:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e01d      	b.n	8002bf6 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	685a      	ldr	r2, [r3, #4]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f022 0208 	bic.w	r2, r2, #8
 8002bc8:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002bca:	f7fd fcdb 	bl	8000584 <HAL_GetTick>
 8002bce:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002bd0:	e009      	b.n	8002be6 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002bd2:	f7fd fcd7 	bl	8000584 <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002be0:	d901      	bls.n	8002be6 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e007      	b.n	8002bf6 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f003 0308 	and.w	r3, r3, #8
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d0ee      	beq.n	8002bd2 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b084      	sub	sp, #16
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c06:	2300      	movs	r3, #0
 8002c08:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8002c0a:	f7fd fcbb 	bl	8000584 <HAL_GetTick>
 8002c0e:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002c10:	e009      	b.n	8002c26 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002c12:	f7fd fcb7 	bl	8000584 <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c20:	d901      	bls.n	8002c26 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e00f      	b.n	8002c46 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f003 0320 	and.w	r3, r3, #32
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d0ee      	beq.n	8002c12 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	685a      	ldr	r2, [r3, #4]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f042 0210 	orr.w	r2, r2, #16
 8002c42:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3710      	adds	r7, #16
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b084      	sub	sp, #16
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c56:	2300      	movs	r3, #0
 8002c58:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	685a      	ldr	r2, [r3, #4]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f022 0210 	bic.w	r2, r2, #16
 8002c68:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002c6a:	f7fd fc8b 	bl	8000584 <HAL_GetTick>
 8002c6e:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002c70:	e009      	b.n	8002c86 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002c72:	f7fd fc87 	bl	8000584 <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c80:	d901      	bls.n	8002c86 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e007      	b.n	8002c96 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f003 0320 	and.w	r3, r3, #32
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d0ee      	beq.n	8002c72 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	f107 0014 	add.w	r0, r7, #20
 8002cac:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bc80      	pop	{r7}
 8002cba:	b004      	add	sp, #16
 8002cbc:	4770      	bx	lr

08002cbe <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	b085      	sub	sp, #20
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002cce:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002cd2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	b29a      	uxth	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3714      	adds	r7, #20
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bc80      	pop	{r7}
 8002ce8:	4770      	bx	lr

08002cea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002cea:	b480      	push	{r7}
 8002cec:	b085      	sub	sp, #20
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002cf2:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002cf6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002cfe:	b29a      	uxth	r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	43db      	mvns	r3, r3
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	4013      	ands	r3, r2
 8002d0a:	b29a      	uxth	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002d12:	2300      	movs	r3, #0
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3714      	adds	r7, #20
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bc80      	pop	{r7}
 8002d1c:	4770      	bx	lr

08002d1e <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	b083      	sub	sp, #12
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
 8002d26:	460b      	mov	r3, r1
 8002d28:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bc80      	pop	{r7}
 8002d34:	4770      	bx	lr

08002d36 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002d36:	b084      	sub	sp, #16
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	f107 0014 	add.w	r0, r7, #20
 8002d44:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bc80      	pop	{r7}
 8002d72:	b004      	add	sp, #16
 8002d74:	4770      	bx	lr

08002d76 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_TypeDef *USBx, uint32_t num)
{
 8002d76:	b480      	push	{r7}
 8002d78:	b083      	sub	sp, #12
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
 8002d7e:	6039      	str	r1, [r7, #0]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	370c      	adds	r7, #12
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bc80      	pop	{r7}
 8002d8a:	4770      	bx	lr

08002d8c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_TypeDef *USBx)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	370c      	adds	r7, #12
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bc80      	pop	{r7}
 8002d9e:	4770      	bx	lr

08002da0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b09b      	sub	sp, #108	; 0x6c
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8002daa:	2300      	movs	r3, #0
 8002dac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	4413      	add	r3, r2
 8002dba:	881b      	ldrh	r3, [r3, #0]
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dc6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	78db      	ldrb	r3, [r3, #3]
 8002dce:	2b03      	cmp	r3, #3
 8002dd0:	d81f      	bhi.n	8002e12 <USB_ActivateEndpoint+0x72>
 8002dd2:	a201      	add	r2, pc, #4	; (adr r2, 8002dd8 <USB_ActivateEndpoint+0x38>)
 8002dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dd8:	08002de9 	.word	0x08002de9
 8002ddc:	08002e05 	.word	0x08002e05
 8002de0:	08002e1b 	.word	0x08002e1b
 8002de4:	08002df7 	.word	0x08002df7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002de8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002dec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002df0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002df4:	e012      	b.n	8002e1c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8002df6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002dfa:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002dfe:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002e02:	e00b      	b.n	8002e1c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002e04:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002e08:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e0c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002e10:	e004      	b.n	8002e1c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8002e18:	e000      	b.n	8002e1c <USB_ActivateEndpoint+0x7c>
      break;
 8002e1a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	441a      	add	r2, r3
 8002e26:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002e2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	4413      	add	r3, r2
 8002e48:	881b      	ldrh	r3, [r3, #0]
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e54:	b29a      	uxth	r2, r3
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	441a      	add	r2, r3
 8002e6c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002e70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	7b1b      	ldrb	r3, [r3, #12]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	f040 8149 	bne.w	8003120 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	785b      	ldrb	r3, [r3, #1]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	f000 8084 	beq.w	8002fa0 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	617b      	str	r3, [r7, #20]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	617b      	str	r3, [r7, #20]
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	011a      	lsls	r2, r3, #4
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002eba:	613b      	str	r3, [r7, #16]
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	88db      	ldrh	r3, [r3, #6]
 8002ec0:	085b      	lsrs	r3, r3, #1
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	4413      	add	r3, r2
 8002ed6:	881b      	ldrh	r3, [r3, #0]
 8002ed8:	81fb      	strh	r3, [r7, #14]
 8002eda:	89fb      	ldrh	r3, [r7, #14]
 8002edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d01b      	beq.n	8002f1c <USB_ActivateEndpoint+0x17c>
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	4413      	add	r3, r2
 8002eee:	881b      	ldrh	r3, [r3, #0]
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002efa:	81bb      	strh	r3, [r7, #12]
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	441a      	add	r2, r3
 8002f06:	89bb      	ldrh	r3, [r7, #12]
 8002f08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f14:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	78db      	ldrb	r3, [r3, #3]
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d020      	beq.n	8002f66 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	4413      	add	r3, r2
 8002f2e:	881b      	ldrh	r3, [r3, #0]
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f3a:	813b      	strh	r3, [r7, #8]
 8002f3c:	893b      	ldrh	r3, [r7, #8]
 8002f3e:	f083 0320 	eor.w	r3, r3, #32
 8002f42:	813b      	strh	r3, [r7, #8]
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	441a      	add	r2, r3
 8002f4e:	893b      	ldrh	r3, [r7, #8]
 8002f50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	8013      	strh	r3, [r2, #0]
 8002f64:	e27f      	b.n	8003466 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	4413      	add	r3, r2
 8002f70:	881b      	ldrh	r3, [r3, #0]
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f7c:	817b      	strh	r3, [r7, #10]
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	441a      	add	r2, r3
 8002f88:	897b      	ldrh	r3, [r7, #10]
 8002f8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	8013      	strh	r3, [r2, #0]
 8002f9e:	e262      	b.n	8003466 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	461a      	mov	r2, r3
 8002fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fb0:	4413      	add	r3, r2
 8002fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	011a      	lsls	r2, r3, #4
 8002fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fbc:	4413      	add	r3, r2
 8002fbe:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002fc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	88db      	ldrh	r3, [r3, #6]
 8002fc8:	085b      	lsrs	r3, r3, #1
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	b29a      	uxth	r2, r3
 8002fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd2:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	627b      	str	r3, [r7, #36]	; 0x24
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe4:	4413      	add	r3, r2
 8002fe6:	627b      	str	r3, [r7, #36]	; 0x24
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	011a      	lsls	r2, r3, #4
 8002fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff0:	4413      	add	r3, r2
 8002ff2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002ff6:	623b      	str	r3, [r7, #32]
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	691b      	ldr	r3, [r3, #16]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d112      	bne.n	8003026 <USB_ActivateEndpoint+0x286>
 8003000:	6a3b      	ldr	r3, [r7, #32]
 8003002:	881b      	ldrh	r3, [r3, #0]
 8003004:	b29b      	uxth	r3, r3
 8003006:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800300a:	b29a      	uxth	r2, r3
 800300c:	6a3b      	ldr	r3, [r7, #32]
 800300e:	801a      	strh	r2, [r3, #0]
 8003010:	6a3b      	ldr	r3, [r7, #32]
 8003012:	881b      	ldrh	r3, [r3, #0]
 8003014:	b29b      	uxth	r3, r3
 8003016:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800301a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800301e:	b29a      	uxth	r2, r3
 8003020:	6a3b      	ldr	r3, [r7, #32]
 8003022:	801a      	strh	r2, [r3, #0]
 8003024:	e02f      	b.n	8003086 <USB_ActivateEndpoint+0x2e6>
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	2b3e      	cmp	r3, #62	; 0x3e
 800302c:	d813      	bhi.n	8003056 <USB_ActivateEndpoint+0x2b6>
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	085b      	lsrs	r3, r3, #1
 8003034:	663b      	str	r3, [r7, #96]	; 0x60
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	2b00      	cmp	r3, #0
 8003040:	d002      	beq.n	8003048 <USB_ActivateEndpoint+0x2a8>
 8003042:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003044:	3301      	adds	r3, #1
 8003046:	663b      	str	r3, [r7, #96]	; 0x60
 8003048:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800304a:	b29b      	uxth	r3, r3
 800304c:	029b      	lsls	r3, r3, #10
 800304e:	b29a      	uxth	r2, r3
 8003050:	6a3b      	ldr	r3, [r7, #32]
 8003052:	801a      	strh	r2, [r3, #0]
 8003054:	e017      	b.n	8003086 <USB_ActivateEndpoint+0x2e6>
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	095b      	lsrs	r3, r3, #5
 800305c:	663b      	str	r3, [r7, #96]	; 0x60
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	f003 031f 	and.w	r3, r3, #31
 8003066:	2b00      	cmp	r3, #0
 8003068:	d102      	bne.n	8003070 <USB_ActivateEndpoint+0x2d0>
 800306a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800306c:	3b01      	subs	r3, #1
 800306e:	663b      	str	r3, [r7, #96]	; 0x60
 8003070:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003072:	b29b      	uxth	r3, r3
 8003074:	029b      	lsls	r3, r3, #10
 8003076:	b29b      	uxth	r3, r3
 8003078:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800307c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003080:	b29a      	uxth	r2, r3
 8003082:	6a3b      	ldr	r3, [r7, #32]
 8003084:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	4413      	add	r3, r2
 8003090:	881b      	ldrh	r3, [r3, #0]
 8003092:	83fb      	strh	r3, [r7, #30]
 8003094:	8bfb      	ldrh	r3, [r7, #30]
 8003096:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d01b      	beq.n	80030d6 <USB_ActivateEndpoint+0x336>
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	4413      	add	r3, r2
 80030a8:	881b      	ldrh	r3, [r3, #0]
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030b4:	83bb      	strh	r3, [r7, #28]
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	441a      	add	r2, r3
 80030c0:	8bbb      	ldrh	r3, [r7, #28]
 80030c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	4413      	add	r3, r2
 80030e0:	881b      	ldrh	r3, [r3, #0]
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030ec:	837b      	strh	r3, [r7, #26]
 80030ee:	8b7b      	ldrh	r3, [r7, #26]
 80030f0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80030f4:	837b      	strh	r3, [r7, #26]
 80030f6:	8b7b      	ldrh	r3, [r7, #26]
 80030f8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80030fc:	837b      	strh	r3, [r7, #26]
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	441a      	add	r2, r3
 8003108:	8b7b      	ldrh	r3, [r7, #26]
 800310a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800310e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003112:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003116:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800311a:	b29b      	uxth	r3, r3
 800311c:	8013      	strh	r3, [r2, #0]
 800311e:	e1a2      	b.n	8003466 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	4413      	add	r3, r2
 800312a:	881b      	ldrh	r3, [r3, #0]
 800312c:	b29b      	uxth	r3, r3
 800312e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003136:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	441a      	add	r2, r3
 8003144:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003148:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800314c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003150:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003158:	b29b      	uxth	r3, r3
 800315a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003166:	b29b      	uxth	r3, r3
 8003168:	461a      	mov	r2, r3
 800316a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800316c:	4413      	add	r3, r2
 800316e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	011a      	lsls	r2, r3, #4
 8003176:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003178:	4413      	add	r3, r2
 800317a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800317e:	657b      	str	r3, [r7, #84]	; 0x54
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	891b      	ldrh	r3, [r3, #8]
 8003184:	085b      	lsrs	r3, r3, #1
 8003186:	b29b      	uxth	r3, r3
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	b29a      	uxth	r2, r3
 800318c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800318e:	801a      	strh	r2, [r3, #0]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	653b      	str	r3, [r7, #80]	; 0x50
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800319a:	b29b      	uxth	r3, r3
 800319c:	461a      	mov	r2, r3
 800319e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031a0:	4413      	add	r3, r2
 80031a2:	653b      	str	r3, [r7, #80]	; 0x50
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	011a      	lsls	r2, r3, #4
 80031aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031ac:	4413      	add	r3, r2
 80031ae:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80031b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	895b      	ldrh	r3, [r3, #10]
 80031b8:	085b      	lsrs	r3, r3, #1
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	005b      	lsls	r3, r3, #1
 80031be:	b29a      	uxth	r2, r3
 80031c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031c2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	785b      	ldrb	r3, [r3, #1]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	f040 8091 	bne.w	80032f0 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	4413      	add	r3, r2
 80031d8:	881b      	ldrh	r3, [r3, #0]
 80031da:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80031dc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80031de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d01b      	beq.n	800321e <USB_ActivateEndpoint+0x47e>
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	4413      	add	r3, r2
 80031f0:	881b      	ldrh	r3, [r3, #0]
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031fc:	877b      	strh	r3, [r7, #58]	; 0x3a
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	441a      	add	r2, r3
 8003208:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800320a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800320e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003212:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003216:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800321a:	b29b      	uxth	r3, r3
 800321c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	4413      	add	r3, r2
 8003228:	881b      	ldrh	r3, [r3, #0]
 800322a:	873b      	strh	r3, [r7, #56]	; 0x38
 800322c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800322e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003232:	2b00      	cmp	r3, #0
 8003234:	d01b      	beq.n	800326e <USB_ActivateEndpoint+0x4ce>
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	4413      	add	r3, r2
 8003240:	881b      	ldrh	r3, [r3, #0]
 8003242:	b29b      	uxth	r3, r3
 8003244:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003248:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800324c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	441a      	add	r2, r3
 8003258:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800325a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800325e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003262:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003266:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800326a:	b29b      	uxth	r3, r3
 800326c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	4413      	add	r3, r2
 8003278:	881b      	ldrh	r3, [r3, #0]
 800327a:	b29b      	uxth	r3, r3
 800327c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003280:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003284:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003286:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003288:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800328c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800328e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003290:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003294:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	441a      	add	r2, r3
 80032a0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80032a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	4413      	add	r3, r2
 80032c0:	881b      	ldrh	r3, [r3, #0]
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032cc:	867b      	strh	r3, [r7, #50]	; 0x32
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	441a      	add	r2, r3
 80032d8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80032da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	8013      	strh	r3, [r2, #0]
 80032ee:	e0ba      	b.n	8003466 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	4413      	add	r3, r2
 80032fa:	881b      	ldrh	r3, [r3, #0]
 80032fc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003300:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003304:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d01d      	beq.n	8003348 <USB_ActivateEndpoint+0x5a8>
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	4413      	add	r3, r2
 8003316:	881b      	ldrh	r3, [r3, #0]
 8003318:	b29b      	uxth	r3, r3
 800331a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800331e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003322:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	441a      	add	r2, r3
 8003330:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003334:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003338:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800333c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003344:	b29b      	uxth	r3, r3
 8003346:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	4413      	add	r3, r2
 8003352:	881b      	ldrh	r3, [r3, #0]
 8003354:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003358:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800335c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003360:	2b00      	cmp	r3, #0
 8003362:	d01d      	beq.n	80033a0 <USB_ActivateEndpoint+0x600>
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	4413      	add	r3, r2
 800336e:	881b      	ldrh	r3, [r3, #0]
 8003370:	b29b      	uxth	r3, r3
 8003372:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800337a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	441a      	add	r2, r3
 8003388:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800338c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003390:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003394:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003398:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800339c:	b29b      	uxth	r3, r3
 800339e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	78db      	ldrb	r3, [r3, #3]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d024      	beq.n	80033f2 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	4413      	add	r3, r2
 80033b2:	881b      	ldrh	r3, [r3, #0]
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033be:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80033c2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80033c6:	f083 0320 	eor.w	r3, r3, #32
 80033ca:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	441a      	add	r2, r3
 80033d8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80033dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	8013      	strh	r3, [r2, #0]
 80033f0:	e01d      	b.n	800342e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	4413      	add	r3, r2
 80033fc:	881b      	ldrh	r3, [r3, #0]
 80033fe:	b29b      	uxth	r3, r3
 8003400:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003404:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003408:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	441a      	add	r2, r3
 8003416:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800341a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800341e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003422:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003426:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800342a:	b29b      	uxth	r3, r3
 800342c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	4413      	add	r3, r2
 8003438:	881b      	ldrh	r3, [r3, #0]
 800343a:	b29b      	uxth	r3, r3
 800343c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003440:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003444:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	441a      	add	r2, r3
 8003450:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003452:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003456:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800345a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800345e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003462:	b29b      	uxth	r3, r3
 8003464:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8003466:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800346a:	4618      	mov	r0, r3
 800346c:	376c      	adds	r7, #108	; 0x6c
 800346e:	46bd      	mov	sp, r7
 8003470:	bc80      	pop	{r7}
 8003472:	4770      	bx	lr

08003474 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003474:	b480      	push	{r7}
 8003476:	b08d      	sub	sp, #52	; 0x34
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	7b1b      	ldrb	r3, [r3, #12]
 8003482:	2b00      	cmp	r3, #0
 8003484:	f040 808e 	bne.w	80035a4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	785b      	ldrb	r3, [r3, #1]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d044      	beq.n	800351a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	4413      	add	r3, r2
 800349a:	881b      	ldrh	r3, [r3, #0]
 800349c:	81bb      	strh	r3, [r7, #12]
 800349e:	89bb      	ldrh	r3, [r7, #12]
 80034a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d01b      	beq.n	80034e0 <USB_DeactivateEndpoint+0x6c>
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	4413      	add	r3, r2
 80034b2:	881b      	ldrh	r3, [r3, #0]
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034be:	817b      	strh	r3, [r7, #10]
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	441a      	add	r2, r3
 80034ca:	897b      	ldrh	r3, [r7, #10]
 80034cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80034dc:	b29b      	uxth	r3, r3
 80034de:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	4413      	add	r3, r2
 80034ea:	881b      	ldrh	r3, [r3, #0]
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034f6:	813b      	strh	r3, [r7, #8]
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	441a      	add	r2, r3
 8003502:	893b      	ldrh	r3, [r7, #8]
 8003504:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003508:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800350c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003514:	b29b      	uxth	r3, r3
 8003516:	8013      	strh	r3, [r2, #0]
 8003518:	e192      	b.n	8003840 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	4413      	add	r3, r2
 8003524:	881b      	ldrh	r3, [r3, #0]
 8003526:	827b      	strh	r3, [r7, #18]
 8003528:	8a7b      	ldrh	r3, [r7, #18]
 800352a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d01b      	beq.n	800356a <USB_DeactivateEndpoint+0xf6>
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	4413      	add	r3, r2
 800353c:	881b      	ldrh	r3, [r3, #0]
 800353e:	b29b      	uxth	r3, r3
 8003540:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003544:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003548:	823b      	strh	r3, [r7, #16]
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	441a      	add	r2, r3
 8003554:	8a3b      	ldrh	r3, [r7, #16]
 8003556:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800355a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800355e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003562:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003566:	b29b      	uxth	r3, r3
 8003568:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	4413      	add	r3, r2
 8003574:	881b      	ldrh	r3, [r3, #0]
 8003576:	b29b      	uxth	r3, r3
 8003578:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800357c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003580:	81fb      	strh	r3, [r7, #14]
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	441a      	add	r2, r3
 800358c:	89fb      	ldrh	r3, [r7, #14]
 800358e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003592:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003596:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800359a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800359e:	b29b      	uxth	r3, r3
 80035a0:	8013      	strh	r3, [r2, #0]
 80035a2:	e14d      	b.n	8003840 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	785b      	ldrb	r3, [r3, #1]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f040 80a5 	bne.w	80036f8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	4413      	add	r3, r2
 80035b8:	881b      	ldrh	r3, [r3, #0]
 80035ba:	843b      	strh	r3, [r7, #32]
 80035bc:	8c3b      	ldrh	r3, [r7, #32]
 80035be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d01b      	beq.n	80035fe <USB_DeactivateEndpoint+0x18a>
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	4413      	add	r3, r2
 80035d0:	881b      	ldrh	r3, [r3, #0]
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035dc:	83fb      	strh	r3, [r7, #30]
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	441a      	add	r2, r3
 80035e8:	8bfb      	ldrh	r3, [r7, #30]
 80035ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	4413      	add	r3, r2
 8003608:	881b      	ldrh	r3, [r3, #0]
 800360a:	83bb      	strh	r3, [r7, #28]
 800360c:	8bbb      	ldrh	r3, [r7, #28]
 800360e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003612:	2b00      	cmp	r3, #0
 8003614:	d01b      	beq.n	800364e <USB_DeactivateEndpoint+0x1da>
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	4413      	add	r3, r2
 8003620:	881b      	ldrh	r3, [r3, #0]
 8003622:	b29b      	uxth	r3, r3
 8003624:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003628:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800362c:	837b      	strh	r3, [r7, #26]
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	441a      	add	r2, r3
 8003638:	8b7b      	ldrh	r3, [r7, #26]
 800363a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800363e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003642:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003646:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800364a:	b29b      	uxth	r3, r3
 800364c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	4413      	add	r3, r2
 8003658:	881b      	ldrh	r3, [r3, #0]
 800365a:	b29b      	uxth	r3, r3
 800365c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003660:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003664:	833b      	strh	r3, [r7, #24]
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	441a      	add	r2, r3
 8003670:	8b3b      	ldrh	r3, [r7, #24]
 8003672:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003676:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800367a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800367e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003682:	b29b      	uxth	r3, r3
 8003684:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	4413      	add	r3, r2
 8003690:	881b      	ldrh	r3, [r3, #0]
 8003692:	b29b      	uxth	r3, r3
 8003694:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003698:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800369c:	82fb      	strh	r3, [r7, #22]
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	441a      	add	r2, r3
 80036a8:	8afb      	ldrh	r3, [r7, #22]
 80036aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	4413      	add	r3, r2
 80036c8:	881b      	ldrh	r3, [r3, #0]
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036d4:	82bb      	strh	r3, [r7, #20]
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	441a      	add	r2, r3
 80036e0:	8abb      	ldrh	r3, [r7, #20]
 80036e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	8013      	strh	r3, [r2, #0]
 80036f6:	e0a3      	b.n	8003840 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	4413      	add	r3, r2
 8003702:	881b      	ldrh	r3, [r3, #0]
 8003704:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003706:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003708:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d01b      	beq.n	8003748 <USB_DeactivateEndpoint+0x2d4>
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	4413      	add	r3, r2
 800371a:	881b      	ldrh	r3, [r3, #0]
 800371c:	b29b      	uxth	r3, r3
 800371e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003726:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	441a      	add	r2, r3
 8003732:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003734:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003738:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800373c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003744:	b29b      	uxth	r3, r3
 8003746:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	4413      	add	r3, r2
 8003752:	881b      	ldrh	r3, [r3, #0]
 8003754:	857b      	strh	r3, [r7, #42]	; 0x2a
 8003756:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800375c:	2b00      	cmp	r3, #0
 800375e:	d01b      	beq.n	8003798 <USB_DeactivateEndpoint+0x324>
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	4413      	add	r3, r2
 800376a:	881b      	ldrh	r3, [r3, #0]
 800376c:	b29b      	uxth	r3, r3
 800376e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003776:	853b      	strh	r3, [r7, #40]	; 0x28
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	441a      	add	r2, r3
 8003782:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003784:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003788:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800378c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003790:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003794:	b29b      	uxth	r3, r3
 8003796:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	4413      	add	r3, r2
 80037a2:	881b      	ldrh	r3, [r3, #0]
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ae:	84fb      	strh	r3, [r7, #38]	; 0x26
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	441a      	add	r2, r3
 80037ba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80037bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80037c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	4413      	add	r3, r2
 80037da:	881b      	ldrh	r3, [r3, #0]
 80037dc:	b29b      	uxth	r3, r3
 80037de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037e6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	441a      	add	r2, r3
 80037f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80037f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003804:	b29b      	uxth	r3, r3
 8003806:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	4413      	add	r3, r2
 8003812:	881b      	ldrh	r3, [r3, #0]
 8003814:	b29b      	uxth	r3, r3
 8003816:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800381a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800381e:	847b      	strh	r3, [r7, #34]	; 0x22
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	441a      	add	r2, r3
 800382a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800382c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003830:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003834:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800383c:	b29b      	uxth	r3, r3
 800383e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3734      	adds	r7, #52	; 0x34
 8003846:	46bd      	mov	sp, r7
 8003848:	bc80      	pop	{r7}
 800384a:	4770      	bx	lr

0800384c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b0c4      	sub	sp, #272	; 0x110
 8003850:	af00      	add	r7, sp, #0
 8003852:	1d3b      	adds	r3, r7, #4
 8003854:	6018      	str	r0, [r3, #0]
 8003856:	463b      	mov	r3, r7
 8003858:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800385a:	463b      	mov	r3, r7
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	785b      	ldrb	r3, [r3, #1]
 8003860:	2b01      	cmp	r3, #1
 8003862:	f040 8557 	bne.w	8004314 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003866:	463b      	mov	r3, r7
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	699a      	ldr	r2, [r3, #24]
 800386c:	463b      	mov	r3, r7
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	429a      	cmp	r2, r3
 8003874:	d905      	bls.n	8003882 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8003876:	463b      	mov	r3, r7
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003880:	e004      	b.n	800388c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8003882:	463b      	mov	r3, r7
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	699b      	ldr	r3, [r3, #24]
 8003888:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800388c:	463b      	mov	r3, r7
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	7b1b      	ldrb	r3, [r3, #12]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d12c      	bne.n	80038f0 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003896:	463b      	mov	r3, r7
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	6959      	ldr	r1, [r3, #20]
 800389c:	463b      	mov	r3, r7
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	88da      	ldrh	r2, [r3, #6]
 80038a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	1d38      	adds	r0, r7, #4
 80038aa:	6800      	ldr	r0, [r0, #0]
 80038ac:	f001 fa2c 	bl	8004d08 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80038b0:	1d3b      	adds	r3, r7, #4
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	617b      	str	r3, [r7, #20]
 80038b6:	1d3b      	adds	r3, r7, #4
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038be:	b29b      	uxth	r3, r3
 80038c0:	461a      	mov	r2, r3
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	4413      	add	r3, r2
 80038c6:	617b      	str	r3, [r7, #20]
 80038c8:	463b      	mov	r3, r7
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	011a      	lsls	r2, r3, #4
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	4413      	add	r3, r2
 80038d4:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80038d8:	f107 0310 	add.w	r3, r7, #16
 80038dc:	601a      	str	r2, [r3, #0]
 80038de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038e2:	b29a      	uxth	r2, r3
 80038e4:	f107 0310 	add.w	r3, r7, #16
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	801a      	strh	r2, [r3, #0]
 80038ec:	f000 bcdd 	b.w	80042aa <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80038f0:	463b      	mov	r3, r7
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	78db      	ldrb	r3, [r3, #3]
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	f040 8347 	bne.w	8003f8a <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80038fc:	463b      	mov	r3, r7
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	6a1a      	ldr	r2, [r3, #32]
 8003902:	463b      	mov	r3, r7
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	691b      	ldr	r3, [r3, #16]
 8003908:	429a      	cmp	r2, r3
 800390a:	f240 82eb 	bls.w	8003ee4 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800390e:	1d3b      	adds	r3, r7, #4
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	463b      	mov	r3, r7
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	4413      	add	r3, r2
 800391c:	881b      	ldrh	r3, [r3, #0]
 800391e:	b29b      	uxth	r3, r3
 8003920:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003924:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003928:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 800392c:	1d3b      	adds	r3, r7, #4
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	463b      	mov	r3, r7
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	441a      	add	r2, r3
 800393a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800393e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003942:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003946:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800394a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800394e:	b29b      	uxth	r3, r3
 8003950:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8003952:	463b      	mov	r3, r7
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	6a1a      	ldr	r2, [r3, #32]
 8003958:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800395c:	1ad2      	subs	r2, r2, r3
 800395e:	463b      	mov	r3, r7
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003964:	1d3b      	adds	r3, r7, #4
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	463b      	mov	r3, r7
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	4413      	add	r3, r2
 8003972:	881b      	ldrh	r3, [r3, #0]
 8003974:	b29b      	uxth	r3, r3
 8003976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800397a:	2b00      	cmp	r3, #0
 800397c:	f000 8159 	beq.w	8003c32 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003980:	1d3b      	adds	r3, r7, #4
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	637b      	str	r3, [r7, #52]	; 0x34
 8003986:	463b      	mov	r3, r7
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	785b      	ldrb	r3, [r3, #1]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d164      	bne.n	8003a5a <USB_EPStartXfer+0x20e>
 8003990:	1d3b      	adds	r3, r7, #4
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003996:	1d3b      	adds	r3, r7, #4
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800399e:	b29b      	uxth	r3, r3
 80039a0:	461a      	mov	r2, r3
 80039a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039a4:	4413      	add	r3, r2
 80039a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039a8:	463b      	mov	r3, r7
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	011a      	lsls	r2, r3, #4
 80039b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039b2:	4413      	add	r3, r2
 80039b4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80039b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80039ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d112      	bne.n	80039e8 <USB_EPStartXfer+0x19c>
 80039c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c4:	881b      	ldrh	r3, [r3, #0]
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80039cc:	b29a      	uxth	r2, r3
 80039ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d0:	801a      	strh	r2, [r3, #0]
 80039d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d4:	881b      	ldrh	r3, [r3, #0]
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039e0:	b29a      	uxth	r2, r3
 80039e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e4:	801a      	strh	r2, [r3, #0]
 80039e6:	e054      	b.n	8003a92 <USB_EPStartXfer+0x246>
 80039e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039ec:	2b3e      	cmp	r3, #62	; 0x3e
 80039ee:	d817      	bhi.n	8003a20 <USB_EPStartXfer+0x1d4>
 80039f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039f4:	085b      	lsrs	r3, r3, #1
 80039f6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80039fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d004      	beq.n	8003a10 <USB_EPStartXfer+0x1c4>
 8003a06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003a10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	029b      	lsls	r3, r3, #10
 8003a18:	b29a      	uxth	r2, r3
 8003a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a1c:	801a      	strh	r2, [r3, #0]
 8003a1e:	e038      	b.n	8003a92 <USB_EPStartXfer+0x246>
 8003a20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a24:	095b      	lsrs	r3, r3, #5
 8003a26:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003a2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a2e:	f003 031f 	and.w	r3, r3, #31
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d104      	bne.n	8003a40 <USB_EPStartXfer+0x1f4>
 8003a36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003a40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	029b      	lsls	r3, r3, #10
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a52:	b29a      	uxth	r2, r3
 8003a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a56:	801a      	strh	r2, [r3, #0]
 8003a58:	e01b      	b.n	8003a92 <USB_EPStartXfer+0x246>
 8003a5a:	463b      	mov	r3, r7
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	785b      	ldrb	r3, [r3, #1]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d116      	bne.n	8003a92 <USB_EPStartXfer+0x246>
 8003a64:	1d3b      	adds	r3, r7, #4
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	461a      	mov	r2, r3
 8003a70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a72:	4413      	add	r3, r2
 8003a74:	637b      	str	r3, [r7, #52]	; 0x34
 8003a76:	463b      	mov	r3, r7
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	011a      	lsls	r2, r3, #4
 8003a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a80:	4413      	add	r3, r2
 8003a82:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003a86:	633b      	str	r3, [r7, #48]	; 0x30
 8003a88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a90:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003a92:	463b      	mov	r3, r7
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	895b      	ldrh	r3, [r3, #10]
 8003a98:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003a9c:	463b      	mov	r3, r7
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6959      	ldr	r1, [r3, #20]
 8003aa2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003aac:	1d38      	adds	r0, r7, #4
 8003aae:	6800      	ldr	r0, [r0, #0]
 8003ab0:	f001 f92a 	bl	8004d08 <USB_WritePMA>
            ep->xfer_buff += len;
 8003ab4:	463b      	mov	r3, r7
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	695a      	ldr	r2, [r3, #20]
 8003aba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003abe:	441a      	add	r2, r3
 8003ac0:	463b      	mov	r3, r7
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003ac6:	463b      	mov	r3, r7
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	6a1a      	ldr	r2, [r3, #32]
 8003acc:	463b      	mov	r3, r7
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d909      	bls.n	8003aea <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8003ad6:	463b      	mov	r3, r7
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	6a1a      	ldr	r2, [r3, #32]
 8003adc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ae0:	1ad2      	subs	r2, r2, r3
 8003ae2:	463b      	mov	r3, r7
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	621a      	str	r2, [r3, #32]
 8003ae8:	e008      	b.n	8003afc <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8003aea:	463b      	mov	r3, r7
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	6a1b      	ldr	r3, [r3, #32]
 8003af0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8003af4:	463b      	mov	r3, r7
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2200      	movs	r2, #0
 8003afa:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003afc:	463b      	mov	r3, r7
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	785b      	ldrb	r3, [r3, #1]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d164      	bne.n	8003bd0 <USB_EPStartXfer+0x384>
 8003b06:	1d3b      	adds	r3, r7, #4
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	61fb      	str	r3, [r7, #28]
 8003b0c:	1d3b      	adds	r3, r7, #4
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	461a      	mov	r2, r3
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	4413      	add	r3, r2
 8003b1c:	61fb      	str	r3, [r7, #28]
 8003b1e:	463b      	mov	r3, r7
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	011a      	lsls	r2, r3, #4
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	4413      	add	r3, r2
 8003b2a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003b2e:	61bb      	str	r3, [r7, #24]
 8003b30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d112      	bne.n	8003b5e <USB_EPStartXfer+0x312>
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	881b      	ldrh	r3, [r3, #0]
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	801a      	strh	r2, [r3, #0]
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	881b      	ldrh	r3, [r3, #0]
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b56:	b29a      	uxth	r2, r3
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	801a      	strh	r2, [r3, #0]
 8003b5c:	e057      	b.n	8003c0e <USB_EPStartXfer+0x3c2>
 8003b5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b62:	2b3e      	cmp	r3, #62	; 0x3e
 8003b64:	d817      	bhi.n	8003b96 <USB_EPStartXfer+0x34a>
 8003b66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b6a:	085b      	lsrs	r3, r3, #1
 8003b6c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003b70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d004      	beq.n	8003b86 <USB_EPStartXfer+0x33a>
 8003b7c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003b80:	3301      	adds	r3, #1
 8003b82:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003b86:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	029b      	lsls	r3, r3, #10
 8003b8e:	b29a      	uxth	r2, r3
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	801a      	strh	r2, [r3, #0]
 8003b94:	e03b      	b.n	8003c0e <USB_EPStartXfer+0x3c2>
 8003b96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b9a:	095b      	lsrs	r3, r3, #5
 8003b9c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003ba0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ba4:	f003 031f 	and.w	r3, r3, #31
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d104      	bne.n	8003bb6 <USB_EPStartXfer+0x36a>
 8003bac:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003bb6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	029b      	lsls	r3, r3, #10
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bc8:	b29a      	uxth	r2, r3
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	801a      	strh	r2, [r3, #0]
 8003bce:	e01e      	b.n	8003c0e <USB_EPStartXfer+0x3c2>
 8003bd0:	463b      	mov	r3, r7
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	785b      	ldrb	r3, [r3, #1]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d119      	bne.n	8003c0e <USB_EPStartXfer+0x3c2>
 8003bda:	1d3b      	adds	r3, r7, #4
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	627b      	str	r3, [r7, #36]	; 0x24
 8003be0:	1d3b      	adds	r3, r7, #4
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	461a      	mov	r2, r3
 8003bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bee:	4413      	add	r3, r2
 8003bf0:	627b      	str	r3, [r7, #36]	; 0x24
 8003bf2:	463b      	mov	r3, r7
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	011a      	lsls	r2, r3, #4
 8003bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfc:	4413      	add	r3, r2
 8003bfe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003c02:	623b      	str	r3, [r7, #32]
 8003c04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c08:	b29a      	uxth	r2, r3
 8003c0a:	6a3b      	ldr	r3, [r7, #32]
 8003c0c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003c0e:	463b      	mov	r3, r7
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	891b      	ldrh	r3, [r3, #8]
 8003c14:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003c18:	463b      	mov	r3, r7
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	6959      	ldr	r1, [r3, #20]
 8003c1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003c28:	1d38      	adds	r0, r7, #4
 8003c2a:	6800      	ldr	r0, [r0, #0]
 8003c2c:	f001 f86c 	bl	8004d08 <USB_WritePMA>
 8003c30:	e33b      	b.n	80042aa <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003c32:	463b      	mov	r3, r7
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	785b      	ldrb	r3, [r3, #1]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d164      	bne.n	8003d06 <USB_EPStartXfer+0x4ba>
 8003c3c:	1d3b      	adds	r3, r7, #4
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c42:	1d3b      	adds	r3, r7, #4
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c50:	4413      	add	r3, r2
 8003c52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c54:	463b      	mov	r3, r7
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	011a      	lsls	r2, r3, #4
 8003c5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c5e:	4413      	add	r3, r2
 8003c60:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003c64:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d112      	bne.n	8003c94 <USB_EPStartXfer+0x448>
 8003c6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c70:	881b      	ldrh	r3, [r3, #0]
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c78:	b29a      	uxth	r2, r3
 8003c7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c7c:	801a      	strh	r2, [r3, #0]
 8003c7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c80:	881b      	ldrh	r3, [r3, #0]
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c8c:	b29a      	uxth	r2, r3
 8003c8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c90:	801a      	strh	r2, [r3, #0]
 8003c92:	e057      	b.n	8003d44 <USB_EPStartXfer+0x4f8>
 8003c94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c98:	2b3e      	cmp	r3, #62	; 0x3e
 8003c9a:	d817      	bhi.n	8003ccc <USB_EPStartXfer+0x480>
 8003c9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ca0:	085b      	lsrs	r3, r3, #1
 8003ca2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003ca6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d004      	beq.n	8003cbc <USB_EPStartXfer+0x470>
 8003cb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003cbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	029b      	lsls	r3, r3, #10
 8003cc4:	b29a      	uxth	r2, r3
 8003cc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cc8:	801a      	strh	r2, [r3, #0]
 8003cca:	e03b      	b.n	8003d44 <USB_EPStartXfer+0x4f8>
 8003ccc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cd0:	095b      	lsrs	r3, r3, #5
 8003cd2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003cd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cda:	f003 031f 	and.w	r3, r3, #31
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d104      	bne.n	8003cec <USB_EPStartXfer+0x4a0>
 8003ce2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003cec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	029b      	lsls	r3, r3, #10
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cfe:	b29a      	uxth	r2, r3
 8003d00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d02:	801a      	strh	r2, [r3, #0]
 8003d04:	e01e      	b.n	8003d44 <USB_EPStartXfer+0x4f8>
 8003d06:	463b      	mov	r3, r7
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	785b      	ldrb	r3, [r3, #1]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d119      	bne.n	8003d44 <USB_EPStartXfer+0x4f8>
 8003d10:	1d3b      	adds	r3, r7, #4
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	657b      	str	r3, [r7, #84]	; 0x54
 8003d16:	1d3b      	adds	r3, r7, #4
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	461a      	mov	r2, r3
 8003d22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d24:	4413      	add	r3, r2
 8003d26:	657b      	str	r3, [r7, #84]	; 0x54
 8003d28:	463b      	mov	r3, r7
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	011a      	lsls	r2, r3, #4
 8003d30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d32:	4413      	add	r3, r2
 8003d34:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003d38:	653b      	str	r3, [r7, #80]	; 0x50
 8003d3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d3e:	b29a      	uxth	r2, r3
 8003d40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d42:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003d44:	463b      	mov	r3, r7
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	891b      	ldrh	r3, [r3, #8]
 8003d4a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003d4e:	463b      	mov	r3, r7
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	6959      	ldr	r1, [r3, #20]
 8003d54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003d5e:	1d38      	adds	r0, r7, #4
 8003d60:	6800      	ldr	r0, [r0, #0]
 8003d62:	f000 ffd1 	bl	8004d08 <USB_WritePMA>
            ep->xfer_buff += len;
 8003d66:	463b      	mov	r3, r7
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	695a      	ldr	r2, [r3, #20]
 8003d6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d70:	441a      	add	r2, r3
 8003d72:	463b      	mov	r3, r7
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003d78:	463b      	mov	r3, r7
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	6a1a      	ldr	r2, [r3, #32]
 8003d7e:	463b      	mov	r3, r7
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d909      	bls.n	8003d9c <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8003d88:	463b      	mov	r3, r7
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	6a1a      	ldr	r2, [r3, #32]
 8003d8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d92:	1ad2      	subs	r2, r2, r3
 8003d94:	463b      	mov	r3, r7
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	621a      	str	r2, [r3, #32]
 8003d9a:	e008      	b.n	8003dae <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8003d9c:	463b      	mov	r3, r7
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6a1b      	ldr	r3, [r3, #32]
 8003da2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8003da6:	463b      	mov	r3, r7
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2200      	movs	r2, #0
 8003dac:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003dae:	1d3b      	adds	r3, r7, #4
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	647b      	str	r3, [r7, #68]	; 0x44
 8003db4:	463b      	mov	r3, r7
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	785b      	ldrb	r3, [r3, #1]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d164      	bne.n	8003e88 <USB_EPStartXfer+0x63c>
 8003dbe:	1d3b      	adds	r3, r7, #4
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dc4:	1d3b      	adds	r3, r7, #4
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	461a      	mov	r2, r3
 8003dd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dd2:	4413      	add	r3, r2
 8003dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dd6:	463b      	mov	r3, r7
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	011a      	lsls	r2, r3, #4
 8003dde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003de0:	4413      	add	r3, r2
 8003de2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003de6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003de8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d112      	bne.n	8003e16 <USB_EPStartXfer+0x5ca>
 8003df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df2:	881b      	ldrh	r3, [r3, #0]
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003dfa:	b29a      	uxth	r2, r3
 8003dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dfe:	801a      	strh	r2, [r3, #0]
 8003e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e02:	881b      	ldrh	r3, [r3, #0]
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e0e:	b29a      	uxth	r2, r3
 8003e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e12:	801a      	strh	r2, [r3, #0]
 8003e14:	e054      	b.n	8003ec0 <USB_EPStartXfer+0x674>
 8003e16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e1a:	2b3e      	cmp	r3, #62	; 0x3e
 8003e1c:	d817      	bhi.n	8003e4e <USB_EPStartXfer+0x602>
 8003e1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e22:	085b      	lsrs	r3, r3, #1
 8003e24:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003e28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e2c:	f003 0301 	and.w	r3, r3, #1
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d004      	beq.n	8003e3e <USB_EPStartXfer+0x5f2>
 8003e34:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003e38:	3301      	adds	r3, #1
 8003e3a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003e3e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	029b      	lsls	r3, r3, #10
 8003e46:	b29a      	uxth	r2, r3
 8003e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e4a:	801a      	strh	r2, [r3, #0]
 8003e4c:	e038      	b.n	8003ec0 <USB_EPStartXfer+0x674>
 8003e4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e52:	095b      	lsrs	r3, r3, #5
 8003e54:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003e58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e5c:	f003 031f 	and.w	r3, r3, #31
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d104      	bne.n	8003e6e <USB_EPStartXfer+0x622>
 8003e64:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003e6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	029b      	lsls	r3, r3, #10
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e80:	b29a      	uxth	r2, r3
 8003e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e84:	801a      	strh	r2, [r3, #0]
 8003e86:	e01b      	b.n	8003ec0 <USB_EPStartXfer+0x674>
 8003e88:	463b      	mov	r3, r7
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	785b      	ldrb	r3, [r3, #1]
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d116      	bne.n	8003ec0 <USB_EPStartXfer+0x674>
 8003e92:	1d3b      	adds	r3, r7, #4
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ea0:	4413      	add	r3, r2
 8003ea2:	647b      	str	r3, [r7, #68]	; 0x44
 8003ea4:	463b      	mov	r3, r7
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	781b      	ldrb	r3, [r3, #0]
 8003eaa:	011a      	lsls	r2, r3, #4
 8003eac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003eae:	4413      	add	r3, r2
 8003eb0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003eb4:	643b      	str	r3, [r7, #64]	; 0x40
 8003eb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003eba:	b29a      	uxth	r2, r3
 8003ebc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ebe:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003ec0:	463b      	mov	r3, r7
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	895b      	ldrh	r3, [r3, #10]
 8003ec6:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003eca:	463b      	mov	r3, r7
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	6959      	ldr	r1, [r3, #20]
 8003ed0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003eda:	1d38      	adds	r0, r7, #4
 8003edc:	6800      	ldr	r0, [r0, #0]
 8003ede:	f000 ff13 	bl	8004d08 <USB_WritePMA>
 8003ee2:	e1e2      	b.n	80042aa <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8003ee4:	463b      	mov	r3, r7
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	6a1b      	ldr	r3, [r3, #32]
 8003eea:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8003eee:	1d3b      	adds	r3, r7, #4
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	463b      	mov	r3, r7
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	4413      	add	r3, r2
 8003efc:	881b      	ldrh	r3, [r3, #0]
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8003f04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f08:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8003f0c:	1d3b      	adds	r3, r7, #4
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	463b      	mov	r3, r7
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	441a      	add	r2, r3
 8003f1a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003f1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003f32:	1d3b      	adds	r3, r7, #4
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	663b      	str	r3, [r7, #96]	; 0x60
 8003f38:	1d3b      	adds	r3, r7, #4
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	461a      	mov	r2, r3
 8003f44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f46:	4413      	add	r3, r2
 8003f48:	663b      	str	r3, [r7, #96]	; 0x60
 8003f4a:	463b      	mov	r3, r7
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	011a      	lsls	r2, r3, #4
 8003f52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f54:	4413      	add	r3, r2
 8003f56:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003f5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f64:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8003f66:	463b      	mov	r3, r7
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	891b      	ldrh	r3, [r3, #8]
 8003f6c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003f70:	463b      	mov	r3, r7
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	6959      	ldr	r1, [r3, #20]
 8003f76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003f80:	1d38      	adds	r0, r7, #4
 8003f82:	6800      	ldr	r0, [r0, #0]
 8003f84:	f000 fec0 	bl	8004d08 <USB_WritePMA>
 8003f88:	e18f      	b.n	80042aa <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003f8a:	1d3b      	adds	r3, r7, #4
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	463b      	mov	r3, r7
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	4413      	add	r3, r2
 8003f98:	881b      	ldrh	r3, [r3, #0]
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	f000 808f 	beq.w	80040c4 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003fa6:	1d3b      	adds	r3, r7, #4
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	67bb      	str	r3, [r7, #120]	; 0x78
 8003fac:	463b      	mov	r3, r7
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	785b      	ldrb	r3, [r3, #1]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d164      	bne.n	8004080 <USB_EPStartXfer+0x834>
 8003fb6:	1d3b      	adds	r3, r7, #4
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	673b      	str	r3, [r7, #112]	; 0x70
 8003fbc:	1d3b      	adds	r3, r7, #4
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fca:	4413      	add	r3, r2
 8003fcc:	673b      	str	r3, [r7, #112]	; 0x70
 8003fce:	463b      	mov	r3, r7
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	011a      	lsls	r2, r3, #4
 8003fd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fd8:	4413      	add	r3, r2
 8003fda:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003fde:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003fe0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d112      	bne.n	800400e <USB_EPStartXfer+0x7c2>
 8003fe8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fea:	881b      	ldrh	r3, [r3, #0]
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ff6:	801a      	strh	r2, [r3, #0]
 8003ff8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ffa:	881b      	ldrh	r3, [r3, #0]
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004002:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004006:	b29a      	uxth	r2, r3
 8004008:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800400a:	801a      	strh	r2, [r3, #0]
 800400c:	e054      	b.n	80040b8 <USB_EPStartXfer+0x86c>
 800400e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004012:	2b3e      	cmp	r3, #62	; 0x3e
 8004014:	d817      	bhi.n	8004046 <USB_EPStartXfer+0x7fa>
 8004016:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800401a:	085b      	lsrs	r3, r3, #1
 800401c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004020:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004024:	f003 0301 	and.w	r3, r3, #1
 8004028:	2b00      	cmp	r3, #0
 800402a:	d004      	beq.n	8004036 <USB_EPStartXfer+0x7ea>
 800402c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004030:	3301      	adds	r3, #1
 8004032:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800403a:	b29b      	uxth	r3, r3
 800403c:	029b      	lsls	r3, r3, #10
 800403e:	b29a      	uxth	r2, r3
 8004040:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004042:	801a      	strh	r2, [r3, #0]
 8004044:	e038      	b.n	80040b8 <USB_EPStartXfer+0x86c>
 8004046:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800404a:	095b      	lsrs	r3, r3, #5
 800404c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004050:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004054:	f003 031f 	and.w	r3, r3, #31
 8004058:	2b00      	cmp	r3, #0
 800405a:	d104      	bne.n	8004066 <USB_EPStartXfer+0x81a>
 800405c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004060:	3b01      	subs	r3, #1
 8004062:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800406a:	b29b      	uxth	r3, r3
 800406c:	029b      	lsls	r3, r3, #10
 800406e:	b29b      	uxth	r3, r3
 8004070:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004074:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004078:	b29a      	uxth	r2, r3
 800407a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800407c:	801a      	strh	r2, [r3, #0]
 800407e:	e01b      	b.n	80040b8 <USB_EPStartXfer+0x86c>
 8004080:	463b      	mov	r3, r7
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	785b      	ldrb	r3, [r3, #1]
 8004086:	2b01      	cmp	r3, #1
 8004088:	d116      	bne.n	80040b8 <USB_EPStartXfer+0x86c>
 800408a:	1d3b      	adds	r3, r7, #4
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004092:	b29b      	uxth	r3, r3
 8004094:	461a      	mov	r2, r3
 8004096:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004098:	4413      	add	r3, r2
 800409a:	67bb      	str	r3, [r7, #120]	; 0x78
 800409c:	463b      	mov	r3, r7
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	011a      	lsls	r2, r3, #4
 80040a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040a6:	4413      	add	r3, r2
 80040a8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80040ac:	677b      	str	r3, [r7, #116]	; 0x74
 80040ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040b2:	b29a      	uxth	r2, r3
 80040b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040b6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80040b8:	463b      	mov	r3, r7
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	895b      	ldrh	r3, [r3, #10]
 80040be:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 80040c2:	e097      	b.n	80041f4 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80040c4:	463b      	mov	r3, r7
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	785b      	ldrb	r3, [r3, #1]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d168      	bne.n	80041a0 <USB_EPStartXfer+0x954>
 80040ce:	1d3b      	adds	r3, r7, #4
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80040d6:	1d3b      	adds	r3, r7, #4
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040de:	b29b      	uxth	r3, r3
 80040e0:	461a      	mov	r2, r3
 80040e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80040e6:	4413      	add	r3, r2
 80040e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80040ec:	463b      	mov	r3, r7
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	011a      	lsls	r2, r3, #4
 80040f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80040f8:	4413      	add	r3, r2
 80040fa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80040fe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004100:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004104:	2b00      	cmp	r3, #0
 8004106:	d112      	bne.n	800412e <USB_EPStartXfer+0x8e2>
 8004108:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800410a:	881b      	ldrh	r3, [r3, #0]
 800410c:	b29b      	uxth	r3, r3
 800410e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004112:	b29a      	uxth	r2, r3
 8004114:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004116:	801a      	strh	r2, [r3, #0]
 8004118:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800411a:	881b      	ldrh	r3, [r3, #0]
 800411c:	b29b      	uxth	r3, r3
 800411e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004122:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004126:	b29a      	uxth	r2, r3
 8004128:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800412a:	801a      	strh	r2, [r3, #0]
 800412c:	e05d      	b.n	80041ea <USB_EPStartXfer+0x99e>
 800412e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004132:	2b3e      	cmp	r3, #62	; 0x3e
 8004134:	d817      	bhi.n	8004166 <USB_EPStartXfer+0x91a>
 8004136:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800413a:	085b      	lsrs	r3, r3, #1
 800413c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004140:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004144:	f003 0301 	and.w	r3, r3, #1
 8004148:	2b00      	cmp	r3, #0
 800414a:	d004      	beq.n	8004156 <USB_EPStartXfer+0x90a>
 800414c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004150:	3301      	adds	r3, #1
 8004152:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004156:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800415a:	b29b      	uxth	r3, r3
 800415c:	029b      	lsls	r3, r3, #10
 800415e:	b29a      	uxth	r2, r3
 8004160:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004162:	801a      	strh	r2, [r3, #0]
 8004164:	e041      	b.n	80041ea <USB_EPStartXfer+0x99e>
 8004166:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800416a:	095b      	lsrs	r3, r3, #5
 800416c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004170:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004174:	f003 031f 	and.w	r3, r3, #31
 8004178:	2b00      	cmp	r3, #0
 800417a:	d104      	bne.n	8004186 <USB_EPStartXfer+0x93a>
 800417c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004180:	3b01      	subs	r3, #1
 8004182:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004186:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800418a:	b29b      	uxth	r3, r3
 800418c:	029b      	lsls	r3, r3, #10
 800418e:	b29b      	uxth	r3, r3
 8004190:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004194:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004198:	b29a      	uxth	r2, r3
 800419a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800419c:	801a      	strh	r2, [r3, #0]
 800419e:	e024      	b.n	80041ea <USB_EPStartXfer+0x99e>
 80041a0:	463b      	mov	r3, r7
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	785b      	ldrb	r3, [r3, #1]
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d11f      	bne.n	80041ea <USB_EPStartXfer+0x99e>
 80041aa:	1d3b      	adds	r3, r7, #4
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80041b2:	1d3b      	adds	r3, r7, #4
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	461a      	mov	r2, r3
 80041be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80041c2:	4413      	add	r3, r2
 80041c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80041c8:	463b      	mov	r3, r7
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	011a      	lsls	r2, r3, #4
 80041d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80041d4:	4413      	add	r3, r2
 80041d6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80041da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80041de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041e2:	b29a      	uxth	r2, r3
 80041e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80041e8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80041ea:	463b      	mov	r3, r7
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	891b      	ldrh	r3, [r3, #8]
 80041f0:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80041f4:	463b      	mov	r3, r7
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	6959      	ldr	r1, [r3, #20]
 80041fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041fe:	b29b      	uxth	r3, r3
 8004200:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004204:	1d38      	adds	r0, r7, #4
 8004206:	6800      	ldr	r0, [r0, #0]
 8004208:	f000 fd7e 	bl	8004d08 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800420c:	463b      	mov	r3, r7
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	785b      	ldrb	r3, [r3, #1]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d122      	bne.n	800425c <USB_EPStartXfer+0xa10>
 8004216:	1d3b      	adds	r3, r7, #4
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	463b      	mov	r3, r7
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	4413      	add	r3, r2
 8004224:	881b      	ldrh	r3, [r3, #0]
 8004226:	b29b      	uxth	r3, r3
 8004228:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800422c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004230:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8004234:	1d3b      	adds	r3, r7, #4
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	463b      	mov	r3, r7
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	441a      	add	r2, r3
 8004242:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8004246:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800424a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800424e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004252:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004256:	b29b      	uxth	r3, r3
 8004258:	8013      	strh	r3, [r2, #0]
 800425a:	e026      	b.n	80042aa <USB_EPStartXfer+0xa5e>
 800425c:	463b      	mov	r3, r7
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	785b      	ldrb	r3, [r3, #1]
 8004262:	2b01      	cmp	r3, #1
 8004264:	d121      	bne.n	80042aa <USB_EPStartXfer+0xa5e>
 8004266:	1d3b      	adds	r3, r7, #4
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	463b      	mov	r3, r7
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	4413      	add	r3, r2
 8004274:	881b      	ldrh	r3, [r3, #0]
 8004276:	b29b      	uxth	r3, r3
 8004278:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800427c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004280:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8004284:	1d3b      	adds	r3, r7, #4
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	463b      	mov	r3, r7
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	441a      	add	r2, r3
 8004292:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8004296:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800429a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800429e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80042aa:	1d3b      	adds	r3, r7, #4
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	463b      	mov	r3, r7
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	4413      	add	r3, r2
 80042b8:	881b      	ldrh	r3, [r3, #0]
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	f107 020e 	add.w	r2, r7, #14
 80042c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042c8:	8013      	strh	r3, [r2, #0]
 80042ca:	f107 030e 	add.w	r3, r7, #14
 80042ce:	f107 020e 	add.w	r2, r7, #14
 80042d2:	8812      	ldrh	r2, [r2, #0]
 80042d4:	f082 0210 	eor.w	r2, r2, #16
 80042d8:	801a      	strh	r2, [r3, #0]
 80042da:	f107 030e 	add.w	r3, r7, #14
 80042de:	f107 020e 	add.w	r2, r7, #14
 80042e2:	8812      	ldrh	r2, [r2, #0]
 80042e4:	f082 0220 	eor.w	r2, r2, #32
 80042e8:	801a      	strh	r2, [r3, #0]
 80042ea:	1d3b      	adds	r3, r7, #4
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	463b      	mov	r3, r7
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	441a      	add	r2, r3
 80042f8:	f107 030e 	add.w	r3, r7, #14
 80042fc:	881b      	ldrh	r3, [r3, #0]
 80042fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004302:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004306:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800430a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800430e:	b29b      	uxth	r3, r3
 8004310:	8013      	strh	r3, [r2, #0]
 8004312:	e3b5      	b.n	8004a80 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004314:	463b      	mov	r3, r7
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	7b1b      	ldrb	r3, [r3, #12]
 800431a:	2b00      	cmp	r3, #0
 800431c:	f040 8090 	bne.w	8004440 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8004320:	463b      	mov	r3, r7
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	699a      	ldr	r2, [r3, #24]
 8004326:	463b      	mov	r3, r7
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	429a      	cmp	r2, r3
 800432e:	d90e      	bls.n	800434e <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8004330:	463b      	mov	r3, r7
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 800433a:	463b      	mov	r3, r7
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	699a      	ldr	r2, [r3, #24]
 8004340:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004344:	1ad2      	subs	r2, r2, r3
 8004346:	463b      	mov	r3, r7
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	619a      	str	r2, [r3, #24]
 800434c:	e008      	b.n	8004360 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 800434e:	463b      	mov	r3, r7
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	699b      	ldr	r3, [r3, #24]
 8004354:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8004358:	463b      	mov	r3, r7
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2200      	movs	r2, #0
 800435e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004360:	1d3b      	adds	r3, r7, #4
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004368:	1d3b      	adds	r3, r7, #4
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004370:	b29b      	uxth	r3, r3
 8004372:	461a      	mov	r2, r3
 8004374:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004378:	4413      	add	r3, r2
 800437a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800437e:	463b      	mov	r3, r7
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	011a      	lsls	r2, r3, #4
 8004386:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800438a:	4413      	add	r3, r2
 800438c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004390:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004394:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004398:	2b00      	cmp	r3, #0
 800439a:	d116      	bne.n	80043ca <USB_EPStartXfer+0xb7e>
 800439c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80043a0:	881b      	ldrh	r3, [r3, #0]
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80043a8:	b29a      	uxth	r2, r3
 80043aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80043ae:	801a      	strh	r2, [r3, #0]
 80043b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80043b4:	881b      	ldrh	r3, [r3, #0]
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043c0:	b29a      	uxth	r2, r3
 80043c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80043c6:	801a      	strh	r2, [r3, #0]
 80043c8:	e32c      	b.n	8004a24 <USB_EPStartXfer+0x11d8>
 80043ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043ce:	2b3e      	cmp	r3, #62	; 0x3e
 80043d0:	d818      	bhi.n	8004404 <USB_EPStartXfer+0xbb8>
 80043d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043d6:	085b      	lsrs	r3, r3, #1
 80043d8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80043dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043e0:	f003 0301 	and.w	r3, r3, #1
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d004      	beq.n	80043f2 <USB_EPStartXfer+0xba6>
 80043e8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80043ec:	3301      	adds	r3, #1
 80043ee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80043f2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	029b      	lsls	r3, r3, #10
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004400:	801a      	strh	r2, [r3, #0]
 8004402:	e30f      	b.n	8004a24 <USB_EPStartXfer+0x11d8>
 8004404:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004408:	095b      	lsrs	r3, r3, #5
 800440a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800440e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004412:	f003 031f 	and.w	r3, r3, #31
 8004416:	2b00      	cmp	r3, #0
 8004418:	d104      	bne.n	8004424 <USB_EPStartXfer+0xbd8>
 800441a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800441e:	3b01      	subs	r3, #1
 8004420:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004424:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004428:	b29b      	uxth	r3, r3
 800442a:	029b      	lsls	r3, r3, #10
 800442c:	b29b      	uxth	r3, r3
 800442e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004432:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004436:	b29a      	uxth	r2, r3
 8004438:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800443c:	801a      	strh	r2, [r3, #0]
 800443e:	e2f1      	b.n	8004a24 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004440:	463b      	mov	r3, r7
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	78db      	ldrb	r3, [r3, #3]
 8004446:	2b02      	cmp	r3, #2
 8004448:	f040 818f 	bne.w	800476a <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800444c:	463b      	mov	r3, r7
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	785b      	ldrb	r3, [r3, #1]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d175      	bne.n	8004542 <USB_EPStartXfer+0xcf6>
 8004456:	1d3b      	adds	r3, r7, #4
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800445e:	1d3b      	adds	r3, r7, #4
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004466:	b29b      	uxth	r3, r3
 8004468:	461a      	mov	r2, r3
 800446a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800446e:	4413      	add	r3, r2
 8004470:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004474:	463b      	mov	r3, r7
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	011a      	lsls	r2, r3, #4
 800447c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004480:	4413      	add	r3, r2
 8004482:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004486:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800448a:	463b      	mov	r3, r7
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d116      	bne.n	80044c2 <USB_EPStartXfer+0xc76>
 8004494:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004498:	881b      	ldrh	r3, [r3, #0]
 800449a:	b29b      	uxth	r3, r3
 800449c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80044a0:	b29a      	uxth	r2, r3
 80044a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80044a6:	801a      	strh	r2, [r3, #0]
 80044a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80044ac:	881b      	ldrh	r3, [r3, #0]
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044b8:	b29a      	uxth	r2, r3
 80044ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80044be:	801a      	strh	r2, [r3, #0]
 80044c0:	e065      	b.n	800458e <USB_EPStartXfer+0xd42>
 80044c2:	463b      	mov	r3, r7
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	2b3e      	cmp	r3, #62	; 0x3e
 80044ca:	d81a      	bhi.n	8004502 <USB_EPStartXfer+0xcb6>
 80044cc:	463b      	mov	r3, r7
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	085b      	lsrs	r3, r3, #1
 80044d4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80044d8:	463b      	mov	r3, r7
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	f003 0301 	and.w	r3, r3, #1
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d004      	beq.n	80044f0 <USB_EPStartXfer+0xca4>
 80044e6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80044ea:	3301      	adds	r3, #1
 80044ec:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80044f0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	029b      	lsls	r3, r3, #10
 80044f8:	b29a      	uxth	r2, r3
 80044fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80044fe:	801a      	strh	r2, [r3, #0]
 8004500:	e045      	b.n	800458e <USB_EPStartXfer+0xd42>
 8004502:	463b      	mov	r3, r7
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	691b      	ldr	r3, [r3, #16]
 8004508:	095b      	lsrs	r3, r3, #5
 800450a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800450e:	463b      	mov	r3, r7
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	691b      	ldr	r3, [r3, #16]
 8004514:	f003 031f 	and.w	r3, r3, #31
 8004518:	2b00      	cmp	r3, #0
 800451a:	d104      	bne.n	8004526 <USB_EPStartXfer+0xcda>
 800451c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004520:	3b01      	subs	r3, #1
 8004522:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004526:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800452a:	b29b      	uxth	r3, r3
 800452c:	029b      	lsls	r3, r3, #10
 800452e:	b29b      	uxth	r3, r3
 8004530:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004534:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004538:	b29a      	uxth	r2, r3
 800453a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800453e:	801a      	strh	r2, [r3, #0]
 8004540:	e025      	b.n	800458e <USB_EPStartXfer+0xd42>
 8004542:	463b      	mov	r3, r7
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	785b      	ldrb	r3, [r3, #1]
 8004548:	2b01      	cmp	r3, #1
 800454a:	d120      	bne.n	800458e <USB_EPStartXfer+0xd42>
 800454c:	1d3b      	adds	r3, r7, #4
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004554:	1d3b      	adds	r3, r7, #4
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800455c:	b29b      	uxth	r3, r3
 800455e:	461a      	mov	r2, r3
 8004560:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004564:	4413      	add	r3, r2
 8004566:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800456a:	463b      	mov	r3, r7
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	011a      	lsls	r2, r3, #4
 8004572:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004576:	4413      	add	r3, r2
 8004578:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800457c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004580:	463b      	mov	r3, r7
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	b29a      	uxth	r2, r3
 8004588:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800458c:	801a      	strh	r2, [r3, #0]
 800458e:	1d3b      	adds	r3, r7, #4
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004596:	463b      	mov	r3, r7
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	785b      	ldrb	r3, [r3, #1]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d175      	bne.n	800468c <USB_EPStartXfer+0xe40>
 80045a0:	1d3b      	adds	r3, r7, #4
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80045a8:	1d3b      	adds	r3, r7, #4
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	461a      	mov	r2, r3
 80045b4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80045b8:	4413      	add	r3, r2
 80045ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80045be:	463b      	mov	r3, r7
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	011a      	lsls	r2, r3, #4
 80045c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80045ca:	4413      	add	r3, r2
 80045cc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80045d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80045d4:	463b      	mov	r3, r7
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d116      	bne.n	800460c <USB_EPStartXfer+0xdc0>
 80045de:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80045e2:	881b      	ldrh	r3, [r3, #0]
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80045ea:	b29a      	uxth	r2, r3
 80045ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80045f0:	801a      	strh	r2, [r3, #0]
 80045f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80045f6:	881b      	ldrh	r3, [r3, #0]
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004602:	b29a      	uxth	r2, r3
 8004604:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004608:	801a      	strh	r2, [r3, #0]
 800460a:	e061      	b.n	80046d0 <USB_EPStartXfer+0xe84>
 800460c:	463b      	mov	r3, r7
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	2b3e      	cmp	r3, #62	; 0x3e
 8004614:	d81a      	bhi.n	800464c <USB_EPStartXfer+0xe00>
 8004616:	463b      	mov	r3, r7
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	691b      	ldr	r3, [r3, #16]
 800461c:	085b      	lsrs	r3, r3, #1
 800461e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004622:	463b      	mov	r3, r7
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	691b      	ldr	r3, [r3, #16]
 8004628:	f003 0301 	and.w	r3, r3, #1
 800462c:	2b00      	cmp	r3, #0
 800462e:	d004      	beq.n	800463a <USB_EPStartXfer+0xdee>
 8004630:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004634:	3301      	adds	r3, #1
 8004636:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800463a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800463e:	b29b      	uxth	r3, r3
 8004640:	029b      	lsls	r3, r3, #10
 8004642:	b29a      	uxth	r2, r3
 8004644:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004648:	801a      	strh	r2, [r3, #0]
 800464a:	e041      	b.n	80046d0 <USB_EPStartXfer+0xe84>
 800464c:	463b      	mov	r3, r7
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	095b      	lsrs	r3, r3, #5
 8004654:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004658:	463b      	mov	r3, r7
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	691b      	ldr	r3, [r3, #16]
 800465e:	f003 031f 	and.w	r3, r3, #31
 8004662:	2b00      	cmp	r3, #0
 8004664:	d104      	bne.n	8004670 <USB_EPStartXfer+0xe24>
 8004666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800466a:	3b01      	subs	r3, #1
 800466c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004674:	b29b      	uxth	r3, r3
 8004676:	029b      	lsls	r3, r3, #10
 8004678:	b29b      	uxth	r3, r3
 800467a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800467e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004682:	b29a      	uxth	r2, r3
 8004684:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004688:	801a      	strh	r2, [r3, #0]
 800468a:	e021      	b.n	80046d0 <USB_EPStartXfer+0xe84>
 800468c:	463b      	mov	r3, r7
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	785b      	ldrb	r3, [r3, #1]
 8004692:	2b01      	cmp	r3, #1
 8004694:	d11c      	bne.n	80046d0 <USB_EPStartXfer+0xe84>
 8004696:	1d3b      	adds	r3, r7, #4
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800469e:	b29b      	uxth	r3, r3
 80046a0:	461a      	mov	r2, r3
 80046a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80046a6:	4413      	add	r3, r2
 80046a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80046ac:	463b      	mov	r3, r7
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	011a      	lsls	r2, r3, #4
 80046b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80046b8:	4413      	add	r3, r2
 80046ba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80046be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80046c2:	463b      	mov	r3, r7
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	691b      	ldr	r3, [r3, #16]
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80046ce:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80046d0:	463b      	mov	r3, r7
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	69db      	ldr	r3, [r3, #28]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	f000 81a4 	beq.w	8004a24 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80046dc:	1d3b      	adds	r3, r7, #4
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	463b      	mov	r3, r7
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	4413      	add	r3, r2
 80046ea:	881b      	ldrh	r3, [r3, #0]
 80046ec:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80046f0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80046f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d005      	beq.n	8004708 <USB_EPStartXfer+0xebc>
 80046fc:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004704:	2b00      	cmp	r3, #0
 8004706:	d10d      	bne.n	8004724 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004708:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800470c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004710:	2b00      	cmp	r3, #0
 8004712:	f040 8187 	bne.w	8004a24 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004716:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800471a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800471e:	2b00      	cmp	r3, #0
 8004720:	f040 8180 	bne.w	8004a24 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8004724:	1d3b      	adds	r3, r7, #4
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	463b      	mov	r3, r7
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	4413      	add	r3, r2
 8004732:	881b      	ldrh	r3, [r3, #0]
 8004734:	b29b      	uxth	r3, r3
 8004736:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800473a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800473e:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8004742:	1d3b      	adds	r3, r7, #4
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	463b      	mov	r3, r7
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	441a      	add	r2, r3
 8004750:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8004754:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004758:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800475c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004760:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004764:	b29b      	uxth	r3, r3
 8004766:	8013      	strh	r3, [r2, #0]
 8004768:	e15c      	b.n	8004a24 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800476a:	463b      	mov	r3, r7
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	78db      	ldrb	r3, [r3, #3]
 8004770:	2b01      	cmp	r3, #1
 8004772:	f040 8155 	bne.w	8004a20 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8004776:	463b      	mov	r3, r7
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	699a      	ldr	r2, [r3, #24]
 800477c:	463b      	mov	r3, r7
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	429a      	cmp	r2, r3
 8004784:	d90e      	bls.n	80047a4 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8004786:	463b      	mov	r3, r7
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8004790:	463b      	mov	r3, r7
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	699a      	ldr	r2, [r3, #24]
 8004796:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800479a:	1ad2      	subs	r2, r2, r3
 800479c:	463b      	mov	r3, r7
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	619a      	str	r2, [r3, #24]
 80047a2:	e008      	b.n	80047b6 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 80047a4:	463b      	mov	r3, r7
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	699b      	ldr	r3, [r3, #24]
 80047aa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 80047ae:	463b      	mov	r3, r7
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2200      	movs	r2, #0
 80047b4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80047b6:	463b      	mov	r3, r7
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	785b      	ldrb	r3, [r3, #1]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d16f      	bne.n	80048a0 <USB_EPStartXfer+0x1054>
 80047c0:	1d3b      	adds	r3, r7, #4
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80047c8:	1d3b      	adds	r3, r7, #4
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	461a      	mov	r2, r3
 80047d4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80047d8:	4413      	add	r3, r2
 80047da:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80047de:	463b      	mov	r3, r7
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	011a      	lsls	r2, r3, #4
 80047e6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80047ea:	4413      	add	r3, r2
 80047ec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80047f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80047f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d116      	bne.n	800482a <USB_EPStartXfer+0xfde>
 80047fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004800:	881b      	ldrh	r3, [r3, #0]
 8004802:	b29b      	uxth	r3, r3
 8004804:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004808:	b29a      	uxth	r2, r3
 800480a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800480e:	801a      	strh	r2, [r3, #0]
 8004810:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004814:	881b      	ldrh	r3, [r3, #0]
 8004816:	b29b      	uxth	r3, r3
 8004818:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800481c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004820:	b29a      	uxth	r2, r3
 8004822:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004826:	801a      	strh	r2, [r3, #0]
 8004828:	e05f      	b.n	80048ea <USB_EPStartXfer+0x109e>
 800482a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800482e:	2b3e      	cmp	r3, #62	; 0x3e
 8004830:	d818      	bhi.n	8004864 <USB_EPStartXfer+0x1018>
 8004832:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004836:	085b      	lsrs	r3, r3, #1
 8004838:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800483c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004840:	f003 0301 	and.w	r3, r3, #1
 8004844:	2b00      	cmp	r3, #0
 8004846:	d004      	beq.n	8004852 <USB_EPStartXfer+0x1006>
 8004848:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800484c:	3301      	adds	r3, #1
 800484e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004852:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004856:	b29b      	uxth	r3, r3
 8004858:	029b      	lsls	r3, r3, #10
 800485a:	b29a      	uxth	r2, r3
 800485c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004860:	801a      	strh	r2, [r3, #0]
 8004862:	e042      	b.n	80048ea <USB_EPStartXfer+0x109e>
 8004864:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004868:	095b      	lsrs	r3, r3, #5
 800486a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800486e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004872:	f003 031f 	and.w	r3, r3, #31
 8004876:	2b00      	cmp	r3, #0
 8004878:	d104      	bne.n	8004884 <USB_EPStartXfer+0x1038>
 800487a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800487e:	3b01      	subs	r3, #1
 8004880:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004884:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004888:	b29b      	uxth	r3, r3
 800488a:	029b      	lsls	r3, r3, #10
 800488c:	b29b      	uxth	r3, r3
 800488e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004892:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004896:	b29a      	uxth	r2, r3
 8004898:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800489c:	801a      	strh	r2, [r3, #0]
 800489e:	e024      	b.n	80048ea <USB_EPStartXfer+0x109e>
 80048a0:	463b      	mov	r3, r7
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	785b      	ldrb	r3, [r3, #1]
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d11f      	bne.n	80048ea <USB_EPStartXfer+0x109e>
 80048aa:	1d3b      	adds	r3, r7, #4
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80048b2:	1d3b      	adds	r3, r7, #4
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	461a      	mov	r2, r3
 80048be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048c2:	4413      	add	r3, r2
 80048c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80048c8:	463b      	mov	r3, r7
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	011a      	lsls	r2, r3, #4
 80048d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048d4:	4413      	add	r3, r2
 80048d6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80048da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80048de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048e2:	b29a      	uxth	r2, r3
 80048e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80048e8:	801a      	strh	r2, [r3, #0]
 80048ea:	1d3b      	adds	r3, r7, #4
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80048f2:	463b      	mov	r3, r7
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	785b      	ldrb	r3, [r3, #1]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d16f      	bne.n	80049dc <USB_EPStartXfer+0x1190>
 80048fc:	1d3b      	adds	r3, r7, #4
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004904:	1d3b      	adds	r3, r7, #4
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800490c:	b29b      	uxth	r3, r3
 800490e:	461a      	mov	r2, r3
 8004910:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004914:	4413      	add	r3, r2
 8004916:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800491a:	463b      	mov	r3, r7
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	011a      	lsls	r2, r3, #4
 8004922:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004926:	4413      	add	r3, r2
 8004928:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800492c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004930:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004934:	2b00      	cmp	r3, #0
 8004936:	d116      	bne.n	8004966 <USB_EPStartXfer+0x111a>
 8004938:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800493c:	881b      	ldrh	r3, [r3, #0]
 800493e:	b29b      	uxth	r3, r3
 8004940:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004944:	b29a      	uxth	r2, r3
 8004946:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800494a:	801a      	strh	r2, [r3, #0]
 800494c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004950:	881b      	ldrh	r3, [r3, #0]
 8004952:	b29b      	uxth	r3, r3
 8004954:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004958:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800495c:	b29a      	uxth	r2, r3
 800495e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004962:	801a      	strh	r2, [r3, #0]
 8004964:	e05e      	b.n	8004a24 <USB_EPStartXfer+0x11d8>
 8004966:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800496a:	2b3e      	cmp	r3, #62	; 0x3e
 800496c:	d818      	bhi.n	80049a0 <USB_EPStartXfer+0x1154>
 800496e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004972:	085b      	lsrs	r3, r3, #1
 8004974:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004978:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800497c:	f003 0301 	and.w	r3, r3, #1
 8004980:	2b00      	cmp	r3, #0
 8004982:	d004      	beq.n	800498e <USB_EPStartXfer+0x1142>
 8004984:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004988:	3301      	adds	r3, #1
 800498a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800498e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004992:	b29b      	uxth	r3, r3
 8004994:	029b      	lsls	r3, r3, #10
 8004996:	b29a      	uxth	r2, r3
 8004998:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800499c:	801a      	strh	r2, [r3, #0]
 800499e:	e041      	b.n	8004a24 <USB_EPStartXfer+0x11d8>
 80049a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049a4:	095b      	lsrs	r3, r3, #5
 80049a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80049aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049ae:	f003 031f 	and.w	r3, r3, #31
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d104      	bne.n	80049c0 <USB_EPStartXfer+0x1174>
 80049b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049ba:	3b01      	subs	r3, #1
 80049bc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80049c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	029b      	lsls	r3, r3, #10
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049d2:	b29a      	uxth	r2, r3
 80049d4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80049d8:	801a      	strh	r2, [r3, #0]
 80049da:	e023      	b.n	8004a24 <USB_EPStartXfer+0x11d8>
 80049dc:	463b      	mov	r3, r7
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	785b      	ldrb	r3, [r3, #1]
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d11e      	bne.n	8004a24 <USB_EPStartXfer+0x11d8>
 80049e6:	1d3b      	adds	r3, r7, #4
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	461a      	mov	r2, r3
 80049f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80049f6:	4413      	add	r3, r2
 80049f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80049fc:	463b      	mov	r3, r7
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	011a      	lsls	r2, r3, #4
 8004a04:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004a08:	4413      	add	r3, r2
 8004a0a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a0e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004a12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a16:	b29a      	uxth	r2, r3
 8004a18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004a1c:	801a      	strh	r2, [r3, #0]
 8004a1e:	e001      	b.n	8004a24 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e02e      	b.n	8004a82 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004a24:	1d3b      	adds	r3, r7, #4
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	463b      	mov	r3, r7
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	4413      	add	r3, r2
 8004a32:	881b      	ldrh	r3, [r3, #0]
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a3e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8004a42:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8004a46:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004a4a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8004a4e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8004a52:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004a56:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8004a5a:	1d3b      	adds	r3, r7, #4
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	463b      	mov	r3, r7
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	441a      	add	r2, r3
 8004a68:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8004a6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004a80:	2300      	movs	r3, #0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	785b      	ldrb	r3, [r3, #1]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d020      	beq.n	8004ae0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	4413      	add	r3, r2
 8004aa8:	881b      	ldrh	r3, [r3, #0]
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ab0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ab4:	81bb      	strh	r3, [r7, #12]
 8004ab6:	89bb      	ldrh	r3, [r7, #12]
 8004ab8:	f083 0310 	eor.w	r3, r3, #16
 8004abc:	81bb      	strh	r3, [r7, #12]
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	441a      	add	r2, r3
 8004ac8:	89bb      	ldrh	r3, [r7, #12]
 8004aca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ace:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ad2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	8013      	strh	r3, [r2, #0]
 8004ade:	e01f      	b.n	8004b20 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	4413      	add	r3, r2
 8004aea:	881b      	ldrh	r3, [r3, #0]
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004af6:	81fb      	strh	r3, [r7, #14]
 8004af8:	89fb      	ldrh	r3, [r7, #14]
 8004afa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004afe:	81fb      	strh	r3, [r7, #14]
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	441a      	add	r2, r3
 8004b0a:	89fb      	ldrh	r3, [r7, #14]
 8004b0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3714      	adds	r7, #20
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bc80      	pop	{r7}
 8004b2a:	4770      	bx	lr

08004b2c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b087      	sub	sp, #28
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	7b1b      	ldrb	r3, [r3, #12]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	f040 809d 	bne.w	8004c7a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	785b      	ldrb	r3, [r3, #1]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d04c      	beq.n	8004be2 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	4413      	add	r3, r2
 8004b52:	881b      	ldrh	r3, [r3, #0]
 8004b54:	823b      	strh	r3, [r7, #16]
 8004b56:	8a3b      	ldrh	r3, [r7, #16]
 8004b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d01b      	beq.n	8004b98 <USB_EPClearStall+0x6c>
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	781b      	ldrb	r3, [r3, #0]
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	4413      	add	r3, r2
 8004b6a:	881b      	ldrh	r3, [r3, #0]
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b76:	81fb      	strh	r3, [r7, #14]
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	441a      	add	r2, r3
 8004b82:	89fb      	ldrh	r3, [r7, #14]
 8004b84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b90:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	78db      	ldrb	r3, [r3, #3]
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d06c      	beq.n	8004c7a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	4413      	add	r3, r2
 8004baa:	881b      	ldrh	r3, [r3, #0]
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bb6:	81bb      	strh	r3, [r7, #12]
 8004bb8:	89bb      	ldrh	r3, [r7, #12]
 8004bba:	f083 0320 	eor.w	r3, r3, #32
 8004bbe:	81bb      	strh	r3, [r7, #12]
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	441a      	add	r2, r3
 8004bca:	89bb      	ldrh	r3, [r7, #12]
 8004bcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	8013      	strh	r3, [r2, #0]
 8004be0:	e04b      	b.n	8004c7a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	4413      	add	r3, r2
 8004bec:	881b      	ldrh	r3, [r3, #0]
 8004bee:	82fb      	strh	r3, [r7, #22]
 8004bf0:	8afb      	ldrh	r3, [r7, #22]
 8004bf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d01b      	beq.n	8004c32 <USB_EPClearStall+0x106>
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	4413      	add	r3, r2
 8004c04:	881b      	ldrh	r3, [r3, #0]
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c10:	82bb      	strh	r3, [r7, #20]
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	441a      	add	r2, r3
 8004c1c:	8abb      	ldrh	r3, [r7, #20]
 8004c1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	4413      	add	r3, r2
 8004c3c:	881b      	ldrh	r3, [r3, #0]
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c48:	827b      	strh	r3, [r7, #18]
 8004c4a:	8a7b      	ldrh	r3, [r7, #18]
 8004c4c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004c50:	827b      	strh	r3, [r7, #18]
 8004c52:	8a7b      	ldrh	r3, [r7, #18]
 8004c54:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004c58:	827b      	strh	r3, [r7, #18]
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	441a      	add	r2, r3
 8004c64:	8a7b      	ldrh	r3, [r7, #18]
 8004c66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004c7a:	2300      	movs	r3, #0
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	371c      	adds	r7, #28
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bc80      	pop	{r7}
 8004c84:	4770      	bx	lr

08004c86 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8004c86:	b480      	push	{r7}
 8004c88:	b083      	sub	sp, #12
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
 8004c8e:	460b      	mov	r3, r1
 8004c90:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8004c92:	78fb      	ldrb	r3, [r7, #3]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d103      	bne.n	8004ca0 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2280      	movs	r2, #128	; 0x80
 8004c9c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	370c      	adds	r7, #12
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bc80      	pop	{r7}
 8004caa:	4770      	bx	lr

08004cac <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004cb4:	2300      	movs	r3, #0
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	370c      	adds	r7, #12
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bc80      	pop	{r7}
 8004cbe:	4770      	bx	lr

08004cc0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	370c      	adds	r7, #12
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bc80      	pop	{r7}
 8004cd2:	4770      	bx	lr

08004cd4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b085      	sub	sp, #20
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3714      	adds	r7, #20
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bc80      	pop	{r7}
 8004cf0:	4770      	bx	lr

08004cf2 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8004cf2:	b480      	push	{r7}
 8004cf4:	b083      	sub	sp, #12
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
 8004cfa:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	370c      	adds	r7, #12
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bc80      	pop	{r7}
 8004d06:	4770      	bx	lr

08004d08 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b08d      	sub	sp, #52	; 0x34
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	60b9      	str	r1, [r7, #8]
 8004d12:	4611      	mov	r1, r2
 8004d14:	461a      	mov	r2, r3
 8004d16:	460b      	mov	r3, r1
 8004d18:	80fb      	strh	r3, [r7, #6]
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004d1e:	88bb      	ldrh	r3, [r7, #4]
 8004d20:	3301      	adds	r3, #1
 8004d22:	085b      	lsrs	r3, r3, #1
 8004d24:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004d2e:	88fb      	ldrh	r3, [r7, #6]
 8004d30:	005a      	lsls	r2, r3, #1
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	4413      	add	r3, r2
 8004d36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d3a:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8004d3c:	6a3b      	ldr	r3, [r7, #32]
 8004d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d40:	e01e      	b.n	8004d80 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8004d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8004d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8004d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	021b      	lsls	r3, r3, #8
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	461a      	mov	r2, r3
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	b29a      	uxth	r2, r3
 8004d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d66:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8004d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d6a:	3302      	adds	r3, #2
 8004d6c:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8004d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d70:	3302      	adds	r3, #2
 8004d72:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8004d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d76:	3301      	adds	r3, #1
 8004d78:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8004d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d7c:	3b01      	subs	r3, #1
 8004d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d1dd      	bne.n	8004d42 <USB_WritePMA+0x3a>
  }
}
 8004d86:	bf00      	nop
 8004d88:	3734      	adds	r7, #52	; 0x34
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bc80      	pop	{r7}
 8004d8e:	4770      	bx	lr

08004d90 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b08b      	sub	sp, #44	; 0x2c
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	60b9      	str	r1, [r7, #8]
 8004d9a:	4611      	mov	r1, r2
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	460b      	mov	r3, r1
 8004da0:	80fb      	strh	r3, [r7, #6]
 8004da2:	4613      	mov	r3, r2
 8004da4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8004da6:	88bb      	ldrh	r3, [r7, #4]
 8004da8:	085b      	lsrs	r3, r3, #1
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004db6:	88fb      	ldrh	r3, [r7, #6]
 8004db8:	005a      	lsls	r2, r3, #1
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	4413      	add	r3, r2
 8004dbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004dc2:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	627b      	str	r3, [r7, #36]	; 0x24
 8004dc8:	e01b      	b.n	8004e02 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8004dca:	6a3b      	ldr	r3, [r7, #32]
 8004dcc:	881b      	ldrh	r3, [r3, #0]
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8004dd2:	6a3b      	ldr	r3, [r7, #32]
 8004dd4:	3302      	adds	r3, #2
 8004dd6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	b2da      	uxtb	r2, r3
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	3301      	adds	r3, #1
 8004de4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	0a1b      	lsrs	r3, r3, #8
 8004dea:	b2da      	uxtb	r2, r3
 8004dec:	69fb      	ldr	r3, [r7, #28]
 8004dee:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	3301      	adds	r3, #1
 8004df4:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8004df6:	6a3b      	ldr	r3, [r7, #32]
 8004df8:	3302      	adds	r3, #2
 8004dfa:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8004dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfe:	3b01      	subs	r3, #1
 8004e00:	627b      	str	r3, [r7, #36]	; 0x24
 8004e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d1e0      	bne.n	8004dca <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8004e08:	88bb      	ldrh	r3, [r7, #4]
 8004e0a:	f003 0301 	and.w	r3, r3, #1
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d007      	beq.n	8004e24 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8004e14:	6a3b      	ldr	r3, [r7, #32]
 8004e16:	881b      	ldrh	r3, [r3, #0]
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	b2da      	uxtb	r2, r3
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	701a      	strb	r2, [r3, #0]
  }
}
 8004e24:	bf00      	nop
 8004e26:	372c      	adds	r7, #44	; 0x2c
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bc80      	pop	{r7}
 8004e2c:	4770      	bx	lr

08004e2e <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004e2e:	b580      	push	{r7, lr}
 8004e30:	b082      	sub	sp, #8
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
 8004e36:	460b      	mov	r3, r1
 8004e38:	70fb      	strb	r3, [r7, #3]
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	7c1b      	ldrb	r3, [r3, #16]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d115      	bne.n	8004e6e <USBD_MSC_Init+0x40>
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8004e42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e46:	2202      	movs	r2, #2
 8004e48:	2101      	movs	r1, #1
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f002 fd67 	bl	800791e <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8004e58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e5c:	2202      	movs	r2, #2
 8004e5e:	2181      	movs	r1, #129	; 0x81
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f002 fd5c 	bl	800791e <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2201      	movs	r2, #1
 8004e6a:	62da      	str	r2, [r3, #44]	; 0x2c
 8004e6c:	e012      	b.n	8004e94 <USBD_MSC_Init+0x66>
  }
  else
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8004e6e:	2340      	movs	r3, #64	; 0x40
 8004e70:	2202      	movs	r2, #2
 8004e72:	2101      	movs	r1, #1
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f002 fd52 	bl	800791e <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8004e82:	2340      	movs	r3, #64	; 0x40
 8004e84:	2202      	movs	r2, #2
 8004e86:	2181      	movs	r1, #129	; 0x81
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f002 fd48 	bl	800791e <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2201      	movs	r2, #1
 8004e92:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  pdev->pClassData = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8004e94:	f44f 701b 	mov.w	r0, #620	; 0x26c
 8004e98:	f002 fe88 	bl	8007bac <USBD_static_malloc>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d101      	bne.n	8004eb2 <USBD_MSC_Init+0x84>
  {
    return USBD_FAIL;
 8004eae:	2302      	movs	r3, #2
 8004eb0:	e003      	b.n	8004eba <USBD_MSC_Init+0x8c>
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f000 f9da 	bl	800526c <MSC_BOT_Init>

  return USBD_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3708      	adds	r7, #8
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}

08004ec2 <USBD_MSC_DeInit>:
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev,
                         uint8_t cfgidx)
{
 8004ec2:	b580      	push	{r7, lr}
 8004ec4:	b082      	sub	sp, #8
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
 8004eca:	460b      	mov	r3, r1
 8004ecc:	70fb      	strb	r3, [r7, #3]
  /* Close MSC EPs */
  USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 8004ece:	2101      	movs	r1, #1
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f002 fd4a 	bl	800796a <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 8004ede:	2181      	movs	r1, #129	; 0x81
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f002 fd42 	bl	800796a <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f000 fa07 	bl	8005300 <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d009      	beq.n	8004f10 <USBD_MSC_DeInit+0x4e>
  {
    USBD_free(pdev->pClassData);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f02:	4618      	mov	r0, r3
 8004f04:	f002 fe5e 	bl	8007bc4 <USBD_static_free>
    pdev->pClassData  = NULL;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 8004f10:	2300      	movs	r3, #0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3708      	adds	r7, #8
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
	...

08004f1c <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b086      	sub	sp, #24
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f2c:	613b      	str	r3, [r7, #16]
  uint8_t ret = USBD_OK;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8004f32:	2300      	movs	r3, #0
 8004f34:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d04d      	beq.n	8004fde <USBD_MSC_Setup+0xc2>
 8004f42:	2b20      	cmp	r3, #32
 8004f44:	f040 8113 	bne.w	800516e <USBD_MSC_Setup+0x252>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	785b      	ldrb	r3, [r3, #1]
 8004f4c:	2bfe      	cmp	r3, #254	; 0xfe
 8004f4e:	d002      	beq.n	8004f56 <USBD_MSC_Setup+0x3a>
 8004f50:	2bff      	cmp	r3, #255	; 0xff
 8004f52:	d024      	beq.n	8004f9e <USBD_MSC_Setup+0x82>
 8004f54:	e03b      	b.n	8004fce <USBD_MSC_Setup+0xb2>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	885b      	ldrh	r3, [r3, #2]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d118      	bne.n	8004f90 <USBD_MSC_Setup+0x74>
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	88db      	ldrh	r3, [r3, #6]
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d114      	bne.n	8004f90 <USBD_MSC_Setup+0x74>
              ((req->bmRequest & 0x80U) == 0x80U))
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	da0f      	bge.n	8004f90 <USBD_MSC_Setup+0x74>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f76:	699b      	ldr	r3, [r3, #24]
 8004f78:	4798      	blx	r3
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	601a      	str	r2, [r3, #0]
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->max_lun, 1U);
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	2201      	movs	r2, #1
 8004f86:	4619      	mov	r1, r3
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f002 f983 	bl	8007294 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004f8e:	e025      	b.n	8004fdc <USBD_MSC_Setup+0xc0>
            USBD_CtlError(pdev, req);
 8004f90:	6839      	ldr	r1, [r7, #0]
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f002 f914 	bl	80071c0 <USBD_CtlError>
            ret = USBD_FAIL;
 8004f98:	2302      	movs	r3, #2
 8004f9a:	75fb      	strb	r3, [r7, #23]
          break;
 8004f9c:	e01e      	b.n	8004fdc <USBD_MSC_Setup+0xc0>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	885b      	ldrh	r3, [r3, #2]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d10c      	bne.n	8004fc0 <USBD_MSC_Setup+0xa4>
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	88db      	ldrh	r3, [r3, #6]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d108      	bne.n	8004fc0 <USBD_MSC_Setup+0xa4>
              ((req->bmRequest & 0x80U) != 0x80U))
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	db03      	blt.n	8004fc0 <USBD_MSC_Setup+0xa4>
          {
            MSC_BOT_Reset(pdev);
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f000 f987 	bl	80052cc <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004fbe:	e00d      	b.n	8004fdc <USBD_MSC_Setup+0xc0>
            USBD_CtlError(pdev, req);
 8004fc0:	6839      	ldr	r1, [r7, #0]
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f002 f8fc 	bl	80071c0 <USBD_CtlError>
            ret = USBD_FAIL;
 8004fc8:	2302      	movs	r3, #2
 8004fca:	75fb      	strb	r3, [r7, #23]
          break;
 8004fcc:	e006      	b.n	8004fdc <USBD_MSC_Setup+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8004fce:	6839      	ldr	r1, [r7, #0]
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f002 f8f5 	bl	80071c0 <USBD_CtlError>
          ret = USBD_FAIL;
 8004fd6:	2302      	movs	r3, #2
 8004fd8:	75fb      	strb	r3, [r7, #23]
          break;
 8004fda:	bf00      	nop
      }
      break;
 8004fdc:	e0ce      	b.n	800517c <USBD_MSC_Setup+0x260>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	785b      	ldrb	r3, [r3, #1]
 8004fe2:	2b0b      	cmp	r3, #11
 8004fe4:	f200 80bb 	bhi.w	800515e <USBD_MSC_Setup+0x242>
 8004fe8:	a201      	add	r2, pc, #4	; (adr r2, 8004ff0 <USBD_MSC_Setup+0xd4>)
 8004fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fee:	bf00      	nop
 8004ff0:	08005021 	.word	0x08005021
 8004ff4:	08005097 	.word	0x08005097
 8004ff8:	0800515f 	.word	0x0800515f
 8004ffc:	0800515f 	.word	0x0800515f
 8005000:	0800515f 	.word	0x0800515f
 8005004:	0800515f 	.word	0x0800515f
 8005008:	0800515f 	.word	0x0800515f
 800500c:	0800515f 	.word	0x0800515f
 8005010:	0800515f 	.word	0x0800515f
 8005014:	0800515f 	.word	0x0800515f
 8005018:	08005049 	.word	0x08005049
 800501c:	08005071 	.word	0x08005071
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005026:	2b03      	cmp	r3, #3
 8005028:	d107      	bne.n	800503a <USBD_MSC_Setup+0x11e>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800502a:	f107 030e 	add.w	r3, r7, #14
 800502e:	2202      	movs	r2, #2
 8005030:	4619      	mov	r1, r3
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f002 f92e 	bl	8007294 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005038:	e098      	b.n	800516c <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 800503a:	6839      	ldr	r1, [r7, #0]
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f002 f8bf 	bl	80071c0 <USBD_CtlError>
            ret = USBD_FAIL;
 8005042:	2302      	movs	r3, #2
 8005044:	75fb      	strb	r3, [r7, #23]
          break;
 8005046:	e091      	b.n	800516c <USBD_MSC_Setup+0x250>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800504e:	2b03      	cmp	r3, #3
 8005050:	d107      	bne.n	8005062 <USBD_MSC_Setup+0x146>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->interface, 1U);
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	3304      	adds	r3, #4
 8005056:	2201      	movs	r2, #1
 8005058:	4619      	mov	r1, r3
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f002 f91a 	bl	8007294 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005060:	e084      	b.n	800516c <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 8005062:	6839      	ldr	r1, [r7, #0]
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f002 f8ab 	bl	80071c0 <USBD_CtlError>
            ret = USBD_FAIL;
 800506a:	2302      	movs	r3, #2
 800506c:	75fb      	strb	r3, [r7, #23]
          break;
 800506e:	e07d      	b.n	800516c <USBD_MSC_Setup+0x250>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005076:	2b03      	cmp	r3, #3
 8005078:	d106      	bne.n	8005088 <USBD_MSC_Setup+0x16c>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	885b      	ldrh	r3, [r3, #2]
 800507e:	b2db      	uxtb	r3, r3
 8005080:	461a      	mov	r2, r3
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005086:	e071      	b.n	800516c <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 8005088:	6839      	ldr	r1, [r7, #0]
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f002 f898 	bl	80071c0 <USBD_CtlError>
            ret = USBD_FAIL;
 8005090:	2302      	movs	r3, #2
 8005092:	75fb      	strb	r3, [r7, #23]
          break;
 8005094:	e06a      	b.n	800516c <USBD_MSC_Setup+0x250>

        case USB_REQ_CLEAR_FEATURE:

          /* Flush the FIFO and Clear the stall status */
          USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	889b      	ldrh	r3, [r3, #4]
 800509a:	b2db      	uxtb	r3, r3
 800509c:	4619      	mov	r1, r3
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f002 fc82 	bl	80079a8 <USBD_LL_FlushEP>

          /* Reactivate the EP */
          USBD_LL_CloseEP(pdev, (uint8_t)req->wIndex);
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	889b      	ldrh	r3, [r3, #4]
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	4619      	mov	r1, r3
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f002 fc5c 	bl	800796a <USBD_LL_CloseEP>
          if ((((uint8_t)req->wIndex) & 0x80U) == 0x80U)
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	889b      	ldrh	r3, [r3, #4]
 80050b6:	b25b      	sxtb	r3, r3
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	da23      	bge.n	8005104 <USBD_MSC_Setup+0x1e8>
          {
            pdev->ep_in[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	889b      	ldrh	r3, [r3, #4]
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	f003 020f 	and.w	r2, r3, #15
 80050c6:	6879      	ldr	r1, [r7, #4]
 80050c8:	4613      	mov	r3, r2
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	4413      	add	r3, r2
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	440b      	add	r3, r1
 80050d2:	3318      	adds	r3, #24
 80050d4:	2200      	movs	r2, #0
 80050d6:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	7c1b      	ldrb	r3, [r3, #16]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d107      	bne.n	80050f0 <USBD_MSC_Setup+0x1d4>
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 80050e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050e4:	2202      	movs	r2, #2
 80050e6:	2181      	movs	r1, #129	; 0x81
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f002 fc18 	bl	800791e <USBD_LL_OpenEP>
 80050ee:	e005      	b.n	80050fc <USBD_MSC_Setup+0x1e0>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 80050f0:	2340      	movs	r3, #64	; 0x40
 80050f2:	2202      	movs	r2, #2
 80050f4:	2181      	movs	r1, #129	; 0x81
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f002 fc11 	bl	800791e <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	62da      	str	r2, [r3, #44]	; 0x2c
 8005102:	e024      	b.n	800514e <USBD_MSC_Setup+0x232>
          }
          else
          {
            pdev->ep_out[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	889b      	ldrh	r3, [r3, #4]
 8005108:	b2db      	uxtb	r3, r3
 800510a:	f003 020f 	and.w	r2, r3, #15
 800510e:	6879      	ldr	r1, [r7, #4]
 8005110:	4613      	mov	r3, r2
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	4413      	add	r3, r2
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	440b      	add	r3, r1
 800511a:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800511e:	2200      	movs	r2, #0
 8005120:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	7c1b      	ldrb	r3, [r3, #16]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d107      	bne.n	800513a <USBD_MSC_Setup+0x21e>
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 800512a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800512e:	2202      	movs	r2, #2
 8005130:	2101      	movs	r1, #1
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f002 fbf3 	bl	800791e <USBD_LL_OpenEP>
 8005138:	e005      	b.n	8005146 <USBD_MSC_Setup+0x22a>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 800513a:	2340      	movs	r3, #64	; 0x40
 800513c:	2202      	movs	r2, #2
 800513e:	2101      	movs	r1, #1
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f002 fbec 	bl	800791e <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2201      	movs	r2, #1
 800514a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
          }

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	889b      	ldrh	r3, [r3, #4]
 8005152:	b2db      	uxtb	r3, r3
 8005154:	4619      	mov	r1, r3
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 fa50 	bl	80055fc <MSC_BOT_CplClrFeature>
          break;
 800515c:	e006      	b.n	800516c <USBD_MSC_Setup+0x250>

        default:
          USBD_CtlError(pdev, req);
 800515e:	6839      	ldr	r1, [r7, #0]
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f002 f82d 	bl	80071c0 <USBD_CtlError>
          ret = USBD_FAIL;
 8005166:	2302      	movs	r3, #2
 8005168:	75fb      	strb	r3, [r7, #23]
          break;
 800516a:	bf00      	nop
      }
      break;
 800516c:	e006      	b.n	800517c <USBD_MSC_Setup+0x260>

    default:
      USBD_CtlError(pdev, req);
 800516e:	6839      	ldr	r1, [r7, #0]
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f002 f825 	bl	80071c0 <USBD_CtlError>
      ret = USBD_FAIL;
 8005176:	2302      	movs	r3, #2
 8005178:	75fb      	strb	r3, [r7, #23]
      break;
 800517a:	bf00      	nop
  }

  return ret;
 800517c:	7dfb      	ldrb	r3, [r7, #23]
}
 800517e:	4618      	mov	r0, r3
 8005180:	3718      	adds	r7, #24
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop

08005188 <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	460b      	mov	r3, r1
 8005192:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8005194:	78fb      	ldrb	r3, [r7, #3]
 8005196:	4619      	mov	r1, r3
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f000 f8c1 	bl	8005320 <MSC_BOT_DataIn>

  return USBD_OK;
 800519e:	2300      	movs	r3, #0
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3708      	adds	r7, #8
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b082      	sub	sp, #8
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	460b      	mov	r3, r1
 80051b2:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 80051b4:	78fb      	ldrb	r3, [r7, #3]
 80051b6:	4619      	mov	r1, r3
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f000 f8e2 	bl	8005382 <MSC_BOT_DataOut>

  return USBD_OK;
 80051be:	2300      	movs	r3, #0
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3708      	adds	r7, #8
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgHSDesc);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2220      	movs	r2, #32
 80051d4:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 80051d6:	4b03      	ldr	r3, [pc, #12]	; (80051e4 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 80051d8:	4618      	mov	r0, r3
 80051da:	370c      	adds	r7, #12
 80051dc:	46bd      	mov	sp, r7
 80051de:	bc80      	pop	{r7}
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop
 80051e4:	20000044 	.word	0x20000044

080051e8 <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgFSDesc);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2220      	movs	r2, #32
 80051f4:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 80051f6:	4b03      	ldr	r3, [pc, #12]	; (8005204 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bc80      	pop	{r7}
 8005200:	4770      	bx	lr
 8005202:	bf00      	nop
 8005204:	20000064 	.word	0x20000064

08005208 <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_OtherSpeedCfgDesc);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2220      	movs	r2, #32
 8005214:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 8005216:	4b03      	ldr	r3, [pc, #12]	; (8005224 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005218:	4618      	mov	r0, r3
 800521a:	370c      	adds	r7, #12
 800521c:	46bd      	mov	sp, r7
 800521e:	bc80      	pop	{r7}
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	20000084 	.word	0x20000084

08005228 <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_DeviceQualifierDesc);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	220a      	movs	r2, #10
 8005234:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8005236:	4b03      	ldr	r3, [pc, #12]	; (8005244 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005238:	4618      	mov	r0, r3
 800523a:	370c      	adds	r7, #12
 800523c:	46bd      	mov	sp, r7
 800523e:	bc80      	pop	{r7}
 8005240:	4770      	bx	lr
 8005242:	bf00      	nop
 8005244:	200000a4 	.word	0x200000a4

08005248 <USBD_MSC_RegisterStorage>:
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev,
                                 USBD_StorageTypeDef *fops)
{
 8005248:	b480      	push	{r7}
 800524a:	b083      	sub	sp, #12
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
  if (fops != NULL)
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d003      	beq.n	8005260 <USBD_MSC_RegisterStorage+0x18>
  {
    pdev->pUserData = fops;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	683a      	ldr	r2, [r7, #0]
 800525c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return USBD_OK;
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	370c      	adds	r7, #12
 8005266:	46bd      	mov	sp, r7
 8005268:	bc80      	pop	{r7}
 800526a:	4770      	bx	lr

0800526c <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef  *pdev)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800527a:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2200      	movs	r2, #0
 8005280:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2200      	movs	r2, #0
 8005286:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2200      	movs	r2, #0
 800528c:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  hmsc->scsi_sense_head = 0U;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2200      	movs	r2, #0
 8005294:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2000      	movs	r0, #0
 80052a2:	4798      	blx	r3

  USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 80052a4:	2101      	movs	r1, #1
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f002 fb7e 	bl	80079a8 <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 80052ac:	2181      	movs	r1, #129	; 0x81
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f002 fb7a 	bl	80079a8 <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 80052ba:	231f      	movs	r3, #31
 80052bc:	2101      	movs	r1, #1
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f002 fc3d 	bl	8007b3e <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 80052c4:	bf00      	nop
 80052c6:	3710      	adds	r7, #16
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}

080052cc <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef  *pdev)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b084      	sub	sp, #16
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052da:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2200      	movs	r2, #0
 80052e0:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2201      	movs	r2, #1
 80052e6:	725a      	strb	r2, [r3, #9]

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 80052ee:	231f      	movs	r3, #31
 80052f0:	2101      	movs	r1, #1
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f002 fc23 	bl	8007b3e <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 80052f8:	bf00      	nop
 80052fa:	3710      	adds	r7, #16
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8005300:	b480      	push	{r7}
 8005302:	b085      	sub	sp, #20
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800530e:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2200      	movs	r2, #0
 8005314:	721a      	strb	r2, [r3, #8]
}
 8005316:	bf00      	nop
 8005318:	3714      	adds	r7, #20
 800531a:	46bd      	mov	sp, r7
 800531c:	bc80      	pop	{r7}
 800531e:	4770      	bx	lr

08005320 <MSC_BOT_DataIn>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef  *pdev,
                    uint8_t epnum)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	460b      	mov	r3, r1
 800532a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005332:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	7a1b      	ldrb	r3, [r3, #8]
 8005338:	2b02      	cmp	r3, #2
 800533a:	d004      	beq.n	8005346 <MSC_BOT_DataIn+0x26>
 800533c:	2b02      	cmp	r3, #2
 800533e:	db19      	blt.n	8005374 <MSC_BOT_DataIn+0x54>
 8005340:	2b04      	cmp	r3, #4
 8005342:	dc17      	bgt.n	8005374 <MSC_BOT_DataIn+0x54>
 8005344:	e011      	b.n	800536a <MSC_BOT_DataIn+0x4a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8005352:	461a      	mov	r2, r3
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f000 f979 	bl	800564c <SCSI_ProcessCmd>
 800535a:	4603      	mov	r3, r0
 800535c:	2b00      	cmp	r3, #0
 800535e:	da0b      	bge.n	8005378 <MSC_BOT_DataIn+0x58>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8005360:	2101      	movs	r1, #1
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 f8f0 	bl	8005548 <MSC_BOT_SendCSW>
      }
      break;
 8005368:	e006      	b.n	8005378 <MSC_BOT_DataIn+0x58>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800536a:	2100      	movs	r1, #0
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f000 f8eb 	bl	8005548 <MSC_BOT_SendCSW>
      break;
 8005372:	e002      	b.n	800537a <MSC_BOT_DataIn+0x5a>

    default:
      break;
 8005374:	bf00      	nop
 8005376:	e000      	b.n	800537a <MSC_BOT_DataIn+0x5a>
      break;
 8005378:	bf00      	nop
  }
}
 800537a:	bf00      	nop
 800537c:	3710      	adds	r7, #16
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}

08005382 <MSC_BOT_DataOut>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef  *pdev,
                     uint8_t epnum)
{
 8005382:	b580      	push	{r7, lr}
 8005384:	b084      	sub	sp, #16
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
 800538a:	460b      	mov	r3, r1
 800538c:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005394:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	7a1b      	ldrb	r3, [r3, #8]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d002      	beq.n	80053a4 <MSC_BOT_DataOut+0x22>
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d004      	beq.n	80053ac <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 80053a2:	e015      	b.n	80053d0 <MSC_BOT_DataOut+0x4e>
      MSC_BOT_CBW_Decode(pdev);
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f000 f817 	bl	80053d8 <MSC_BOT_CBW_Decode>
      break;
 80053aa:	e011      	b.n	80053d0 <MSC_BOT_DataOut+0x4e>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80053b8:	461a      	mov	r2, r3
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 f946 	bl	800564c <SCSI_ProcessCmd>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	da03      	bge.n	80053ce <MSC_BOT_DataOut+0x4c>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80053c6:	2101      	movs	r1, #1
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f000 f8bd 	bl	8005548 <MSC_BOT_SendCSW>
      break;
 80053ce:	bf00      	nop
  }
}
 80053d0:	bf00      	nop
 80053d2:	3710      	adds	r7, #16
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}

080053d8 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef  *pdev)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053e6:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8005400:	2101      	movs	r1, #1
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f002 fbbe 	bl	8007b84 <USBD_LL_GetRxDataSize>
 8005408:	4603      	mov	r3, r0
 800540a:	2b1f      	cmp	r3, #31
 800540c:	d114      	bne.n	8005438 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8005414:	4a32      	ldr	r2, [pc, #200]	; (80054e0 <MSC_BOT_CBW_Decode+0x108>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d10e      	bne.n	8005438 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) ||
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f893 3219 	ldrb.w	r3, [r3, #537]	; 0x219
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8005420:	2b01      	cmp	r3, #1
 8005422:	d809      	bhi.n	8005438 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
      (hmsc->cbw.bLUN > 1U) ||
 800542a:	2b00      	cmp	r3, #0
 800542c:	d004      	beq.n	8005438 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
 8005434:	2b10      	cmp	r3, #16
 8005436:	d90e      	bls.n	8005456 <MSC_BOT_CBW_Decode+0x7e>
  {

    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800543e:	2320      	movs	r3, #32
 8005440:	2205      	movs	r2, #5
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 fc48 	bl	8005cd8 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2202      	movs	r2, #2
 800544c:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 f8a6 	bl	80055a0 <MSC_BOT_Abort>
 8005454:	e041      	b.n	80054da <MSC_BOT_CBW_Decode+0x102>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8005462:	461a      	mov	r2, r3
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f000 f8f1 	bl	800564c <SCSI_ProcessCmd>
 800546a:	4603      	mov	r3, r0
 800546c:	2b00      	cmp	r3, #0
 800546e:	da0c      	bge.n	800548a <MSC_BOT_CBW_Decode+0xb2>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	7a1b      	ldrb	r3, [r3, #8]
 8005474:	2b05      	cmp	r3, #5
 8005476:	d104      	bne.n	8005482 <MSC_BOT_CBW_Decode+0xaa>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8005478:	2101      	movs	r1, #1
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 f864 	bl	8005548 <MSC_BOT_SendCSW>
 8005480:	e02b      	b.n	80054da <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 f88c 	bl	80055a0 <MSC_BOT_Abort>
 8005488:	e027      	b.n	80054da <MSC_BOT_CBW_Decode+0x102>
      }
    }
    /*Burst xfer handled internally*/
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	7a1b      	ldrb	r3, [r3, #8]
 800548e:	2b02      	cmp	r3, #2
 8005490:	d022      	beq.n	80054d8 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8005496:	2b01      	cmp	r3, #1
 8005498:	d01e      	beq.n	80054d8 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800549e:	2b03      	cmp	r3, #3
 80054a0:	d01a      	beq.n	80054d8 <MSC_BOT_CBW_Decode+0x100>
    {
      if (hmsc->bot_data_length > 0U)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	895b      	ldrh	r3, [r3, #10]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d009      	beq.n	80054be <MSC_BOT_CBW_Decode+0xe6>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f103 010c 	add.w	r1, r3, #12
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	895b      	ldrh	r3, [r3, #10]
 80054b4:	461a      	mov	r2, r3
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 f814 	bl	80054e4 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 80054bc:	e00d      	b.n	80054da <MSC_BOT_CBW_Decode+0x102>
      }
      else if (hmsc->bot_data_length == 0U)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	895b      	ldrh	r3, [r3, #10]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d104      	bne.n	80054d0 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80054c6:	2100      	movs	r1, #0
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f000 f83d 	bl	8005548 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 80054ce:	e004      	b.n	80054da <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f000 f865 	bl	80055a0 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 80054d6:	e000      	b.n	80054da <MSC_BOT_CBW_Decode+0x102>
      }
    }
    else
    {
      return;
 80054d8:	bf00      	nop
    }
  }
}
 80054da:	3710      	adds	r7, #16
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	43425355 	.word	0x43425355

080054e4 <MSC_BOT_SendData>:
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                              uint16_t len)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b086      	sub	sp, #24
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	60b9      	str	r1, [r7, #8]
 80054ee:	4613      	mov	r3, r2
 80054f0:	80fb      	strh	r3, [r7, #6]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054f8:	617b      	str	r3, [r7, #20]

  uint16_t length = (uint16_t)MIN(hmsc->cbw.dDataLength, len);
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005500:	88fb      	ldrh	r3, [r7, #6]
 8005502:	429a      	cmp	r2, r3
 8005504:	d204      	bcs.n	8005510 <MSC_BOT_SendData+0x2c>
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800550c:	b29b      	uxth	r3, r3
 800550e:	e000      	b.n	8005512 <MSC_BOT_SendData+0x2e>
 8005510:	88fb      	ldrh	r3, [r7, #6]
 8005512:	827b      	strh	r3, [r7, #18]

  hmsc->csw.dDataResidue -= len;
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 800551a:	88fb      	ldrh	r3, [r7, #6]
 800551c:	1ad2      	subs	r2, r2, r3
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	2200      	movs	r2, #0
 8005528:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	2204      	movs	r2, #4
 8005530:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 8005532:	8a7b      	ldrh	r3, [r7, #18]
 8005534:	68ba      	ldr	r2, [r7, #8]
 8005536:	2181      	movs	r1, #129	; 0x81
 8005538:	68f8      	ldr	r0, [r7, #12]
 800553a:	f002 fadd 	bl	8007af8 <USBD_LL_Transmit>
}
 800553e:	bf00      	nop
 8005540:	3718      	adds	r7, #24
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
	...

08005548 <MSC_BOT_SendCSW>:
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef  *pdev,
                      uint8_t CSW_Status)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	460b      	mov	r3, r1
 8005552:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800555a:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	4a0f      	ldr	r2, [pc, #60]	; (800559c <MSC_BOT_SendCSW+0x54>)
 8005560:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
  hmsc->csw.bStatus = CSW_Status;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	78fa      	ldrb	r2, [r7, #3]
 8005568:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_IDLE;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2200      	movs	r2, #0
 8005570:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)(void *)&hmsc->csw,
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f503 720b 	add.w	r2, r3, #556	; 0x22c
 8005578:	230d      	movs	r3, #13
 800557a:	2181      	movs	r1, #129	; 0x81
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f002 fabb 	bl	8007af8 <USBD_LL_Transmit>
                   USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8005588:	231f      	movs	r3, #31
 800558a:	2101      	movs	r1, #1
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f002 fad6 	bl	8007b3e <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 8005592:	bf00      	nop
 8005594:	3710      	adds	r7, #16
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}
 800559a:	bf00      	nop
 800559c:	53425355 	.word	0x53425355

080055a0 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef  *pdev)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b084      	sub	sp, #16
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055ae:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d10c      	bne.n	80055d4 <MSC_BOT_Abort+0x34>
      (hmsc->cbw.dDataLength != 0U) &&
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
  if ((hmsc->cbw.bmFlags == 0U) &&
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d007      	beq.n	80055d4 <MSC_BOT_Abort+0x34>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d103      	bne.n	80055d4 <MSC_BOT_Abort+0x34>
  {
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 80055cc:	2101      	movs	r1, #1
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f002 fa09 	bl	80079e6 <USBD_LL_StallEP>
  }

  USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 80055d4:	2181      	movs	r1, #129	; 0x81
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f002 fa05 	bl	80079e6 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	7a5b      	ldrb	r3, [r3, #9]
 80055e0:	2b02      	cmp	r3, #2
 80055e2:	d107      	bne.n	80055f4 <MSC_BOT_Abort+0x54>
  {
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 80055ea:	231f      	movs	r3, #31
 80055ec:	2101      	movs	r1, #1
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f002 faa5 	bl	8007b3e <USBD_LL_PrepareReceive>
                           USBD_BOT_CBW_LENGTH);
  }
}
 80055f4:	bf00      	nop
 80055f6:	3710      	adds	r7, #16
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b084      	sub	sp, #16
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	460b      	mov	r3, r1
 8005606:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800560e:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	7a5b      	ldrb	r3, [r3, #9]
 8005614:	2b02      	cmp	r3, #2
 8005616:	d107      	bne.n	8005628 <MSC_BOT_CplClrFeature+0x2c>
  {
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8005618:	2181      	movs	r1, #129	; 0x81
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f002 f9e3 	bl	80079e6 <USBD_LL_StallEP>
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2200      	movs	r2, #0
 8005624:	725a      	strb	r2, [r3, #9]
 8005626:	e00d      	b.n	8005644 <MSC_BOT_CplClrFeature+0x48>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8005628:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800562c:	2b00      	cmp	r3, #0
 800562e:	da08      	bge.n	8005642 <MSC_BOT_CplClrFeature+0x46>
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	7a5b      	ldrb	r3, [r3, #9]
 8005634:	2b01      	cmp	r3, #1
 8005636:	d004      	beq.n	8005642 <MSC_BOT_CplClrFeature+0x46>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8005638:	2101      	movs	r1, #1
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f7ff ff84 	bl	8005548 <MSC_BOT_SendCSW>
 8005640:	e000      	b.n	8005644 <MSC_BOT_CplClrFeature+0x48>
  }
  else
  {
    return;
 8005642:	bf00      	nop
  }
}
 8005644:	3710      	adds	r7, #16
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
	...

0800564c <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b084      	sub	sp, #16
 8005650:	af00      	add	r7, sp, #0
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	460b      	mov	r3, r1
 8005656:	607a      	str	r2, [r7, #4]
 8005658:	72fb      	strb	r3, [r7, #11]
  switch (cmd[0])
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	2b5a      	cmp	r3, #90	; 0x5a
 8005660:	f200 810e 	bhi.w	8005880 <SCSI_ProcessCmd+0x234>
 8005664:	a201      	add	r2, pc, #4	; (adr r2, 800566c <SCSI_ProcessCmd+0x20>)
 8005666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800566a:	bf00      	nop
 800566c:	080057d9 	.word	0x080057d9
 8005670:	08005881 	.word	0x08005881
 8005674:	08005881 	.word	0x08005881
 8005678:	080057e7 	.word	0x080057e7
 800567c:	08005881 	.word	0x08005881
 8005680:	08005881 	.word	0x08005881
 8005684:	08005881 	.word	0x08005881
 8005688:	08005881 	.word	0x08005881
 800568c:	08005881 	.word	0x08005881
 8005690:	08005881 	.word	0x08005881
 8005694:	08005881 	.word	0x08005881
 8005698:	08005881 	.word	0x08005881
 800569c:	08005881 	.word	0x08005881
 80056a0:	08005881 	.word	0x08005881
 80056a4:	08005881 	.word	0x08005881
 80056a8:	08005881 	.word	0x08005881
 80056ac:	08005881 	.word	0x08005881
 80056b0:	08005881 	.word	0x08005881
 80056b4:	080057f5 	.word	0x080057f5
 80056b8:	08005881 	.word	0x08005881
 80056bc:	08005881 	.word	0x08005881
 80056c0:	08005881 	.word	0x08005881
 80056c4:	08005881 	.word	0x08005881
 80056c8:	08005881 	.word	0x08005881
 80056cc:	08005881 	.word	0x08005881
 80056d0:	08005881 	.word	0x08005881
 80056d4:	0800581f 	.word	0x0800581f
 80056d8:	08005803 	.word	0x08005803
 80056dc:	08005881 	.word	0x08005881
 80056e0:	08005881 	.word	0x08005881
 80056e4:	08005811 	.word	0x08005811
 80056e8:	08005881 	.word	0x08005881
 80056ec:	08005881 	.word	0x08005881
 80056f0:	08005881 	.word	0x08005881
 80056f4:	08005881 	.word	0x08005881
 80056f8:	0800583b 	.word	0x0800583b
 80056fc:	08005881 	.word	0x08005881
 8005700:	08005849 	.word	0x08005849
 8005704:	08005881 	.word	0x08005881
 8005708:	08005881 	.word	0x08005881
 800570c:	08005857 	.word	0x08005857
 8005710:	08005881 	.word	0x08005881
 8005714:	08005865 	.word	0x08005865
 8005718:	08005881 	.word	0x08005881
 800571c:	08005881 	.word	0x08005881
 8005720:	08005881 	.word	0x08005881
 8005724:	08005881 	.word	0x08005881
 8005728:	08005873 	.word	0x08005873
 800572c:	08005881 	.word	0x08005881
 8005730:	08005881 	.word	0x08005881
 8005734:	08005881 	.word	0x08005881
 8005738:	08005881 	.word	0x08005881
 800573c:	08005881 	.word	0x08005881
 8005740:	08005881 	.word	0x08005881
 8005744:	08005881 	.word	0x08005881
 8005748:	08005881 	.word	0x08005881
 800574c:	08005881 	.word	0x08005881
 8005750:	08005881 	.word	0x08005881
 8005754:	08005881 	.word	0x08005881
 8005758:	08005881 	.word	0x08005881
 800575c:	08005881 	.word	0x08005881
 8005760:	08005881 	.word	0x08005881
 8005764:	08005881 	.word	0x08005881
 8005768:	08005881 	.word	0x08005881
 800576c:	08005881 	.word	0x08005881
 8005770:	08005881 	.word	0x08005881
 8005774:	08005881 	.word	0x08005881
 8005778:	08005881 	.word	0x08005881
 800577c:	08005881 	.word	0x08005881
 8005780:	08005881 	.word	0x08005881
 8005784:	08005881 	.word	0x08005881
 8005788:	08005881 	.word	0x08005881
 800578c:	08005881 	.word	0x08005881
 8005790:	08005881 	.word	0x08005881
 8005794:	08005881 	.word	0x08005881
 8005798:	08005881 	.word	0x08005881
 800579c:	08005881 	.word	0x08005881
 80057a0:	08005881 	.word	0x08005881
 80057a4:	08005881 	.word	0x08005881
 80057a8:	08005881 	.word	0x08005881
 80057ac:	08005881 	.word	0x08005881
 80057b0:	08005881 	.word	0x08005881
 80057b4:	08005881 	.word	0x08005881
 80057b8:	08005881 	.word	0x08005881
 80057bc:	08005881 	.word	0x08005881
 80057c0:	08005881 	.word	0x08005881
 80057c4:	08005881 	.word	0x08005881
 80057c8:	08005881 	.word	0x08005881
 80057cc:	08005881 	.word	0x08005881
 80057d0:	08005881 	.word	0x08005881
 80057d4:	0800582d 	.word	0x0800582d
  {
    case SCSI_TEST_UNIT_READY:
      SCSI_TestUnitReady(pdev, lun, cmd);
 80057d8:	7afb      	ldrb	r3, [r7, #11]
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	4619      	mov	r1, r3
 80057de:	68f8      	ldr	r0, [r7, #12]
 80057e0:	f000 f85c 	bl	800589c <SCSI_TestUnitReady>
      break;
 80057e4:	e055      	b.n	8005892 <SCSI_ProcessCmd+0x246>

    case SCSI_REQUEST_SENSE:
      SCSI_RequestSense(pdev, lun, cmd);
 80057e6:	7afb      	ldrb	r3, [r7, #11]
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	4619      	mov	r1, r3
 80057ec:	68f8      	ldr	r0, [r7, #12]
 80057ee:	f000 fa09 	bl	8005c04 <SCSI_RequestSense>
      break;
 80057f2:	e04e      	b.n	8005892 <SCSI_ProcessCmd+0x246>
    case SCSI_INQUIRY:
      SCSI_Inquiry(pdev, lun, cmd);
 80057f4:	7afb      	ldrb	r3, [r7, #11]
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	4619      	mov	r1, r3
 80057fa:	68f8      	ldr	r0, [r7, #12]
 80057fc:	f000 f888 	bl	8005910 <SCSI_Inquiry>
      break;
 8005800:	e047      	b.n	8005892 <SCSI_ProcessCmd+0x246>

    case SCSI_START_STOP_UNIT:
      SCSI_StartStopUnit(pdev, lun, cmd);
 8005802:	7afb      	ldrb	r3, [r7, #11]
 8005804:	687a      	ldr	r2, [r7, #4]
 8005806:	4619      	mov	r1, r3
 8005808:	68f8      	ldr	r0, [r7, #12]
 800580a:	f000 fa9e 	bl	8005d4a <SCSI_StartStopUnit>
      break;
 800580e:	e040      	b.n	8005892 <SCSI_ProcessCmd+0x246>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      SCSI_StartStopUnit(pdev, lun, cmd);
 8005810:	7afb      	ldrb	r3, [r7, #11]
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	4619      	mov	r1, r3
 8005816:	68f8      	ldr	r0, [r7, #12]
 8005818:	f000 fa97 	bl	8005d4a <SCSI_StartStopUnit>
      break;
 800581c:	e039      	b.n	8005892 <SCSI_ProcessCmd+0x246>

    case SCSI_MODE_SENSE6:
      SCSI_ModeSense6(pdev, lun, cmd);
 800581e:	7afb      	ldrb	r3, [r7, #11]
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	4619      	mov	r1, r3
 8005824:	68f8      	ldr	r0, [r7, #12]
 8005826:	f000 f99d 	bl	8005b64 <SCSI_ModeSense6>
      break;
 800582a:	e032      	b.n	8005892 <SCSI_ProcessCmd+0x246>

    case SCSI_MODE_SENSE10:
      SCSI_ModeSense10(pdev, lun, cmd);
 800582c:	7afb      	ldrb	r3, [r7, #11]
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	4619      	mov	r1, r3
 8005832:	68f8      	ldr	r0, [r7, #12]
 8005834:	f000 f9be 	bl	8005bb4 <SCSI_ModeSense10>
      break;
 8005838:	e02b      	b.n	8005892 <SCSI_ProcessCmd+0x246>

    case SCSI_READ_FORMAT_CAPACITIES:
      SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800583a:	7afb      	ldrb	r3, [r7, #11]
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	4619      	mov	r1, r3
 8005840:	68f8      	ldr	r0, [r7, #12]
 8005842:	f000 f92a 	bl	8005a9a <SCSI_ReadFormatCapacity>
      break;
 8005846:	e024      	b.n	8005892 <SCSI_ProcessCmd+0x246>

    case SCSI_READ_CAPACITY10:
      SCSI_ReadCapacity10(pdev, lun, cmd);
 8005848:	7afb      	ldrb	r3, [r7, #11]
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	4619      	mov	r1, r3
 800584e:	68f8      	ldr	r0, [r7, #12]
 8005850:	f000 f8bc 	bl	80059cc <SCSI_ReadCapacity10>
      break;
 8005854:	e01d      	b.n	8005892 <SCSI_ProcessCmd+0x246>

    case SCSI_READ10:
      SCSI_Read10(pdev, lun, cmd);
 8005856:	7afb      	ldrb	r3, [r7, #11]
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	4619      	mov	r1, r3
 800585c:	68f8      	ldr	r0, [r7, #12]
 800585e:	f000 fa88 	bl	8005d72 <SCSI_Read10>
      break;
 8005862:	e016      	b.n	8005892 <SCSI_ProcessCmd+0x246>

    case SCSI_WRITE10:
      SCSI_Write10(pdev, lun, cmd);
 8005864:	7afb      	ldrb	r3, [r7, #11]
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	4619      	mov	r1, r3
 800586a:	68f8      	ldr	r0, [r7, #12]
 800586c:	f000 fb0d 	bl	8005e8a <SCSI_Write10>
      break;
 8005870:	e00f      	b.n	8005892 <SCSI_ProcessCmd+0x246>

    case SCSI_VERIFY10:
      SCSI_Verify10(pdev, lun, cmd);
 8005872:	7afb      	ldrb	r3, [r7, #11]
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	4619      	mov	r1, r3
 8005878:	68f8      	ldr	r0, [r7, #12]
 800587a:	f000 fbb6 	bl	8005fea <SCSI_Verify10>
      break;
 800587e:	e008      	b.n	8005892 <SCSI_ProcessCmd+0x246>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8005880:	7af9      	ldrb	r1, [r7, #11]
 8005882:	2320      	movs	r3, #32
 8005884:	2205      	movs	r2, #5
 8005886:	68f8      	ldr	r0, [r7, #12]
 8005888:	f000 fa26 	bl	8005cd8 <SCSI_SenseCode>
      return -1;
 800588c:	f04f 33ff 	mov.w	r3, #4294967295
 8005890:	e000      	b.n	8005894 <SCSI_ProcessCmd+0x248>
  }

  return 0;
 8005892:	2300      	movs	r3, #0
}
 8005894:	4618      	mov	r0, r3
 8005896:	3710      	adds	r7, #16
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b086      	sub	sp, #24
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	460b      	mov	r3, r1
 80058a6:	607a      	str	r2, [r7, #4]
 80058a8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058b0:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d00a      	beq.n	80058d2 <SCSI_TestUnitReady+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 80058c2:	2320      	movs	r3, #32
 80058c4:	2205      	movs	r2, #5
 80058c6:	68f8      	ldr	r0, [r7, #12]
 80058c8:	f000 fa06 	bl	8005cd8 <SCSI_SenseCode>

    return -1;
 80058cc:	f04f 33ff 	mov.w	r3, #4294967295
 80058d0:	e019      	b.n	8005906 <SCSI_TestUnitReady+0x6a>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	7afa      	ldrb	r2, [r7, #11]
 80058dc:	4610      	mov	r0, r2
 80058de:	4798      	blx	r3
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d00b      	beq.n	80058fe <SCSI_TestUnitReady+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80058e6:	7af9      	ldrb	r1, [r7, #11]
 80058e8:	233a      	movs	r3, #58	; 0x3a
 80058ea:	2202      	movs	r2, #2
 80058ec:	68f8      	ldr	r0, [r7, #12]
 80058ee:	f000 f9f3 	bl	8005cd8 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	2205      	movs	r2, #5
 80058f6:	721a      	strb	r2, [r3, #8]

    return -1;
 80058f8:	f04f 33ff 	mov.w	r3, #4294967295
 80058fc:	e003      	b.n	8005906 <SCSI_TestUnitReady+0x6a>
  }
  hmsc->bot_data_length = 0U;
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	2200      	movs	r2, #0
 8005902:	815a      	strh	r2, [r3, #10]

  return 0;
 8005904:	2300      	movs	r3, #0
}
 8005906:	4618      	mov	r0, r3
 8005908:	3718      	adds	r7, #24
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
	...

08005910 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t  SCSI_Inquiry(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8005910:	b480      	push	{r7}
 8005912:	b089      	sub	sp, #36	; 0x24
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	460b      	mov	r3, r1
 800591a:	607a      	str	r2, [r7, #4]
 800591c:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005924:	61bb      	str	r3, [r7, #24]

  if (params[1] & 0x01U)/*Evpd is set*/
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	3301      	adds	r3, #1
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	f003 0301 	and.w	r3, r3, #1
 8005930:	2b00      	cmp	r3, #0
 8005932:	d014      	beq.n	800595e <SCSI_Inquiry+0x4e>
  {
    len = LENGTH_INQUIRY_PAGE00;
 8005934:	2307      	movs	r3, #7
 8005936:	83fb      	strh	r3, [r7, #30]
    hmsc->bot_data_length = len;
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	8bfa      	ldrh	r2, [r7, #30]
 800593c:	815a      	strh	r2, [r3, #10]

    while (len)
 800593e:	e00a      	b.n	8005956 <SCSI_Inquiry+0x46>
    {
      len--;
 8005940:	8bfb      	ldrh	r3, [r7, #30]
 8005942:	3b01      	subs	r3, #1
 8005944:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = MSC_Page00_Inquiry_Data[len];
 8005946:	8bfa      	ldrh	r2, [r7, #30]
 8005948:	8bfb      	ldrh	r3, [r7, #30]
 800594a:	491f      	ldr	r1, [pc, #124]	; (80059c8 <SCSI_Inquiry+0xb8>)
 800594c:	5c89      	ldrb	r1, [r1, r2]
 800594e:	69ba      	ldr	r2, [r7, #24]
 8005950:	4413      	add	r3, r2
 8005952:	460a      	mov	r2, r1
 8005954:	731a      	strb	r2, [r3, #12]
    while (len)
 8005956:	8bfb      	ldrh	r3, [r7, #30]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d1f1      	bne.n	8005940 <SCSI_Inquiry+0x30>
 800595c:	e02e      	b.n	80059bc <SCSI_Inquiry+0xac>
    }
  }
  else
  {
    pPage = (uint8_t *)(void *) & ((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005964:	69d9      	ldr	r1, [r3, #28]
 8005966:	7afa      	ldrb	r2, [r7, #11]
 8005968:	4613      	mov	r3, r2
 800596a:	00db      	lsls	r3, r3, #3
 800596c:	4413      	add	r3, r2
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	440b      	add	r3, r1
 8005972:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	3304      	adds	r3, #4
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	b29b      	uxth	r3, r3
 800597c:	3305      	adds	r3, #5
 800597e:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	3304      	adds	r3, #4
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	b29b      	uxth	r3, r3
 8005988:	8bfa      	ldrh	r2, [r7, #30]
 800598a:	429a      	cmp	r2, r3
 800598c:	d303      	bcc.n	8005996 <SCSI_Inquiry+0x86>
    {
      len = params[4];
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	3304      	adds	r3, #4
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	83fb      	strh	r3, [r7, #30]
    }
    hmsc->bot_data_length = len;
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	8bfa      	ldrh	r2, [r7, #30]
 800599a:	815a      	strh	r2, [r3, #10]

    while (len)
 800599c:	e00b      	b.n	80059b6 <SCSI_Inquiry+0xa6>
    {
      len--;
 800599e:	8bfb      	ldrh	r3, [r7, #30]
 80059a0:	3b01      	subs	r3, #1
 80059a2:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = pPage[len];
 80059a4:	8bfb      	ldrh	r3, [r7, #30]
 80059a6:	697a      	ldr	r2, [r7, #20]
 80059a8:	441a      	add	r2, r3
 80059aa:	8bfb      	ldrh	r3, [r7, #30]
 80059ac:	7811      	ldrb	r1, [r2, #0]
 80059ae:	69ba      	ldr	r2, [r7, #24]
 80059b0:	4413      	add	r3, r2
 80059b2:	460a      	mov	r2, r1
 80059b4:	731a      	strb	r2, [r3, #12]
    while (len)
 80059b6:	8bfb      	ldrh	r3, [r7, #30]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d1f0      	bne.n	800599e <SCSI_Inquiry+0x8e>
    }
  }

  return 0;
 80059bc:	2300      	movs	r3, #0
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3724      	adds	r7, #36	; 0x24
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bc80      	pop	{r7}
 80059c6:	4770      	bx	lr
 80059c8:	08007d50 	.word	0x08007d50

080059cc <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b086      	sub	sp, #24
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	60f8      	str	r0, [r7, #12]
 80059d4:	460b      	mov	r3, r1
 80059d6:	607a      	str	r2, [r7, #4]
 80059d8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059e0:	617b      	str	r3, [r7, #20]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size) != 0)
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	697a      	ldr	r2, [r7, #20]
 80059ec:	f502 7118 	add.w	r1, r2, #608	; 0x260
 80059f0:	697a      	ldr	r2, [r7, #20]
 80059f2:	f202 225e 	addw	r2, r2, #606	; 0x25e
 80059f6:	7af8      	ldrb	r0, [r7, #11]
 80059f8:	4798      	blx	r3
 80059fa:	4603      	mov	r3, r0
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d008      	beq.n	8005a12 <SCSI_ReadCapacity10+0x46>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005a00:	7af9      	ldrb	r1, [r7, #11]
 8005a02:	233a      	movs	r3, #58	; 0x3a
 8005a04:	2202      	movs	r2, #2
 8005a06:	68f8      	ldr	r0, [r7, #12]
 8005a08:	f000 f966 	bl	8005cd8 <SCSI_SenseCode>
    return -1;
 8005a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8005a10:	e03f      	b.n	8005a92 <SCSI_ReadCapacity10+0xc6>
  }
  else
  {

    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8005a18:	3b01      	subs	r3, #1
 8005a1a:	0e1b      	lsrs	r3, r3, #24
 8005a1c:	b2da      	uxtb	r2, r3
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	731a      	strb	r2, [r3, #12]
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8005a28:	3b01      	subs	r3, #1
 8005a2a:	0c1b      	lsrs	r3, r3, #16
 8005a2c:	b2da      	uxtb	r2, r3
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	735a      	strb	r2, [r3, #13]
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8005a38:	3b01      	subs	r3, #1
 8005a3a:	0a1b      	lsrs	r3, r3, #8
 8005a3c:	b2da      	uxtb	r2, r3
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	3b01      	subs	r3, #1
 8005a4c:	b2da      	uxtb	r2, r3
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	73da      	strb	r2, [r3, #15]

    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8005a58:	161b      	asrs	r3, r3, #24
 8005a5a:	b2da      	uxtb	r2, r3
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8005a66:	141b      	asrs	r3, r3, #16
 8005a68:	b2da      	uxtb	r2, r3
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8005a74:	0a1b      	lsrs	r3, r3, #8
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	b2da      	uxtb	r2, r3
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8005a84:	b2da      	uxtb	r2, r3
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data_length = 8U;
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	2208      	movs	r2, #8
 8005a8e:	815a      	strh	r2, [r3, #10]
    return 0;
 8005a90:	2300      	movs	r3, #0
  }
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3718      	adds	r7, #24
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}

08005a9a <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8005a9a:	b580      	push	{r7, lr}
 8005a9c:	b088      	sub	sp, #32
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	60f8      	str	r0, [r7, #12]
 8005aa2:	460b      	mov	r3, r1
 8005aa4:	607a      	str	r2, [r7, #4]
 8005aa6:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005aae:	61bb      	str	r3, [r7, #24]

  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;

  for (i = 0U; i < 12U ; i++)
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	83fb      	strh	r3, [r7, #30]
 8005ab4:	e007      	b.n	8005ac6 <SCSI_ReadFormatCapacity+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 8005ab6:	8bfb      	ldrh	r3, [r7, #30]
 8005ab8:	69ba      	ldr	r2, [r7, #24]
 8005aba:	4413      	add	r3, r2
 8005abc:	2200      	movs	r2, #0
 8005abe:	731a      	strb	r2, [r3, #12]
  for (i = 0U; i < 12U ; i++)
 8005ac0:	8bfb      	ldrh	r3, [r7, #30]
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	83fb      	strh	r3, [r7, #30]
 8005ac6:	8bfb      	ldrh	r3, [r7, #30]
 8005ac8:	2b0b      	cmp	r3, #11
 8005aca:	d9f4      	bls.n	8005ab6 <SCSI_ReadFormatCapacity+0x1c>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size) != 0U)
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	f107 0216 	add.w	r2, r7, #22
 8005ad8:	f107 0110 	add.w	r1, r7, #16
 8005adc:	7af8      	ldrb	r0, [r7, #11]
 8005ade:	4798      	blx	r3
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d008      	beq.n	8005af8 <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005ae6:	7af9      	ldrb	r1, [r7, #11]
 8005ae8:	233a      	movs	r3, #58	; 0x3a
 8005aea:	2202      	movs	r2, #2
 8005aec:	68f8      	ldr	r0, [r7, #12]
 8005aee:	f000 f8f3 	bl	8005cd8 <SCSI_SenseCode>
    return -1;
 8005af2:	f04f 33ff 	mov.w	r3, #4294967295
 8005af6:	e030      	b.n	8005b5a <SCSI_ReadFormatCapacity+0xc0>
  }
  else
  {
    hmsc->bot_data[3] = 0x08U;
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	2208      	movs	r2, #8
 8005afc:	73da      	strb	r2, [r3, #15]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	3b01      	subs	r3, #1
 8005b02:	0e1b      	lsrs	r3, r3, #24
 8005b04:	b2da      	uxtb	r2, r3
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	3b01      	subs	r3, #1
 8005b0e:	0c1b      	lsrs	r3, r3, #16
 8005b10:	b2da      	uxtb	r2, r3
 8005b12:	69bb      	ldr	r3, [r7, #24]
 8005b14:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	3b01      	subs	r3, #1
 8005b1a:	0a1b      	lsrs	r3, r3, #8
 8005b1c:	b2da      	uxtb	r2, r3
 8005b1e:	69bb      	ldr	r3, [r7, #24]
 8005b20:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	3b01      	subs	r3, #1
 8005b28:	b2da      	uxtb	r2, r3
 8005b2a:	69bb      	ldr	r3, [r7, #24]
 8005b2c:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data[8] = 0x02U;
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	2202      	movs	r2, #2
 8005b32:	751a      	strb	r2, [r3, #20]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8005b34:	8afb      	ldrh	r3, [r7, #22]
 8005b36:	141b      	asrs	r3, r3, #16
 8005b38:	b2da      	uxtb	r2, r3
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	755a      	strb	r2, [r3, #21]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8005b3e:	8afb      	ldrh	r3, [r7, #22]
 8005b40:	0a1b      	lsrs	r3, r3, #8
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	b2da      	uxtb	r2, r3
 8005b46:	69bb      	ldr	r3, [r7, #24]
 8005b48:	759a      	strb	r2, [r3, #22]
    hmsc->bot_data[11] = (uint8_t)(blk_size);
 8005b4a:	8afb      	ldrh	r3, [r7, #22]
 8005b4c:	b2da      	uxtb	r2, r3
 8005b4e:	69bb      	ldr	r3, [r7, #24]
 8005b50:	75da      	strb	r2, [r3, #23]

    hmsc->bot_data_length = 12U;
 8005b52:	69bb      	ldr	r3, [r7, #24]
 8005b54:	220c      	movs	r2, #12
 8005b56:	815a      	strh	r2, [r3, #10]
    return 0;
 8005b58:	2300      	movs	r3, #0
  }
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3720      	adds	r7, #32
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
	...

08005b64 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b087      	sub	sp, #28
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	60f8      	str	r0, [r7, #12]
 8005b6c:	460b      	mov	r3, r1
 8005b6e:	607a      	str	r2, [r7, #4]
 8005b70:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b78:	613b      	str	r3, [r7, #16]
  uint16_t len = 8U;
 8005b7a:	2308      	movs	r3, #8
 8005b7c:	82fb      	strh	r3, [r7, #22]
  hmsc->bot_data_length = len;
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	8afa      	ldrh	r2, [r7, #22]
 8005b82:	815a      	strh	r2, [r3, #10]

  while (len)
 8005b84:	e00a      	b.n	8005b9c <SCSI_ModeSense6+0x38>
  {
    len--;
 8005b86:	8afb      	ldrh	r3, [r7, #22]
 8005b88:	3b01      	subs	r3, #1
 8005b8a:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense6_data[len];
 8005b8c:	8afa      	ldrh	r2, [r7, #22]
 8005b8e:	8afb      	ldrh	r3, [r7, #22]
 8005b90:	4907      	ldr	r1, [pc, #28]	; (8005bb0 <SCSI_ModeSense6+0x4c>)
 8005b92:	5c89      	ldrb	r1, [r1, r2]
 8005b94:	693a      	ldr	r2, [r7, #16]
 8005b96:	4413      	add	r3, r2
 8005b98:	460a      	mov	r2, r1
 8005b9a:	731a      	strb	r2, [r3, #12]
  while (len)
 8005b9c:	8afb      	ldrh	r3, [r7, #22]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d1f1      	bne.n	8005b86 <SCSI_ModeSense6+0x22>
  }
  return 0;
 8005ba2:	2300      	movs	r3, #0
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	371c      	adds	r7, #28
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bc80      	pop	{r7}
 8005bac:	4770      	bx	lr
 8005bae:	bf00      	nop
 8005bb0:	08007d58 	.word	0x08007d58

08005bb4 <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b087      	sub	sp, #28
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	460b      	mov	r3, r1
 8005bbe:	607a      	str	r2, [r7, #4]
 8005bc0:	72fb      	strb	r3, [r7, #11]
  uint16_t len = 8U;
 8005bc2:	2308      	movs	r3, #8
 8005bc4:	82fb      	strh	r3, [r7, #22]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bcc:	613b      	str	r3, [r7, #16]

  hmsc->bot_data_length = len;
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	8afa      	ldrh	r2, [r7, #22]
 8005bd2:	815a      	strh	r2, [r3, #10]

  while (len)
 8005bd4:	e00a      	b.n	8005bec <SCSI_ModeSense10+0x38>
  {
    len--;
 8005bd6:	8afb      	ldrh	r3, [r7, #22]
 8005bd8:	3b01      	subs	r3, #1
 8005bda:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense10_data[len];
 8005bdc:	8afa      	ldrh	r2, [r7, #22]
 8005bde:	8afb      	ldrh	r3, [r7, #22]
 8005be0:	4907      	ldr	r1, [pc, #28]	; (8005c00 <SCSI_ModeSense10+0x4c>)
 8005be2:	5c89      	ldrb	r1, [r1, r2]
 8005be4:	693a      	ldr	r2, [r7, #16]
 8005be6:	4413      	add	r3, r2
 8005be8:	460a      	mov	r2, r1
 8005bea:	731a      	strb	r2, [r3, #12]
  while (len)
 8005bec:	8afb      	ldrh	r3, [r7, #22]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d1f1      	bne.n	8005bd6 <SCSI_ModeSense10+0x22>
  }

  return 0;
 8005bf2:	2300      	movs	r3, #0
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	371c      	adds	r7, #28
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bc80      	pop	{r7}
 8005bfc:	4770      	bx	lr
 8005bfe:	bf00      	nop
 8005c00:	08007d60 	.word	0x08007d60

08005c04 <SCSI_RequestSense>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_RequestSense(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b087      	sub	sp, #28
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	60f8      	str	r0, [r7, #12]
 8005c0c:	460b      	mov	r3, r1
 8005c0e:	607a      	str	r2, [r7, #4]
 8005c10:	72fb      	strb	r3, [r7, #11]
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c18:	613b      	str	r3, [r7, #16]

  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	75fb      	strb	r3, [r7, #23]
 8005c1e:	e007      	b.n	8005c30 <SCSI_RequestSense+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 8005c20:	7dfb      	ldrb	r3, [r7, #23]
 8005c22:	693a      	ldr	r2, [r7, #16]
 8005c24:	4413      	add	r3, r2
 8005c26:	2200      	movs	r2, #0
 8005c28:	731a      	strb	r2, [r3, #12]
  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 8005c2a:	7dfb      	ldrb	r3, [r7, #23]
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	75fb      	strb	r3, [r7, #23]
 8005c30:	7dfb      	ldrb	r3, [r7, #23]
 8005c32:	2b11      	cmp	r3, #17
 8005c34:	d9f4      	bls.n	8005c20 <SCSI_RequestSense+0x1c>
  }

  hmsc->bot_data[0] = 0x70U;
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	2270      	movs	r2, #112	; 0x70
 8005c3a:	731a      	strb	r2, [r3, #12]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	220c      	movs	r2, #12
 8005c40:	74da      	strb	r2, [r3, #19]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	f893 225c 	ldrb.w	r2, [r3, #604]	; 0x25c
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d02e      	beq.n	8005cb0 <SCSI_RequestSense+0xac>
  {

    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8005c58:	693a      	ldr	r2, [r7, #16]
 8005c5a:	3347      	adds	r3, #71	; 0x47
 8005c5c:	00db      	lsls	r3, r3, #3
 8005c5e:	4413      	add	r3, r2
 8005c60:	791a      	ldrb	r2, [r3, #4]
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8005c6c:	693a      	ldr	r2, [r7, #16]
 8005c6e:	3347      	adds	r3, #71	; 0x47
 8005c70:	00db      	lsls	r3, r3, #3
 8005c72:	4413      	add	r3, r2
 8005c74:	7a5a      	ldrb	r2, [r3, #9]
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	761a      	strb	r2, [r3, #24]
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8005c80:	693a      	ldr	r2, [r7, #16]
 8005c82:	3347      	adds	r3, #71	; 0x47
 8005c84:	00db      	lsls	r3, r3, #3
 8005c86:	4413      	add	r3, r2
 8005c88:	7a1a      	ldrb	r2, [r3, #8]
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	765a      	strb	r2, [r3, #25]
    hmsc->scsi_sense_head++;
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8005c94:	3301      	adds	r3, #1
 8005c96:	b2da      	uxtb	r2, r3
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8005ca4:	2b04      	cmp	r3, #4
 8005ca6:	d103      	bne.n	8005cb0 <SCSI_RequestSense+0xac>
    {
      hmsc->scsi_sense_head = 0U;
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	2200      	movs	r2, #0
 8005cac:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c
    }
  }
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	2212      	movs	r2, #18
 8005cb4:	815a      	strh	r2, [r3, #10]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	3304      	adds	r3, #4
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	2b12      	cmp	r3, #18
 8005cbe:	d805      	bhi.n	8005ccc <SCSI_RequestSense+0xc8>
  {
    hmsc->bot_data_length = params[4];
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	3304      	adds	r3, #4
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	b29a      	uxth	r2, r3
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	815a      	strh	r2, [r3, #10]
  }
  return 0;
 8005ccc:	2300      	movs	r3, #0
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	371c      	adds	r7, #28
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bc80      	pop	{r7}
 8005cd6:	4770      	bx	lr

08005cd8 <SCSI_SenseCode>:
* @param  ASC: Additional Sense Key
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b085      	sub	sp, #20
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	4608      	mov	r0, r1
 8005ce2:	4611      	mov	r1, r2
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	70fb      	strb	r3, [r7, #3]
 8005cea:	460b      	mov	r3, r1
 8005cec:	70bb      	strb	r3, [r7, #2]
 8005cee:	4613      	mov	r3, r2
 8005cf0:	707b      	strb	r3, [r7, #1]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cf8:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8005d00:	68fa      	ldr	r2, [r7, #12]
 8005d02:	3347      	adds	r3, #71	; 0x47
 8005d04:	00db      	lsls	r3, r3, #3
 8005d06:	4413      	add	r3, r2
 8005d08:	78ba      	ldrb	r2, [r7, #2]
 8005d0a:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8005d12:	68fa      	ldr	r2, [r7, #12]
 8005d14:	3347      	adds	r3, #71	; 0x47
 8005d16:	00db      	lsls	r3, r3, #3
 8005d18:	4413      	add	r3, r2
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	721a      	strb	r2, [r3, #8]
  hmsc->scsi_sense_tail++;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8005d24:	3301      	adds	r3, #1
 8005d26:	b2da      	uxtb	r2, r3
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8005d34:	2b04      	cmp	r3, #4
 8005d36:	d103      	bne.n	8005d40 <SCSI_SenseCode+0x68>
  {
    hmsc->scsi_sense_tail = 0U;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  }
}
 8005d40:	bf00      	nop
 8005d42:	3714      	adds	r7, #20
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bc80      	pop	{r7}
 8005d48:	4770      	bx	lr

08005d4a <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8005d4a:	b480      	push	{r7}
 8005d4c:	b087      	sub	sp, #28
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	60f8      	str	r0, [r7, #12]
 8005d52:	460b      	mov	r3, r1
 8005d54:	607a      	str	r2, [r7, #4]
 8005d56:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d5e:	617b      	str	r3, [r7, #20]
  hmsc->bot_data_length = 0U;
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	2200      	movs	r2, #0
 8005d64:	815a      	strh	r2, [r3, #10]
  return 0;
 8005d66:	2300      	movs	r3, #0
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	371c      	adds	r7, #28
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bc80      	pop	{r7}
 8005d70:	4770      	bx	lr

08005d72 <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005d72:	b580      	push	{r7, lr}
 8005d74:	b086      	sub	sp, #24
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	60f8      	str	r0, [r7, #12]
 8005d7a:	460b      	mov	r3, r1
 8005d7c:	607a      	str	r2, [r7, #4]
 8005d7e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d86:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	7a1b      	ldrb	r3, [r3, #8]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d16e      	bne.n	8005e6e <SCSI_Read10+0xfc>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8005d96:	b25b      	sxtb	r3, r3
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	db0a      	blt.n	8005db2 <SCSI_Read10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8005da2:	2320      	movs	r3, #32
 8005da4:	2205      	movs	r2, #5
 8005da6:	68f8      	ldr	r0, [r7, #12]
 8005da8:	f7ff ff96 	bl	8005cd8 <SCSI_SenseCode>
      return -1;
 8005dac:	f04f 33ff 	mov.w	r3, #4294967295
 8005db0:	e067      	b.n	8005e82 <SCSI_Read10+0x110>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	7afa      	ldrb	r2, [r7, #11]
 8005dbc:	4610      	mov	r0, r2
 8005dbe:	4798      	blx	r3
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d008      	beq.n	8005dd8 <SCSI_Read10+0x66>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005dc6:	7af9      	ldrb	r1, [r7, #11]
 8005dc8:	233a      	movs	r3, #58	; 0x3a
 8005dca:	2202      	movs	r2, #2
 8005dcc:	68f8      	ldr	r0, [r7, #12]
 8005dce:	f7ff ff83 	bl	8005cd8 <SCSI_SenseCode>
      return -1;
 8005dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8005dd6:	e054      	b.n	8005e82 <SCSI_Read10+0x110>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	3302      	adds	r3, #2
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	3303      	adds	r3, #3
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005de8:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	3304      	adds	r3, #4
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8005df2:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	3205      	adds	r2, #5
 8005df8:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8005dfa:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	3307      	adds	r3, #7
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	021b      	lsls	r3, r3, #8
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	3208      	adds	r2, #8
 8005e0e:	7812      	ldrb	r2, [r2, #0]
 8005e10:	431a      	orrs	r2, r3
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005e24:	7af9      	ldrb	r1, [r7, #11]
 8005e26:	68f8      	ldr	r0, [r7, #12]
 8005e28:	f000 f912 	bl	8006050 <SCSI_CheckAddressRange>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	da02      	bge.n	8005e38 <SCSI_Read10+0xc6>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8005e32:	f04f 33ff 	mov.w	r3, #4294967295
 8005e36:	e024      	b.n	8005e82 <SCSI_Read10+0x110>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	2202      	movs	r2, #2
 8005e3c:	721a      	strb	r2, [r3, #8]

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005e4a:	6979      	ldr	r1, [r7, #20]
 8005e4c:	f8b1 125e 	ldrh.w	r1, [r1, #606]	; 0x25e
 8005e50:	fb01 f303 	mul.w	r3, r1, r3
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d00a      	beq.n	8005e6e <SCSI_Read10+0xfc>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8005e5e:	2320      	movs	r3, #32
 8005e60:	2205      	movs	r2, #5
 8005e62:	68f8      	ldr	r0, [r7, #12]
 8005e64:	f7ff ff38 	bl	8005cd8 <SCSI_SenseCode>
      return -1;
 8005e68:	f04f 33ff 	mov.w	r3, #4294967295
 8005e6c:	e009      	b.n	8005e82 <SCSI_Read10+0x110>
    }
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e74:	815a      	strh	r2, [r3, #10]

  return SCSI_ProcessRead(pdev, lun);
 8005e76:	7afb      	ldrb	r3, [r7, #11]
 8005e78:	4619      	mov	r1, r3
 8005e7a:	68f8      	ldr	r0, [r7, #12]
 8005e7c:	f000 f90a 	bl	8006094 <SCSI_ProcessRead>
 8005e80:	4603      	mov	r3, r0
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3718      	adds	r7, #24
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}

08005e8a <SCSI_Write10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Write10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8005e8a:	b580      	push	{r7, lr}
 8005e8c:	b086      	sub	sp, #24
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	60f8      	str	r0, [r7, #12]
 8005e92:	460b      	mov	r3, r1
 8005e94:	607a      	str	r2, [r7, #4]
 8005e96:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e9e:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	7a1b      	ldrb	r3, [r3, #8]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	f040 8096 	bne.w	8005fd6 <SCSI_Write10+0x14c>
  {
    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8005eb0:	b25b      	sxtb	r3, r3
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	da0a      	bge.n	8005ecc <SCSI_Write10+0x42>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8005ebc:	2320      	movs	r3, #32
 8005ebe:	2205      	movs	r2, #5
 8005ec0:	68f8      	ldr	r0, [r7, #12]
 8005ec2:	f7ff ff09 	bl	8005cd8 <SCSI_SenseCode>
      return -1;
 8005ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8005eca:	e08a      	b.n	8005fe2 <SCSI_Write10+0x158>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	7afa      	ldrb	r2, [r7, #11]
 8005ed6:	4610      	mov	r0, r2
 8005ed8:	4798      	blx	r3
 8005eda:	4603      	mov	r3, r0
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d008      	beq.n	8005ef2 <SCSI_Write10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005ee0:	7af9      	ldrb	r1, [r7, #11]
 8005ee2:	233a      	movs	r3, #58	; 0x3a
 8005ee4:	2202      	movs	r2, #2
 8005ee6:	68f8      	ldr	r0, [r7, #12]
 8005ee8:	f7ff fef6 	bl	8005cd8 <SCSI_SenseCode>
      return -1;
 8005eec:	f04f 33ff 	mov.w	r3, #4294967295
 8005ef0:	e077      	b.n	8005fe2 <SCSI_Write10+0x158>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ef8:	68db      	ldr	r3, [r3, #12]
 8005efa:	7afa      	ldrb	r2, [r7, #11]
 8005efc:	4610      	mov	r0, r2
 8005efe:	4798      	blx	r3
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d008      	beq.n	8005f18 <SCSI_Write10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8005f06:	7af9      	ldrb	r1, [r7, #11]
 8005f08:	2327      	movs	r3, #39	; 0x27
 8005f0a:	2202      	movs	r2, #2
 8005f0c:	68f8      	ldr	r0, [r7, #12]
 8005f0e:	f7ff fee3 	bl	8005cd8 <SCSI_SenseCode>
      return -1;
 8005f12:	f04f 33ff 	mov.w	r3, #4294967295
 8005f16:	e064      	b.n	8005fe2 <SCSI_Write10+0x158>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	3302      	adds	r3, #2
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	3303      	adds	r3, #3
 8005f24:	781b      	ldrb	r3, [r3, #0]
 8005f26:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005f28:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	3304      	adds	r3, #4
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8005f32:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	3205      	adds	r2, #5
 8005f38:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8005f3a:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	3307      	adds	r3, #7
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8005f4a:	687a      	ldr	r2, [r7, #4]
 8005f4c:	3208      	adds	r2, #8
 8005f4e:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8005f50:	431a      	orrs	r2, r3
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005f64:	7af9      	ldrb	r1, [r7, #11]
 8005f66:	68f8      	ldr	r0, [r7, #12]
 8005f68:	f000 f872 	bl	8006050 <SCSI_CheckAddressRange>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	da02      	bge.n	8005f78 <SCSI_Write10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8005f72:	f04f 33ff 	mov.w	r3, #4294967295
 8005f76:	e034      	b.n	8005fe2 <SCSI_Write10+0x158>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005f7e:	697a      	ldr	r2, [r7, #20]
 8005f80:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 8005f84:	fb02 f303 	mul.w	r3, r2, r3
 8005f88:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005f90:	693a      	ldr	r2, [r7, #16]
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d00a      	beq.n	8005fac <SCSI_Write10+0x122>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8005f9c:	2320      	movs	r3, #32
 8005f9e:	2205      	movs	r2, #5
 8005fa0:	68f8      	ldr	r0, [r7, #12]
 8005fa2:	f7ff fe99 	bl	8005cd8 <SCSI_SenseCode>
      return -1;
 8005fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8005faa:	e01a      	b.n	8005fe2 <SCSI_Write10+0x158>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fb2:	bf28      	it	cs
 8005fb4:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8005fb8:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	721a      	strb	r2, [r3, #8]
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	f103 020c 	add.w	r2, r3, #12
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	2101      	movs	r1, #1
 8005fcc:	68f8      	ldr	r0, [r7, #12]
 8005fce:	f001 fdb6 	bl	8007b3e <USBD_LL_PrepareReceive>
  }
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }
  return 0;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	e005      	b.n	8005fe2 <SCSI_Write10+0x158>
    return SCSI_ProcessWrite(pdev, lun);
 8005fd6:	7afb      	ldrb	r3, [r7, #11]
 8005fd8:	4619      	mov	r1, r3
 8005fda:	68f8      	ldr	r0, [r7, #12]
 8005fdc:	f000 f8ce 	bl	800617c <SCSI_ProcessWrite>
 8005fe0:	4603      	mov	r3, r0
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3718      	adds	r7, #24
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}

08005fea <SCSI_Verify10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Verify10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8005fea:	b580      	push	{r7, lr}
 8005fec:	b086      	sub	sp, #24
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	60f8      	str	r0, [r7, #12]
 8005ff2:	460b      	mov	r3, r1
 8005ff4:	607a      	str	r2, [r7, #4]
 8005ff6:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ffe:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	3301      	adds	r3, #1
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	f003 0302 	and.w	r3, r3, #2
 800600a:	2b00      	cmp	r3, #0
 800600c:	d008      	beq.n	8006020 <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800600e:	7af9      	ldrb	r1, [r7, #11]
 8006010:	2324      	movs	r3, #36	; 0x24
 8006012:	2205      	movs	r2, #5
 8006014:	68f8      	ldr	r0, [r7, #12]
 8006016:	f7ff fe5f 	bl	8005cd8 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800601a:	f04f 33ff 	mov.w	r3, #4294967295
 800601e:	e013      	b.n	8006048 <SCSI_Verify10+0x5e>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800602c:	7af9      	ldrb	r1, [r7, #11]
 800602e:	68f8      	ldr	r0, [r7, #12]
 8006030:	f000 f80e 	bl	8006050 <SCSI_CheckAddressRange>
 8006034:	4603      	mov	r3, r0
 8006036:	2b00      	cmp	r3, #0
 8006038:	da02      	bge.n	8006040 <SCSI_Verify10+0x56>
                             hmsc->scsi_blk_len) < 0)
  {
    return -1; /* error */
 800603a:	f04f 33ff 	mov.w	r3, #4294967295
 800603e:	e003      	b.n	8006048 <SCSI_Verify10+0x5e>
  }
  hmsc->bot_data_length = 0U;
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	2200      	movs	r2, #0
 8006044:	815a      	strh	r2, [r3, #10]
  return 0;
 8006046:	2300      	movs	r3, #0
}
 8006048:	4618      	mov	r0, r3
 800604a:	3718      	adds	r7, #24
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b086      	sub	sp, #24
 8006054:	af00      	add	r7, sp, #0
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	607a      	str	r2, [r7, #4]
 800605a:	603b      	str	r3, [r7, #0]
 800605c:	460b      	mov	r3, r1
 800605e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006066:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	441a      	add	r2, r3
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8006074:	429a      	cmp	r2, r3
 8006076:	d908      	bls.n	800608a <SCSI_CheckAddressRange+0x3a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8006078:	7af9      	ldrb	r1, [r7, #11]
 800607a:	2321      	movs	r3, #33	; 0x21
 800607c:	2205      	movs	r2, #5
 800607e:	68f8      	ldr	r0, [r7, #12]
 8006080:	f7ff fe2a 	bl	8005cd8 <SCSI_SenseCode>
    return -1;
 8006084:	f04f 33ff 	mov.w	r3, #4294967295
 8006088:	e000      	b.n	800608c <SCSI_CheckAddressRange+0x3c>
  }
  return 0;
 800608a:	2300      	movs	r3, #0
}
 800608c:	4618      	mov	r0, r3
 800608e:	3718      	adds	r7, #24
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}

08006094 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 8006094:	b590      	push	{r4, r7, lr}
 8006096:	b085      	sub	sp, #20
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	460b      	mov	r3, r1
 800609e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060a6:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80060ae:	68fa      	ldr	r2, [r7, #12]
 80060b0:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 80060b4:	fb02 f303 	mul.w	r3, r2, r3
 80060b8:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060c0:	bf28      	it	cs
 80060c2:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80060c6:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060ce:	691c      	ldr	r4, [r3, #16]
                                                     hmsc->bot_data,
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f103 010c 	add.w	r1, r3, #12
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 80060e2:	4618      	mov	r0, r3
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	78f8      	ldrb	r0, [r7, #3]
 80060ee:	47a0      	blx	r4
 80060f0:	4603      	mov	r3, r0
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	da08      	bge.n	8006108 <SCSI_ProcessRead+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 80060f6:	78f9      	ldrb	r1, [r7, #3]
 80060f8:	2311      	movs	r3, #17
 80060fa:	2204      	movs	r2, #4
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f7ff fdeb 	bl	8005cd8 <SCSI_SenseCode>
    return -1;
 8006102:	f04f 33ff 	mov.w	r3, #4294967295
 8006106:	e035      	b.n	8006174 <SCSI_ProcessRead+0xe0>
  }

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f103 020c 	add.w	r2, r3, #12
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	b29b      	uxth	r3, r3
 8006112:	2181      	movs	r1, #129	; 0x81
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f001 fcef 	bl	8007af8 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8006126:	4619      	mov	r1, r3
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	fbb3 f3f1 	udiv	r3, r3, r1
 800612e:	441a      	add	r2, r3
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8006142:	4619      	mov	r1, r3
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	fbb3 f3f1 	udiv	r3, r3, r1
 800614a:	1ad2      	subs	r2, r2, r3
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	1ad2      	subs	r2, r2, r3
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006168:	2b00      	cmp	r3, #0
 800616a:	d102      	bne.n	8006172 <SCSI_ProcessRead+0xde>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2203      	movs	r2, #3
 8006170:	721a      	strb	r2, [r3, #8]
  }
  return 0;
 8006172:	2300      	movs	r3, #0
}
 8006174:	4618      	mov	r0, r3
 8006176:	3714      	adds	r7, #20
 8006178:	46bd      	mov	sp, r7
 800617a:	bd90      	pop	{r4, r7, pc}

0800617c <SCSI_ProcessWrite>:
* @param  lun: Logical unit number
* @retval status
*/

static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 800617c:	b590      	push	{r4, r7, lr}
 800617e:	b085      	sub	sp, #20
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	460b      	mov	r3, r1
 8006186:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800618e:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006196:	68fa      	ldr	r2, [r7, #12]
 8006198:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 800619c:	fb02 f303 	mul.w	r3, r2, r3
 80061a0:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061a8:	bf28      	it	cs
 80061aa:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80061ae:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061b6:	695c      	ldr	r4, [r3, #20]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f103 010c 	add.w	r1, r3, #12
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 80061ca:	4618      	mov	r0, r3
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	78f8      	ldrb	r0, [r7, #3]
 80061d6:	47a0      	blx	r4
 80061d8:	4603      	mov	r3, r0
 80061da:	2b00      	cmp	r3, #0
 80061dc:	da08      	bge.n	80061f0 <SCSI_ProcessWrite+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 80061de:	78f9      	ldrb	r1, [r7, #3]
 80061e0:	2303      	movs	r3, #3
 80061e2:	2204      	movs	r2, #4
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f7ff fd77 	bl	8005cd8 <SCSI_SenseCode>

    return -1;
 80061ea:	f04f 33ff 	mov.w	r3, #4294967295
 80061ee:	e045      	b.n	800627c <SCSI_ProcessWrite+0x100>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 80061fc:	4619      	mov	r1, r3
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	fbb3 f3f1 	udiv	r3, r3, r1
 8006204:	441a      	add	r2, r3
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8006218:	4619      	mov	r1, r3
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006220:	1ad2      	subs	r2, r2, r3
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	1ad2      	subs	r2, r2, r3
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800623e:	2b00      	cmp	r3, #0
 8006240:	d104      	bne.n	800624c <SCSI_ProcessWrite+0xd0>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8006242:	2100      	movs	r1, #0
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f7ff f97f 	bl	8005548 <MSC_BOT_SendCSW>
 800624a:	e016      	b.n	800627a <SCSI_ProcessWrite+0xfe>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006252:	68fa      	ldr	r2, [r7, #12]
 8006254:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 8006258:	fb02 f303 	mul.w	r3, r2, r3
 800625c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006260:	bf28      	it	cs
 8006262:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8006266:	60bb      	str	r3, [r7, #8]
    /* Prepare EP to Receive next packet */
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f103 020c 	add.w	r2, r3, #12
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	b29b      	uxth	r3, r3
 8006272:	2101      	movs	r1, #1
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f001 fc62 	bl	8007b3e <USBD_LL_PrepareReceive>
  }

  return 0;
 800627a:	2300      	movs	r3, #0
}
 800627c:	4618      	mov	r0, r3
 800627e:	3714      	adds	r7, #20
 8006280:	46bd      	mov	sp, r7
 8006282:	bd90      	pop	{r4, r7, pc}

08006284 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b084      	sub	sp, #16
 8006288:	af00      	add	r7, sp, #0
 800628a:	60f8      	str	r0, [r7, #12]
 800628c:	60b9      	str	r1, [r7, #8]
 800628e:	4613      	mov	r3, r2
 8006290:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d101      	bne.n	800629c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006298:	2302      	movs	r3, #2
 800629a:	e01a      	b.n	80062d2 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d003      	beq.n	80062ae <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2200      	movs	r2, #0
 80062aa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d003      	beq.n	80062bc <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	68ba      	ldr	r2, [r7, #8]
 80062b8:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	79fa      	ldrb	r2, [r7, #7]
 80062c8:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80062ca:	68f8      	ldr	r0, [r7, #12]
 80062cc:	f001 fabc 	bl	8007848 <USBD_LL_Init>

  return USBD_OK;
 80062d0:	2300      	movs	r3, #0
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3710      	adds	r7, #16
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}

080062da <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80062da:	b480      	push	{r7}
 80062dc:	b085      	sub	sp, #20
 80062de:	af00      	add	r7, sp, #0
 80062e0:	6078      	str	r0, [r7, #4]
 80062e2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80062e4:	2300      	movs	r3, #0
 80062e6:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d006      	beq.n	80062fc <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	683a      	ldr	r2, [r7, #0]
 80062f2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80062f6:	2300      	movs	r3, #0
 80062f8:	73fb      	strb	r3, [r7, #15]
 80062fa:	e001      	b.n	8006300 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80062fc:	2302      	movs	r3, #2
 80062fe:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006300:	7bfb      	ldrb	r3, [r7, #15]
}
 8006302:	4618      	mov	r0, r3
 8006304:	3714      	adds	r7, #20
 8006306:	46bd      	mov	sp, r7
 8006308:	bc80      	pop	{r7}
 800630a:	4770      	bx	lr

0800630c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b082      	sub	sp, #8
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f001 fae7 	bl	80078e8 <USBD_LL_Start>

  return USBD_OK;
 800631a:	2300      	movs	r3, #0
}
 800631c:	4618      	mov	r0, r3
 800631e:	3708      	adds	r7, #8
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800632c:	2300      	movs	r3, #0
}
 800632e:	4618      	mov	r0, r3
 8006330:	370c      	adds	r7, #12
 8006332:	46bd      	mov	sp, r7
 8006334:	bc80      	pop	{r7}
 8006336:	4770      	bx	lr

08006338 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b084      	sub	sp, #16
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	460b      	mov	r3, r1
 8006342:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006344:	2302      	movs	r3, #2
 8006346:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800634e:	2b00      	cmp	r3, #0
 8006350:	d00c      	beq.n	800636c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	78fa      	ldrb	r2, [r7, #3]
 800635c:	4611      	mov	r1, r2
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	4798      	blx	r3
 8006362:	4603      	mov	r3, r0
 8006364:	2b00      	cmp	r3, #0
 8006366:	d101      	bne.n	800636c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006368:	2300      	movs	r3, #0
 800636a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800636c:	7bfb      	ldrb	r3, [r7, #15]
}
 800636e:	4618      	mov	r0, r3
 8006370:	3710      	adds	r7, #16
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}

08006376 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006376:	b580      	push	{r7, lr}
 8006378:	b082      	sub	sp, #8
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
 800637e:	460b      	mov	r3, r1
 8006380:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	78fa      	ldrb	r2, [r7, #3]
 800638c:	4611      	mov	r1, r2
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	4798      	blx	r3

  return USBD_OK;
 8006392:	2300      	movs	r3, #0
}
 8006394:	4618      	mov	r0, r3
 8006396:	3708      	adds	r7, #8
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b082      	sub	sp, #8
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80063ac:	6839      	ldr	r1, [r7, #0]
 80063ae:	4618      	mov	r0, r3
 80063b0:	f000 feca 	bl	8007148 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80063c2:	461a      	mov	r2, r3
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80063d0:	f003 031f 	and.w	r3, r3, #31
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d00c      	beq.n	80063f2 <USBD_LL_SetupStage+0x56>
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d302      	bcc.n	80063e2 <USBD_LL_SetupStage+0x46>
 80063dc:	2b02      	cmp	r3, #2
 80063de:	d010      	beq.n	8006402 <USBD_LL_SetupStage+0x66>
 80063e0:	e017      	b.n	8006412 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80063e8:	4619      	mov	r1, r3
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 f9ca 	bl	8006784 <USBD_StdDevReq>
      break;
 80063f0:	e01a      	b.n	8006428 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80063f8:	4619      	mov	r1, r3
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 fa2c 	bl	8006858 <USBD_StdItfReq>
      break;
 8006400:	e012      	b.n	8006428 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006408:	4619      	mov	r1, r3
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f000 fa6a 	bl	80068e4 <USBD_StdEPReq>
      break;
 8006410:	e00a      	b.n	8006428 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006418:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800641c:	b2db      	uxtb	r3, r3
 800641e:	4619      	mov	r1, r3
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f001 fae0 	bl	80079e6 <USBD_LL_StallEP>
      break;
 8006426:	bf00      	nop
  }

  return USBD_OK;
 8006428:	2300      	movs	r3, #0
}
 800642a:	4618      	mov	r0, r3
 800642c:	3708      	adds	r7, #8
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}

08006432 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006432:	b580      	push	{r7, lr}
 8006434:	b086      	sub	sp, #24
 8006436:	af00      	add	r7, sp, #0
 8006438:	60f8      	str	r0, [r7, #12]
 800643a:	460b      	mov	r3, r1
 800643c:	607a      	str	r2, [r7, #4]
 800643e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006440:	7afb      	ldrb	r3, [r7, #11]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d14b      	bne.n	80064de <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800644c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006454:	2b03      	cmp	r3, #3
 8006456:	d134      	bne.n	80064c2 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	68da      	ldr	r2, [r3, #12]
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	691b      	ldr	r3, [r3, #16]
 8006460:	429a      	cmp	r2, r3
 8006462:	d919      	bls.n	8006498 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	68da      	ldr	r2, [r3, #12]
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	691b      	ldr	r3, [r3, #16]
 800646c:	1ad2      	subs	r2, r2, r3
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	68da      	ldr	r2, [r3, #12]
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800647a:	429a      	cmp	r2, r3
 800647c:	d203      	bcs.n	8006486 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006482:	b29b      	uxth	r3, r3
 8006484:	e002      	b.n	800648c <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800648a:	b29b      	uxth	r3, r3
 800648c:	461a      	mov	r2, r3
 800648e:	6879      	ldr	r1, [r7, #4]
 8006490:	68f8      	ldr	r0, [r7, #12]
 8006492:	f000 ff2d 	bl	80072f0 <USBD_CtlContinueRx>
 8006496:	e038      	b.n	800650a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800649e:	691b      	ldr	r3, [r3, #16]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d00a      	beq.n	80064ba <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80064aa:	2b03      	cmp	r3, #3
 80064ac:	d105      	bne.n	80064ba <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	68f8      	ldr	r0, [r7, #12]
 80064b8:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80064ba:	68f8      	ldr	r0, [r7, #12]
 80064bc:	f000 ff2a 	bl	8007314 <USBD_CtlSendStatus>
 80064c0:	e023      	b.n	800650a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80064c8:	2b05      	cmp	r3, #5
 80064ca:	d11e      	bne.n	800650a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80064d4:	2100      	movs	r1, #0
 80064d6:	68f8      	ldr	r0, [r7, #12]
 80064d8:	f001 fa85 	bl	80079e6 <USBD_LL_StallEP>
 80064dc:	e015      	b.n	800650a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064e4:	699b      	ldr	r3, [r3, #24]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d00d      	beq.n	8006506 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80064f0:	2b03      	cmp	r3, #3
 80064f2:	d108      	bne.n	8006506 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064fa:	699b      	ldr	r3, [r3, #24]
 80064fc:	7afa      	ldrb	r2, [r7, #11]
 80064fe:	4611      	mov	r1, r2
 8006500:	68f8      	ldr	r0, [r7, #12]
 8006502:	4798      	blx	r3
 8006504:	e001      	b.n	800650a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006506:	2302      	movs	r3, #2
 8006508:	e000      	b.n	800650c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800650a:	2300      	movs	r3, #0
}
 800650c:	4618      	mov	r0, r3
 800650e:	3718      	adds	r7, #24
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}

08006514 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b086      	sub	sp, #24
 8006518:	af00      	add	r7, sp, #0
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	460b      	mov	r3, r1
 800651e:	607a      	str	r2, [r7, #4]
 8006520:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006522:	7afb      	ldrb	r3, [r7, #11]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d17f      	bne.n	8006628 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	3314      	adds	r3, #20
 800652c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006534:	2b02      	cmp	r3, #2
 8006536:	d15c      	bne.n	80065f2 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	68da      	ldr	r2, [r3, #12]
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	691b      	ldr	r3, [r3, #16]
 8006540:	429a      	cmp	r2, r3
 8006542:	d915      	bls.n	8006570 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	68da      	ldr	r2, [r3, #12]
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	691b      	ldr	r3, [r3, #16]
 800654c:	1ad2      	subs	r2, r2, r3
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	68db      	ldr	r3, [r3, #12]
 8006556:	b29b      	uxth	r3, r3
 8006558:	461a      	mov	r2, r3
 800655a:	6879      	ldr	r1, [r7, #4]
 800655c:	68f8      	ldr	r0, [r7, #12]
 800655e:	f000 feb5 	bl	80072cc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006562:	2300      	movs	r3, #0
 8006564:	2200      	movs	r2, #0
 8006566:	2100      	movs	r1, #0
 8006568:	68f8      	ldr	r0, [r7, #12]
 800656a:	f001 fae8 	bl	8007b3e <USBD_LL_PrepareReceive>
 800656e:	e04e      	b.n	800660e <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	697a      	ldr	r2, [r7, #20]
 8006576:	6912      	ldr	r2, [r2, #16]
 8006578:	fbb3 f1f2 	udiv	r1, r3, r2
 800657c:	fb02 f201 	mul.w	r2, r2, r1
 8006580:	1a9b      	subs	r3, r3, r2
 8006582:	2b00      	cmp	r3, #0
 8006584:	d11c      	bne.n	80065c0 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	689a      	ldr	r2, [r3, #8]
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800658e:	429a      	cmp	r2, r3
 8006590:	d316      	bcc.n	80065c0 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	689a      	ldr	r2, [r3, #8]
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800659c:	429a      	cmp	r2, r3
 800659e:	d20f      	bcs.n	80065c0 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80065a0:	2200      	movs	r2, #0
 80065a2:	2100      	movs	r1, #0
 80065a4:	68f8      	ldr	r0, [r7, #12]
 80065a6:	f000 fe91 	bl	80072cc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2200      	movs	r2, #0
 80065ae:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80065b2:	2300      	movs	r3, #0
 80065b4:	2200      	movs	r2, #0
 80065b6:	2100      	movs	r1, #0
 80065b8:	68f8      	ldr	r0, [r7, #12]
 80065ba:	f001 fac0 	bl	8007b3e <USBD_LL_PrepareReceive>
 80065be:	e026      	b.n	800660e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d00a      	beq.n	80065e2 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80065d2:	2b03      	cmp	r3, #3
 80065d4:	d105      	bne.n	80065e2 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065dc:	68db      	ldr	r3, [r3, #12]
 80065de:	68f8      	ldr	r0, [r7, #12]
 80065e0:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80065e2:	2180      	movs	r1, #128	; 0x80
 80065e4:	68f8      	ldr	r0, [r7, #12]
 80065e6:	f001 f9fe 	bl	80079e6 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80065ea:	68f8      	ldr	r0, [r7, #12]
 80065ec:	f000 fea5 	bl	800733a <USBD_CtlReceiveStatus>
 80065f0:	e00d      	b.n	800660e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80065f8:	2b04      	cmp	r3, #4
 80065fa:	d004      	beq.n	8006606 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006602:	2b00      	cmp	r3, #0
 8006604:	d103      	bne.n	800660e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006606:	2180      	movs	r1, #128	; 0x80
 8006608:	68f8      	ldr	r0, [r7, #12]
 800660a:	f001 f9ec 	bl	80079e6 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006614:	2b01      	cmp	r3, #1
 8006616:	d11d      	bne.n	8006654 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006618:	68f8      	ldr	r0, [r7, #12]
 800661a:	f7ff fe83 	bl	8006324 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2200      	movs	r2, #0
 8006622:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006626:	e015      	b.n	8006654 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800662e:	695b      	ldr	r3, [r3, #20]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d00d      	beq.n	8006650 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800663a:	2b03      	cmp	r3, #3
 800663c:	d108      	bne.n	8006650 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006644:	695b      	ldr	r3, [r3, #20]
 8006646:	7afa      	ldrb	r2, [r7, #11]
 8006648:	4611      	mov	r1, r2
 800664a:	68f8      	ldr	r0, [r7, #12]
 800664c:	4798      	blx	r3
 800664e:	e001      	b.n	8006654 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006650:	2302      	movs	r3, #2
 8006652:	e000      	b.n	8006656 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006654:	2300      	movs	r3, #0
}
 8006656:	4618      	mov	r0, r3
 8006658:	3718      	adds	r7, #24
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}

0800665e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800665e:	b580      	push	{r7, lr}
 8006660:	b082      	sub	sp, #8
 8006662:	af00      	add	r7, sp, #0
 8006664:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006666:	2340      	movs	r3, #64	; 0x40
 8006668:	2200      	movs	r2, #0
 800666a:	2100      	movs	r1, #0
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f001 f956 	bl	800791e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2201      	movs	r2, #1
 8006676:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2240      	movs	r2, #64	; 0x40
 800667e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006682:	2340      	movs	r3, #64	; 0x40
 8006684:	2200      	movs	r2, #0
 8006686:	2180      	movs	r1, #128	; 0x80
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f001 f948 	bl	800791e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2201      	movs	r2, #1
 8006692:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2240      	movs	r2, #64	; 0x40
 8006698:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2201      	movs	r2, #1
 800669e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2200      	movs	r2, #0
 80066b4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d009      	beq.n	80066d6 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	687a      	ldr	r2, [r7, #4]
 80066cc:	6852      	ldr	r2, [r2, #4]
 80066ce:	b2d2      	uxtb	r2, r2
 80066d0:	4611      	mov	r1, r2
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	4798      	blx	r3
  }

  return USBD_OK;
 80066d6:	2300      	movs	r3, #0
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3708      	adds	r7, #8
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	460b      	mov	r3, r1
 80066ea:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	78fa      	ldrb	r2, [r7, #3]
 80066f0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80066f2:	2300      	movs	r3, #0
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	370c      	adds	r7, #12
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bc80      	pop	{r7}
 80066fc:	4770      	bx	lr

080066fe <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80066fe:	b480      	push	{r7}
 8006700:	b083      	sub	sp, #12
 8006702:	af00      	add	r7, sp, #0
 8006704:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2204      	movs	r2, #4
 8006716:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800671a:	2300      	movs	r3, #0
}
 800671c:	4618      	mov	r0, r3
 800671e:	370c      	adds	r7, #12
 8006720:	46bd      	mov	sp, r7
 8006722:	bc80      	pop	{r7}
 8006724:	4770      	bx	lr

08006726 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006726:	b480      	push	{r7}
 8006728:	b083      	sub	sp, #12
 800672a:	af00      	add	r7, sp, #0
 800672c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006734:	2b04      	cmp	r3, #4
 8006736:	d105      	bne.n	8006744 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006744:	2300      	movs	r3, #0
}
 8006746:	4618      	mov	r0, r3
 8006748:	370c      	adds	r7, #12
 800674a:	46bd      	mov	sp, r7
 800674c:	bc80      	pop	{r7}
 800674e:	4770      	bx	lr

08006750 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b082      	sub	sp, #8
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800675e:	2b03      	cmp	r3, #3
 8006760:	d10b      	bne.n	800677a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006768:	69db      	ldr	r3, [r3, #28]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d005      	beq.n	800677a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006774:	69db      	ldr	r3, [r3, #28]
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800677a:	2300      	movs	r3, #0
}
 800677c:	4618      	mov	r0, r3
 800677e:	3708      	adds	r7, #8
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}

08006784 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b084      	sub	sp, #16
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800678e:	2300      	movs	r3, #0
 8006790:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800679a:	2b20      	cmp	r3, #32
 800679c:	d004      	beq.n	80067a8 <USBD_StdDevReq+0x24>
 800679e:	2b40      	cmp	r3, #64	; 0x40
 80067a0:	d002      	beq.n	80067a8 <USBD_StdDevReq+0x24>
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d008      	beq.n	80067b8 <USBD_StdDevReq+0x34>
 80067a6:	e04c      	b.n	8006842 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	6839      	ldr	r1, [r7, #0]
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	4798      	blx	r3
      break;
 80067b6:	e049      	b.n	800684c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	785b      	ldrb	r3, [r3, #1]
 80067bc:	2b09      	cmp	r3, #9
 80067be:	d83a      	bhi.n	8006836 <USBD_StdDevReq+0xb2>
 80067c0:	a201      	add	r2, pc, #4	; (adr r2, 80067c8 <USBD_StdDevReq+0x44>)
 80067c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c6:	bf00      	nop
 80067c8:	08006819 	.word	0x08006819
 80067cc:	0800682d 	.word	0x0800682d
 80067d0:	08006837 	.word	0x08006837
 80067d4:	08006823 	.word	0x08006823
 80067d8:	08006837 	.word	0x08006837
 80067dc:	080067fb 	.word	0x080067fb
 80067e0:	080067f1 	.word	0x080067f1
 80067e4:	08006837 	.word	0x08006837
 80067e8:	0800680f 	.word	0x0800680f
 80067ec:	08006805 	.word	0x08006805
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80067f0:	6839      	ldr	r1, [r7, #0]
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f000 f9d4 	bl	8006ba0 <USBD_GetDescriptor>
          break;
 80067f8:	e022      	b.n	8006840 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80067fa:	6839      	ldr	r1, [r7, #0]
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f000 fb37 	bl	8006e70 <USBD_SetAddress>
          break;
 8006802:	e01d      	b.n	8006840 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006804:	6839      	ldr	r1, [r7, #0]
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 fb74 	bl	8006ef4 <USBD_SetConfig>
          break;
 800680c:	e018      	b.n	8006840 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800680e:	6839      	ldr	r1, [r7, #0]
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f000 fbfd 	bl	8007010 <USBD_GetConfig>
          break;
 8006816:	e013      	b.n	8006840 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006818:	6839      	ldr	r1, [r7, #0]
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f000 fc2c 	bl	8007078 <USBD_GetStatus>
          break;
 8006820:	e00e      	b.n	8006840 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006822:	6839      	ldr	r1, [r7, #0]
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f000 fc5a 	bl	80070de <USBD_SetFeature>
          break;
 800682a:	e009      	b.n	8006840 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800682c:	6839      	ldr	r1, [r7, #0]
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 fc69 	bl	8007106 <USBD_ClrFeature>
          break;
 8006834:	e004      	b.n	8006840 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006836:	6839      	ldr	r1, [r7, #0]
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f000 fcc1 	bl	80071c0 <USBD_CtlError>
          break;
 800683e:	bf00      	nop
      }
      break;
 8006840:	e004      	b.n	800684c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006842:	6839      	ldr	r1, [r7, #0]
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f000 fcbb 	bl	80071c0 <USBD_CtlError>
      break;
 800684a:	bf00      	nop
  }

  return ret;
 800684c:	7bfb      	ldrb	r3, [r7, #15]
}
 800684e:	4618      	mov	r0, r3
 8006850:	3710      	adds	r7, #16
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
 8006856:	bf00      	nop

08006858 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b084      	sub	sp, #16
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006862:	2300      	movs	r3, #0
 8006864:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	781b      	ldrb	r3, [r3, #0]
 800686a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800686e:	2b20      	cmp	r3, #32
 8006870:	d003      	beq.n	800687a <USBD_StdItfReq+0x22>
 8006872:	2b40      	cmp	r3, #64	; 0x40
 8006874:	d001      	beq.n	800687a <USBD_StdItfReq+0x22>
 8006876:	2b00      	cmp	r3, #0
 8006878:	d12a      	bne.n	80068d0 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006880:	3b01      	subs	r3, #1
 8006882:	2b02      	cmp	r3, #2
 8006884:	d81d      	bhi.n	80068c2 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	889b      	ldrh	r3, [r3, #4]
 800688a:	b2db      	uxtb	r3, r3
 800688c:	2b01      	cmp	r3, #1
 800688e:	d813      	bhi.n	80068b8 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	6839      	ldr	r1, [r7, #0]
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	4798      	blx	r3
 800689e:	4603      	mov	r3, r0
 80068a0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	88db      	ldrh	r3, [r3, #6]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d110      	bne.n	80068cc <USBD_StdItfReq+0x74>
 80068aa:	7bfb      	ldrb	r3, [r7, #15]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d10d      	bne.n	80068cc <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f000 fd2f 	bl	8007314 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80068b6:	e009      	b.n	80068cc <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 80068b8:	6839      	ldr	r1, [r7, #0]
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 fc80 	bl	80071c0 <USBD_CtlError>
          break;
 80068c0:	e004      	b.n	80068cc <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 80068c2:	6839      	ldr	r1, [r7, #0]
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f000 fc7b 	bl	80071c0 <USBD_CtlError>
          break;
 80068ca:	e000      	b.n	80068ce <USBD_StdItfReq+0x76>
          break;
 80068cc:	bf00      	nop
      }
      break;
 80068ce:	e004      	b.n	80068da <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 80068d0:	6839      	ldr	r1, [r7, #0]
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 fc74 	bl	80071c0 <USBD_CtlError>
      break;
 80068d8:	bf00      	nop
  }

  return USBD_OK;
 80068da:	2300      	movs	r3, #0
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3710      	adds	r7, #16
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}

080068e4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b084      	sub	sp, #16
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80068ee:	2300      	movs	r3, #0
 80068f0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	889b      	ldrh	r3, [r3, #4]
 80068f6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006900:	2b20      	cmp	r3, #32
 8006902:	d004      	beq.n	800690e <USBD_StdEPReq+0x2a>
 8006904:	2b40      	cmp	r3, #64	; 0x40
 8006906:	d002      	beq.n	800690e <USBD_StdEPReq+0x2a>
 8006908:	2b00      	cmp	r3, #0
 800690a:	d008      	beq.n	800691e <USBD_StdEPReq+0x3a>
 800690c:	e13d      	b.n	8006b8a <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	6839      	ldr	r1, [r7, #0]
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	4798      	blx	r3
      break;
 800691c:	e13a      	b.n	8006b94 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006926:	2b20      	cmp	r3, #32
 8006928:	d10a      	bne.n	8006940 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	6839      	ldr	r1, [r7, #0]
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	4798      	blx	r3
 8006938:	4603      	mov	r3, r0
 800693a:	73fb      	strb	r3, [r7, #15]

        return ret;
 800693c:	7bfb      	ldrb	r3, [r7, #15]
 800693e:	e12a      	b.n	8006b96 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	785b      	ldrb	r3, [r3, #1]
 8006944:	2b01      	cmp	r3, #1
 8006946:	d03e      	beq.n	80069c6 <USBD_StdEPReq+0xe2>
 8006948:	2b03      	cmp	r3, #3
 800694a:	d002      	beq.n	8006952 <USBD_StdEPReq+0x6e>
 800694c:	2b00      	cmp	r3, #0
 800694e:	d070      	beq.n	8006a32 <USBD_StdEPReq+0x14e>
 8006950:	e115      	b.n	8006b7e <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006958:	2b02      	cmp	r3, #2
 800695a:	d002      	beq.n	8006962 <USBD_StdEPReq+0x7e>
 800695c:	2b03      	cmp	r3, #3
 800695e:	d015      	beq.n	800698c <USBD_StdEPReq+0xa8>
 8006960:	e02b      	b.n	80069ba <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006962:	7bbb      	ldrb	r3, [r7, #14]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d00c      	beq.n	8006982 <USBD_StdEPReq+0x9e>
 8006968:	7bbb      	ldrb	r3, [r7, #14]
 800696a:	2b80      	cmp	r3, #128	; 0x80
 800696c:	d009      	beq.n	8006982 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800696e:	7bbb      	ldrb	r3, [r7, #14]
 8006970:	4619      	mov	r1, r3
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f001 f837 	bl	80079e6 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006978:	2180      	movs	r1, #128	; 0x80
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f001 f833 	bl	80079e6 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006980:	e020      	b.n	80069c4 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8006982:	6839      	ldr	r1, [r7, #0]
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f000 fc1b 	bl	80071c0 <USBD_CtlError>
              break;
 800698a:	e01b      	b.n	80069c4 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	885b      	ldrh	r3, [r3, #2]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d10e      	bne.n	80069b2 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8006994:	7bbb      	ldrb	r3, [r7, #14]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d00b      	beq.n	80069b2 <USBD_StdEPReq+0xce>
 800699a:	7bbb      	ldrb	r3, [r7, #14]
 800699c:	2b80      	cmp	r3, #128	; 0x80
 800699e:	d008      	beq.n	80069b2 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	88db      	ldrh	r3, [r3, #6]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d104      	bne.n	80069b2 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80069a8:	7bbb      	ldrb	r3, [r7, #14]
 80069aa:	4619      	mov	r1, r3
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f001 f81a 	bl	80079e6 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 fcae 	bl	8007314 <USBD_CtlSendStatus>

              break;
 80069b8:	e004      	b.n	80069c4 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 80069ba:	6839      	ldr	r1, [r7, #0]
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f000 fbff 	bl	80071c0 <USBD_CtlError>
              break;
 80069c2:	bf00      	nop
          }
          break;
 80069c4:	e0e0      	b.n	8006b88 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069cc:	2b02      	cmp	r3, #2
 80069ce:	d002      	beq.n	80069d6 <USBD_StdEPReq+0xf2>
 80069d0:	2b03      	cmp	r3, #3
 80069d2:	d015      	beq.n	8006a00 <USBD_StdEPReq+0x11c>
 80069d4:	e026      	b.n	8006a24 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80069d6:	7bbb      	ldrb	r3, [r7, #14]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d00c      	beq.n	80069f6 <USBD_StdEPReq+0x112>
 80069dc:	7bbb      	ldrb	r3, [r7, #14]
 80069de:	2b80      	cmp	r3, #128	; 0x80
 80069e0:	d009      	beq.n	80069f6 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80069e2:	7bbb      	ldrb	r3, [r7, #14]
 80069e4:	4619      	mov	r1, r3
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 fffd 	bl	80079e6 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80069ec:	2180      	movs	r1, #128	; 0x80
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 fff9 	bl	80079e6 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80069f4:	e01c      	b.n	8006a30 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 80069f6:	6839      	ldr	r1, [r7, #0]
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f000 fbe1 	bl	80071c0 <USBD_CtlError>
              break;
 80069fe:	e017      	b.n	8006a30 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	885b      	ldrh	r3, [r3, #2]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d112      	bne.n	8006a2e <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006a08:	7bbb      	ldrb	r3, [r7, #14]
 8006a0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d004      	beq.n	8006a1c <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006a12:	7bbb      	ldrb	r3, [r7, #14]
 8006a14:	4619      	mov	r1, r3
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f001 f804 	bl	8007a24 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f000 fc79 	bl	8007314 <USBD_CtlSendStatus>
              }
              break;
 8006a22:	e004      	b.n	8006a2e <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8006a24:	6839      	ldr	r1, [r7, #0]
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 fbca 	bl	80071c0 <USBD_CtlError>
              break;
 8006a2c:	e000      	b.n	8006a30 <USBD_StdEPReq+0x14c>
              break;
 8006a2e:	bf00      	nop
          }
          break;
 8006a30:	e0aa      	b.n	8006b88 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a38:	2b02      	cmp	r3, #2
 8006a3a:	d002      	beq.n	8006a42 <USBD_StdEPReq+0x15e>
 8006a3c:	2b03      	cmp	r3, #3
 8006a3e:	d032      	beq.n	8006aa6 <USBD_StdEPReq+0x1c2>
 8006a40:	e097      	b.n	8006b72 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a42:	7bbb      	ldrb	r3, [r7, #14]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d007      	beq.n	8006a58 <USBD_StdEPReq+0x174>
 8006a48:	7bbb      	ldrb	r3, [r7, #14]
 8006a4a:	2b80      	cmp	r3, #128	; 0x80
 8006a4c:	d004      	beq.n	8006a58 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8006a4e:	6839      	ldr	r1, [r7, #0]
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 fbb5 	bl	80071c0 <USBD_CtlError>
                break;
 8006a56:	e091      	b.n	8006b7c <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	da0b      	bge.n	8006a78 <USBD_StdEPReq+0x194>
 8006a60:	7bbb      	ldrb	r3, [r7, #14]
 8006a62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006a66:	4613      	mov	r3, r2
 8006a68:	009b      	lsls	r3, r3, #2
 8006a6a:	4413      	add	r3, r2
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	3310      	adds	r3, #16
 8006a70:	687a      	ldr	r2, [r7, #4]
 8006a72:	4413      	add	r3, r2
 8006a74:	3304      	adds	r3, #4
 8006a76:	e00b      	b.n	8006a90 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006a78:	7bbb      	ldrb	r3, [r7, #14]
 8006a7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a7e:	4613      	mov	r3, r2
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	4413      	add	r3, r2
 8006a84:	009b      	lsls	r3, r3, #2
 8006a86:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	4413      	add	r3, r2
 8006a8e:	3304      	adds	r3, #4
 8006a90:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	2200      	movs	r2, #0
 8006a96:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	2202      	movs	r2, #2
 8006a9c:	4619      	mov	r1, r3
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 fbf8 	bl	8007294 <USBD_CtlSendData>
              break;
 8006aa4:	e06a      	b.n	8006b7c <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006aa6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	da11      	bge.n	8006ad2 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006aae:	7bbb      	ldrb	r3, [r7, #14]
 8006ab0:	f003 020f 	and.w	r2, r3, #15
 8006ab4:	6879      	ldr	r1, [r7, #4]
 8006ab6:	4613      	mov	r3, r2
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	4413      	add	r3, r2
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	440b      	add	r3, r1
 8006ac0:	3318      	adds	r3, #24
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d117      	bne.n	8006af8 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006ac8:	6839      	ldr	r1, [r7, #0]
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f000 fb78 	bl	80071c0 <USBD_CtlError>
                  break;
 8006ad0:	e054      	b.n	8006b7c <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006ad2:	7bbb      	ldrb	r3, [r7, #14]
 8006ad4:	f003 020f 	and.w	r2, r3, #15
 8006ad8:	6879      	ldr	r1, [r7, #4]
 8006ada:	4613      	mov	r3, r2
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	4413      	add	r3, r2
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	440b      	add	r3, r1
 8006ae4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d104      	bne.n	8006af8 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006aee:	6839      	ldr	r1, [r7, #0]
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f000 fb65 	bl	80071c0 <USBD_CtlError>
                  break;
 8006af6:	e041      	b.n	8006b7c <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006af8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	da0b      	bge.n	8006b18 <USBD_StdEPReq+0x234>
 8006b00:	7bbb      	ldrb	r3, [r7, #14]
 8006b02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b06:	4613      	mov	r3, r2
 8006b08:	009b      	lsls	r3, r3, #2
 8006b0a:	4413      	add	r3, r2
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	3310      	adds	r3, #16
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	4413      	add	r3, r2
 8006b14:	3304      	adds	r3, #4
 8006b16:	e00b      	b.n	8006b30 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006b18:	7bbb      	ldrb	r3, [r7, #14]
 8006b1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b1e:	4613      	mov	r3, r2
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	4413      	add	r3, r2
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006b2a:	687a      	ldr	r2, [r7, #4]
 8006b2c:	4413      	add	r3, r2
 8006b2e:	3304      	adds	r3, #4
 8006b30:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006b32:	7bbb      	ldrb	r3, [r7, #14]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d002      	beq.n	8006b3e <USBD_StdEPReq+0x25a>
 8006b38:	7bbb      	ldrb	r3, [r7, #14]
 8006b3a:	2b80      	cmp	r3, #128	; 0x80
 8006b3c:	d103      	bne.n	8006b46 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	2200      	movs	r2, #0
 8006b42:	601a      	str	r2, [r3, #0]
 8006b44:	e00e      	b.n	8006b64 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006b46:	7bbb      	ldrb	r3, [r7, #14]
 8006b48:	4619      	mov	r1, r3
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 ff89 	bl	8007a62 <USBD_LL_IsStallEP>
 8006b50:	4603      	mov	r3, r0
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d003      	beq.n	8006b5e <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	2201      	movs	r2, #1
 8006b5a:	601a      	str	r2, [r3, #0]
 8006b5c:	e002      	b.n	8006b64 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	2200      	movs	r2, #0
 8006b62:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	2202      	movs	r2, #2
 8006b68:	4619      	mov	r1, r3
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f000 fb92 	bl	8007294 <USBD_CtlSendData>
              break;
 8006b70:	e004      	b.n	8006b7c <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8006b72:	6839      	ldr	r1, [r7, #0]
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f000 fb23 	bl	80071c0 <USBD_CtlError>
              break;
 8006b7a:	bf00      	nop
          }
          break;
 8006b7c:	e004      	b.n	8006b88 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8006b7e:	6839      	ldr	r1, [r7, #0]
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f000 fb1d 	bl	80071c0 <USBD_CtlError>
          break;
 8006b86:	bf00      	nop
      }
      break;
 8006b88:	e004      	b.n	8006b94 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8006b8a:	6839      	ldr	r1, [r7, #0]
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f000 fb17 	bl	80071c0 <USBD_CtlError>
      break;
 8006b92:	bf00      	nop
  }

  return ret;
 8006b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3710      	adds	r7, #16
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
	...

08006ba0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b084      	sub	sp, #16
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006baa:	2300      	movs	r3, #0
 8006bac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	885b      	ldrh	r3, [r3, #2]
 8006bba:	0a1b      	lsrs	r3, r3, #8
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	3b01      	subs	r3, #1
 8006bc0:	2b06      	cmp	r3, #6
 8006bc2:	f200 8128 	bhi.w	8006e16 <USBD_GetDescriptor+0x276>
 8006bc6:	a201      	add	r2, pc, #4	; (adr r2, 8006bcc <USBD_GetDescriptor+0x2c>)
 8006bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bcc:	08006be9 	.word	0x08006be9
 8006bd0:	08006c01 	.word	0x08006c01
 8006bd4:	08006c41 	.word	0x08006c41
 8006bd8:	08006e17 	.word	0x08006e17
 8006bdc:	08006e17 	.word	0x08006e17
 8006be0:	08006db7 	.word	0x08006db7
 8006be4:	08006de3 	.word	0x08006de3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	7c12      	ldrb	r2, [r2, #16]
 8006bf4:	f107 0108 	add.w	r1, r7, #8
 8006bf8:	4610      	mov	r0, r2
 8006bfa:	4798      	blx	r3
 8006bfc:	60f8      	str	r0, [r7, #12]
      break;
 8006bfe:	e112      	b.n	8006e26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	7c1b      	ldrb	r3, [r3, #16]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d10d      	bne.n	8006c24 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c10:	f107 0208 	add.w	r2, r7, #8
 8006c14:	4610      	mov	r0, r2
 8006c16:	4798      	blx	r3
 8006c18:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	3301      	adds	r3, #1
 8006c1e:	2202      	movs	r2, #2
 8006c20:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006c22:	e100      	b.n	8006e26 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c2c:	f107 0208 	add.w	r2, r7, #8
 8006c30:	4610      	mov	r0, r2
 8006c32:	4798      	blx	r3
 8006c34:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	3301      	adds	r3, #1
 8006c3a:	2202      	movs	r2, #2
 8006c3c:	701a      	strb	r2, [r3, #0]
      break;
 8006c3e:	e0f2      	b.n	8006e26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	885b      	ldrh	r3, [r3, #2]
 8006c44:	b2db      	uxtb	r3, r3
 8006c46:	2b05      	cmp	r3, #5
 8006c48:	f200 80ac 	bhi.w	8006da4 <USBD_GetDescriptor+0x204>
 8006c4c:	a201      	add	r2, pc, #4	; (adr r2, 8006c54 <USBD_GetDescriptor+0xb4>)
 8006c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c52:	bf00      	nop
 8006c54:	08006c6d 	.word	0x08006c6d
 8006c58:	08006ca1 	.word	0x08006ca1
 8006c5c:	08006cd5 	.word	0x08006cd5
 8006c60:	08006d09 	.word	0x08006d09
 8006c64:	08006d3d 	.word	0x08006d3d
 8006c68:	08006d71 	.word	0x08006d71
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d00b      	beq.n	8006c90 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	687a      	ldr	r2, [r7, #4]
 8006c82:	7c12      	ldrb	r2, [r2, #16]
 8006c84:	f107 0108 	add.w	r1, r7, #8
 8006c88:	4610      	mov	r0, r2
 8006c8a:	4798      	blx	r3
 8006c8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c8e:	e091      	b.n	8006db4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c90:	6839      	ldr	r1, [r7, #0]
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 fa94 	bl	80071c0 <USBD_CtlError>
            err++;
 8006c98:	7afb      	ldrb	r3, [r7, #11]
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	72fb      	strb	r3, [r7, #11]
          break;
 8006c9e:	e089      	b.n	8006db4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d00b      	beq.n	8006cc4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	7c12      	ldrb	r2, [r2, #16]
 8006cb8:	f107 0108 	add.w	r1, r7, #8
 8006cbc:	4610      	mov	r0, r2
 8006cbe:	4798      	blx	r3
 8006cc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006cc2:	e077      	b.n	8006db4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006cc4:	6839      	ldr	r1, [r7, #0]
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 fa7a 	bl	80071c0 <USBD_CtlError>
            err++;
 8006ccc:	7afb      	ldrb	r3, [r7, #11]
 8006cce:	3301      	adds	r3, #1
 8006cd0:	72fb      	strb	r3, [r7, #11]
          break;
 8006cd2:	e06f      	b.n	8006db4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006cda:	68db      	ldr	r3, [r3, #12]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d00b      	beq.n	8006cf8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	687a      	ldr	r2, [r7, #4]
 8006cea:	7c12      	ldrb	r2, [r2, #16]
 8006cec:	f107 0108 	add.w	r1, r7, #8
 8006cf0:	4610      	mov	r0, r2
 8006cf2:	4798      	blx	r3
 8006cf4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006cf6:	e05d      	b.n	8006db4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006cf8:	6839      	ldr	r1, [r7, #0]
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 fa60 	bl	80071c0 <USBD_CtlError>
            err++;
 8006d00:	7afb      	ldrb	r3, [r7, #11]
 8006d02:	3301      	adds	r3, #1
 8006d04:	72fb      	strb	r3, [r7, #11]
          break;
 8006d06:	e055      	b.n	8006db4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006d0e:	691b      	ldr	r3, [r3, #16]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d00b      	beq.n	8006d2c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006d1a:	691b      	ldr	r3, [r3, #16]
 8006d1c:	687a      	ldr	r2, [r7, #4]
 8006d1e:	7c12      	ldrb	r2, [r2, #16]
 8006d20:	f107 0108 	add.w	r1, r7, #8
 8006d24:	4610      	mov	r0, r2
 8006d26:	4798      	blx	r3
 8006d28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d2a:	e043      	b.n	8006db4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d2c:	6839      	ldr	r1, [r7, #0]
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f000 fa46 	bl	80071c0 <USBD_CtlError>
            err++;
 8006d34:	7afb      	ldrb	r3, [r7, #11]
 8006d36:	3301      	adds	r3, #1
 8006d38:	72fb      	strb	r3, [r7, #11]
          break;
 8006d3a:	e03b      	b.n	8006db4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006d42:	695b      	ldr	r3, [r3, #20]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d00b      	beq.n	8006d60 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006d4e:	695b      	ldr	r3, [r3, #20]
 8006d50:	687a      	ldr	r2, [r7, #4]
 8006d52:	7c12      	ldrb	r2, [r2, #16]
 8006d54:	f107 0108 	add.w	r1, r7, #8
 8006d58:	4610      	mov	r0, r2
 8006d5a:	4798      	blx	r3
 8006d5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d5e:	e029      	b.n	8006db4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d60:	6839      	ldr	r1, [r7, #0]
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 fa2c 	bl	80071c0 <USBD_CtlError>
            err++;
 8006d68:	7afb      	ldrb	r3, [r7, #11]
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	72fb      	strb	r3, [r7, #11]
          break;
 8006d6e:	e021      	b.n	8006db4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006d76:	699b      	ldr	r3, [r3, #24]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d00b      	beq.n	8006d94 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006d82:	699b      	ldr	r3, [r3, #24]
 8006d84:	687a      	ldr	r2, [r7, #4]
 8006d86:	7c12      	ldrb	r2, [r2, #16]
 8006d88:	f107 0108 	add.w	r1, r7, #8
 8006d8c:	4610      	mov	r0, r2
 8006d8e:	4798      	blx	r3
 8006d90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d92:	e00f      	b.n	8006db4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d94:	6839      	ldr	r1, [r7, #0]
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 fa12 	bl	80071c0 <USBD_CtlError>
            err++;
 8006d9c:	7afb      	ldrb	r3, [r7, #11]
 8006d9e:	3301      	adds	r3, #1
 8006da0:	72fb      	strb	r3, [r7, #11]
          break;
 8006da2:	e007      	b.n	8006db4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006da4:	6839      	ldr	r1, [r7, #0]
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 fa0a 	bl	80071c0 <USBD_CtlError>
          err++;
 8006dac:	7afb      	ldrb	r3, [r7, #11]
 8006dae:	3301      	adds	r3, #1
 8006db0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8006db2:	e038      	b.n	8006e26 <USBD_GetDescriptor+0x286>
 8006db4:	e037      	b.n	8006e26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	7c1b      	ldrb	r3, [r3, #16]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d109      	bne.n	8006dd2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dc6:	f107 0208 	add.w	r2, r7, #8
 8006dca:	4610      	mov	r0, r2
 8006dcc:	4798      	blx	r3
 8006dce:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006dd0:	e029      	b.n	8006e26 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006dd2:	6839      	ldr	r1, [r7, #0]
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f000 f9f3 	bl	80071c0 <USBD_CtlError>
        err++;
 8006dda:	7afb      	ldrb	r3, [r7, #11]
 8006ddc:	3301      	adds	r3, #1
 8006dde:	72fb      	strb	r3, [r7, #11]
      break;
 8006de0:	e021      	b.n	8006e26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	7c1b      	ldrb	r3, [r3, #16]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d10d      	bne.n	8006e06 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006df2:	f107 0208 	add.w	r2, r7, #8
 8006df6:	4610      	mov	r0, r2
 8006df8:	4798      	blx	r3
 8006dfa:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	3301      	adds	r3, #1
 8006e00:	2207      	movs	r2, #7
 8006e02:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006e04:	e00f      	b.n	8006e26 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006e06:	6839      	ldr	r1, [r7, #0]
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 f9d9 	bl	80071c0 <USBD_CtlError>
        err++;
 8006e0e:	7afb      	ldrb	r3, [r7, #11]
 8006e10:	3301      	adds	r3, #1
 8006e12:	72fb      	strb	r3, [r7, #11]
      break;
 8006e14:	e007      	b.n	8006e26 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006e16:	6839      	ldr	r1, [r7, #0]
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 f9d1 	bl	80071c0 <USBD_CtlError>
      err++;
 8006e1e:	7afb      	ldrb	r3, [r7, #11]
 8006e20:	3301      	adds	r3, #1
 8006e22:	72fb      	strb	r3, [r7, #11]
      break;
 8006e24:	bf00      	nop
  }

  if (err != 0U)
 8006e26:	7afb      	ldrb	r3, [r7, #11]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d11c      	bne.n	8006e66 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006e2c:	893b      	ldrh	r3, [r7, #8]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d011      	beq.n	8006e56 <USBD_GetDescriptor+0x2b6>
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	88db      	ldrh	r3, [r3, #6]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d00d      	beq.n	8006e56 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	88da      	ldrh	r2, [r3, #6]
 8006e3e:	893b      	ldrh	r3, [r7, #8]
 8006e40:	4293      	cmp	r3, r2
 8006e42:	bf28      	it	cs
 8006e44:	4613      	movcs	r3, r2
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006e4a:	893b      	ldrh	r3, [r7, #8]
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	68f9      	ldr	r1, [r7, #12]
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f000 fa1f 	bl	8007294 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	88db      	ldrh	r3, [r3, #6]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d104      	bne.n	8006e68 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 fa58 	bl	8007314 <USBD_CtlSendStatus>
 8006e64:	e000      	b.n	8006e68 <USBD_GetDescriptor+0x2c8>
    return;
 8006e66:	bf00      	nop
    }
  }
}
 8006e68:	3710      	adds	r7, #16
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}
 8006e6e:	bf00      	nop

08006e70 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b084      	sub	sp, #16
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	889b      	ldrh	r3, [r3, #4]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d130      	bne.n	8006ee4 <USBD_SetAddress+0x74>
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	88db      	ldrh	r3, [r3, #6]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d12c      	bne.n	8006ee4 <USBD_SetAddress+0x74>
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	885b      	ldrh	r3, [r3, #2]
 8006e8e:	2b7f      	cmp	r3, #127	; 0x7f
 8006e90:	d828      	bhi.n	8006ee4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	885b      	ldrh	r3, [r3, #2]
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e9c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ea4:	2b03      	cmp	r3, #3
 8006ea6:	d104      	bne.n	8006eb2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006ea8:	6839      	ldr	r1, [r7, #0]
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 f988 	bl	80071c0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006eb0:	e01c      	b.n	8006eec <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	7bfa      	ldrb	r2, [r7, #15]
 8006eb6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006eba:	7bfb      	ldrb	r3, [r7, #15]
 8006ebc:	4619      	mov	r1, r3
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f000 fdfb 	bl	8007aba <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 fa25 	bl	8007314 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006eca:	7bfb      	ldrb	r3, [r7, #15]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d004      	beq.n	8006eda <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2202      	movs	r2, #2
 8006ed4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ed8:	e008      	b.n	8006eec <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2201      	movs	r2, #1
 8006ede:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ee2:	e003      	b.n	8006eec <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006ee4:	6839      	ldr	r1, [r7, #0]
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 f96a 	bl	80071c0 <USBD_CtlError>
  }
}
 8006eec:	bf00      	nop
 8006eee:	3710      	adds	r7, #16
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}

08006ef4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b082      	sub	sp, #8
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	885b      	ldrh	r3, [r3, #2]
 8006f02:	b2da      	uxtb	r2, r3
 8006f04:	4b41      	ldr	r3, [pc, #260]	; (800700c <USBD_SetConfig+0x118>)
 8006f06:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006f08:	4b40      	ldr	r3, [pc, #256]	; (800700c <USBD_SetConfig+0x118>)
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d904      	bls.n	8006f1a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006f10:	6839      	ldr	r1, [r7, #0]
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 f954 	bl	80071c0 <USBD_CtlError>
 8006f18:	e075      	b.n	8007006 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f20:	2b02      	cmp	r3, #2
 8006f22:	d002      	beq.n	8006f2a <USBD_SetConfig+0x36>
 8006f24:	2b03      	cmp	r3, #3
 8006f26:	d023      	beq.n	8006f70 <USBD_SetConfig+0x7c>
 8006f28:	e062      	b.n	8006ff0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006f2a:	4b38      	ldr	r3, [pc, #224]	; (800700c <USBD_SetConfig+0x118>)
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d01a      	beq.n	8006f68 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8006f32:	4b36      	ldr	r3, [pc, #216]	; (800700c <USBD_SetConfig+0x118>)
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	461a      	mov	r2, r3
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2203      	movs	r2, #3
 8006f40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006f44:	4b31      	ldr	r3, [pc, #196]	; (800700c <USBD_SetConfig+0x118>)
 8006f46:	781b      	ldrb	r3, [r3, #0]
 8006f48:	4619      	mov	r1, r3
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f7ff f9f4 	bl	8006338 <USBD_SetClassConfig>
 8006f50:	4603      	mov	r3, r0
 8006f52:	2b02      	cmp	r3, #2
 8006f54:	d104      	bne.n	8006f60 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8006f56:	6839      	ldr	r1, [r7, #0]
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f000 f931 	bl	80071c0 <USBD_CtlError>
            return;
 8006f5e:	e052      	b.n	8007006 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f000 f9d7 	bl	8007314 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006f66:	e04e      	b.n	8007006 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f000 f9d3 	bl	8007314 <USBD_CtlSendStatus>
        break;
 8006f6e:	e04a      	b.n	8007006 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006f70:	4b26      	ldr	r3, [pc, #152]	; (800700c <USBD_SetConfig+0x118>)
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d112      	bne.n	8006f9e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2202      	movs	r2, #2
 8006f7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006f80:	4b22      	ldr	r3, [pc, #136]	; (800700c <USBD_SetConfig+0x118>)
 8006f82:	781b      	ldrb	r3, [r3, #0]
 8006f84:	461a      	mov	r2, r3
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006f8a:	4b20      	ldr	r3, [pc, #128]	; (800700c <USBD_SetConfig+0x118>)
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	4619      	mov	r1, r3
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f7ff f9f0 	bl	8006376 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 f9bc 	bl	8007314 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006f9c:	e033      	b.n	8007006 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8006f9e:	4b1b      	ldr	r3, [pc, #108]	; (800700c <USBD_SetConfig+0x118>)
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d01d      	beq.n	8006fe8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	b2db      	uxtb	r3, r3
 8006fb2:	4619      	mov	r1, r3
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f7ff f9de 	bl	8006376 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006fba:	4b14      	ldr	r3, [pc, #80]	; (800700c <USBD_SetConfig+0x118>)
 8006fbc:	781b      	ldrb	r3, [r3, #0]
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006fc4:	4b11      	ldr	r3, [pc, #68]	; (800700c <USBD_SetConfig+0x118>)
 8006fc6:	781b      	ldrb	r3, [r3, #0]
 8006fc8:	4619      	mov	r1, r3
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f7ff f9b4 	bl	8006338 <USBD_SetClassConfig>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	2b02      	cmp	r3, #2
 8006fd4:	d104      	bne.n	8006fe0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8006fd6:	6839      	ldr	r1, [r7, #0]
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 f8f1 	bl	80071c0 <USBD_CtlError>
            return;
 8006fde:	e012      	b.n	8007006 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f000 f997 	bl	8007314 <USBD_CtlSendStatus>
        break;
 8006fe6:	e00e      	b.n	8007006 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f000 f993 	bl	8007314 <USBD_CtlSendStatus>
        break;
 8006fee:	e00a      	b.n	8007006 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006ff0:	6839      	ldr	r1, [r7, #0]
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 f8e4 	bl	80071c0 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006ff8:	4b04      	ldr	r3, [pc, #16]	; (800700c <USBD_SetConfig+0x118>)
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f7ff f9b9 	bl	8006376 <USBD_ClrClassConfig>
        break;
 8007004:	bf00      	nop
    }
  }
}
 8007006:	3708      	adds	r7, #8
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}
 800700c:	2000013c 	.word	0x2000013c

08007010 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b082      	sub	sp, #8
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	88db      	ldrh	r3, [r3, #6]
 800701e:	2b01      	cmp	r3, #1
 8007020:	d004      	beq.n	800702c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007022:	6839      	ldr	r1, [r7, #0]
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f000 f8cb 	bl	80071c0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800702a:	e021      	b.n	8007070 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007032:	2b01      	cmp	r3, #1
 8007034:	db17      	blt.n	8007066 <USBD_GetConfig+0x56>
 8007036:	2b02      	cmp	r3, #2
 8007038:	dd02      	ble.n	8007040 <USBD_GetConfig+0x30>
 800703a:	2b03      	cmp	r3, #3
 800703c:	d00b      	beq.n	8007056 <USBD_GetConfig+0x46>
 800703e:	e012      	b.n	8007066 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	3308      	adds	r3, #8
 800704a:	2201      	movs	r2, #1
 800704c:	4619      	mov	r1, r3
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 f920 	bl	8007294 <USBD_CtlSendData>
        break;
 8007054:	e00c      	b.n	8007070 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	3304      	adds	r3, #4
 800705a:	2201      	movs	r2, #1
 800705c:	4619      	mov	r1, r3
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f000 f918 	bl	8007294 <USBD_CtlSendData>
        break;
 8007064:	e004      	b.n	8007070 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8007066:	6839      	ldr	r1, [r7, #0]
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f000 f8a9 	bl	80071c0 <USBD_CtlError>
        break;
 800706e:	bf00      	nop
}
 8007070:	bf00      	nop
 8007072:	3708      	adds	r7, #8
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}

08007078 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b082      	sub	sp, #8
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007088:	3b01      	subs	r3, #1
 800708a:	2b02      	cmp	r3, #2
 800708c:	d81e      	bhi.n	80070cc <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	88db      	ldrh	r3, [r3, #6]
 8007092:	2b02      	cmp	r3, #2
 8007094:	d004      	beq.n	80070a0 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007096:	6839      	ldr	r1, [r7, #0]
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f000 f891 	bl	80071c0 <USBD_CtlError>
        break;
 800709e:	e01a      	b.n	80070d6 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2201      	movs	r2, #1
 80070a4:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d005      	beq.n	80070bc <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	68db      	ldr	r3, [r3, #12]
 80070b4:	f043 0202 	orr.w	r2, r3, #2
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	330c      	adds	r3, #12
 80070c0:	2202      	movs	r2, #2
 80070c2:	4619      	mov	r1, r3
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f000 f8e5 	bl	8007294 <USBD_CtlSendData>
      break;
 80070ca:	e004      	b.n	80070d6 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80070cc:	6839      	ldr	r1, [r7, #0]
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 f876 	bl	80071c0 <USBD_CtlError>
      break;
 80070d4:	bf00      	nop
  }
}
 80070d6:	bf00      	nop
 80070d8:	3708      	adds	r7, #8
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}

080070de <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80070de:	b580      	push	{r7, lr}
 80070e0:	b082      	sub	sp, #8
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	6078      	str	r0, [r7, #4]
 80070e6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	885b      	ldrh	r3, [r3, #2]
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d106      	bne.n	80070fe <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f000 f90b 	bl	8007314 <USBD_CtlSendStatus>
  }
}
 80070fe:	bf00      	nop
 8007100:	3708      	adds	r7, #8
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}

08007106 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007106:	b580      	push	{r7, lr}
 8007108:	b082      	sub	sp, #8
 800710a:	af00      	add	r7, sp, #0
 800710c:	6078      	str	r0, [r7, #4]
 800710e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007116:	3b01      	subs	r3, #1
 8007118:	2b02      	cmp	r3, #2
 800711a:	d80b      	bhi.n	8007134 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	885b      	ldrh	r3, [r3, #2]
 8007120:	2b01      	cmp	r3, #1
 8007122:	d10c      	bne.n	800713e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2200      	movs	r2, #0
 8007128:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f000 f8f1 	bl	8007314 <USBD_CtlSendStatus>
      }
      break;
 8007132:	e004      	b.n	800713e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007134:	6839      	ldr	r1, [r7, #0]
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f000 f842 	bl	80071c0 <USBD_CtlError>
      break;
 800713c:	e000      	b.n	8007140 <USBD_ClrFeature+0x3a>
      break;
 800713e:	bf00      	nop
  }
}
 8007140:	bf00      	nop
 8007142:	3708      	adds	r7, #8
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007148:	b480      	push	{r7}
 800714a:	b083      	sub	sp, #12
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	781a      	ldrb	r2, [r3, #0]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	785a      	ldrb	r2, [r3, #1]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	3302      	adds	r3, #2
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	b29a      	uxth	r2, r3
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	3303      	adds	r3, #3
 800716e:	781b      	ldrb	r3, [r3, #0]
 8007170:	b29b      	uxth	r3, r3
 8007172:	021b      	lsls	r3, r3, #8
 8007174:	b29b      	uxth	r3, r3
 8007176:	4413      	add	r3, r2
 8007178:	b29a      	uxth	r2, r3
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	3304      	adds	r3, #4
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	b29a      	uxth	r2, r3
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	3305      	adds	r3, #5
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	b29b      	uxth	r3, r3
 800718e:	021b      	lsls	r3, r3, #8
 8007190:	b29b      	uxth	r3, r3
 8007192:	4413      	add	r3, r2
 8007194:	b29a      	uxth	r2, r3
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	3306      	adds	r3, #6
 800719e:	781b      	ldrb	r3, [r3, #0]
 80071a0:	b29a      	uxth	r2, r3
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	3307      	adds	r3, #7
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	021b      	lsls	r3, r3, #8
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	4413      	add	r3, r2
 80071b0:	b29a      	uxth	r2, r3
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	80da      	strh	r2, [r3, #6]

}
 80071b6:	bf00      	nop
 80071b8:	370c      	adds	r7, #12
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bc80      	pop	{r7}
 80071be:	4770      	bx	lr

080071c0 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b082      	sub	sp, #8
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80071ca:	2180      	movs	r1, #128	; 0x80
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f000 fc0a 	bl	80079e6 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80071d2:	2100      	movs	r1, #0
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f000 fc06 	bl	80079e6 <USBD_LL_StallEP>
}
 80071da:	bf00      	nop
 80071dc:	3708      	adds	r7, #8
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}

080071e2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80071e2:	b580      	push	{r7, lr}
 80071e4:	b086      	sub	sp, #24
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	60f8      	str	r0, [r7, #12]
 80071ea:	60b9      	str	r1, [r7, #8]
 80071ec:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80071ee:	2300      	movs	r3, #0
 80071f0:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d032      	beq.n	800725e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80071f8:	68f8      	ldr	r0, [r7, #12]
 80071fa:	f000 f834 	bl	8007266 <USBD_GetLen>
 80071fe:	4603      	mov	r3, r0
 8007200:	3301      	adds	r3, #1
 8007202:	b29b      	uxth	r3, r3
 8007204:	005b      	lsls	r3, r3, #1
 8007206:	b29a      	uxth	r2, r3
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800720c:	7dfb      	ldrb	r3, [r7, #23]
 800720e:	1c5a      	adds	r2, r3, #1
 8007210:	75fa      	strb	r2, [r7, #23]
 8007212:	461a      	mov	r2, r3
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	4413      	add	r3, r2
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	7812      	ldrb	r2, [r2, #0]
 800721c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800721e:	7dfb      	ldrb	r3, [r7, #23]
 8007220:	1c5a      	adds	r2, r3, #1
 8007222:	75fa      	strb	r2, [r7, #23]
 8007224:	461a      	mov	r2, r3
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	4413      	add	r3, r2
 800722a:	2203      	movs	r2, #3
 800722c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800722e:	e012      	b.n	8007256 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	1c5a      	adds	r2, r3, #1
 8007234:	60fa      	str	r2, [r7, #12]
 8007236:	7dfa      	ldrb	r2, [r7, #23]
 8007238:	1c51      	adds	r1, r2, #1
 800723a:	75f9      	strb	r1, [r7, #23]
 800723c:	4611      	mov	r1, r2
 800723e:	68ba      	ldr	r2, [r7, #8]
 8007240:	440a      	add	r2, r1
 8007242:	781b      	ldrb	r3, [r3, #0]
 8007244:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007246:	7dfb      	ldrb	r3, [r7, #23]
 8007248:	1c5a      	adds	r2, r3, #1
 800724a:	75fa      	strb	r2, [r7, #23]
 800724c:	461a      	mov	r2, r3
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	4413      	add	r3, r2
 8007252:	2200      	movs	r2, #0
 8007254:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	781b      	ldrb	r3, [r3, #0]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d1e8      	bne.n	8007230 <USBD_GetString+0x4e>
    }
  }
}
 800725e:	bf00      	nop
 8007260:	3718      	adds	r7, #24
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}

08007266 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007266:	b480      	push	{r7}
 8007268:	b085      	sub	sp, #20
 800726a:	af00      	add	r7, sp, #0
 800726c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800726e:	2300      	movs	r3, #0
 8007270:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007272:	e005      	b.n	8007280 <USBD_GetLen+0x1a>
  {
    len++;
 8007274:	7bfb      	ldrb	r3, [r7, #15]
 8007276:	3301      	adds	r3, #1
 8007278:	73fb      	strb	r3, [r7, #15]
    buf++;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	3301      	adds	r3, #1
 800727e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	781b      	ldrb	r3, [r3, #0]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d1f5      	bne.n	8007274 <USBD_GetLen+0xe>
  }

  return len;
 8007288:	7bfb      	ldrb	r3, [r7, #15]
}
 800728a:	4618      	mov	r0, r3
 800728c:	3714      	adds	r7, #20
 800728e:	46bd      	mov	sp, r7
 8007290:	bc80      	pop	{r7}
 8007292:	4770      	bx	lr

08007294 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b084      	sub	sp, #16
 8007298:	af00      	add	r7, sp, #0
 800729a:	60f8      	str	r0, [r7, #12]
 800729c:	60b9      	str	r1, [r7, #8]
 800729e:	4613      	mov	r3, r2
 80072a0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2202      	movs	r2, #2
 80072a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80072aa:	88fa      	ldrh	r2, [r7, #6]
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80072b0:	88fa      	ldrh	r2, [r7, #6]
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80072b6:	88fb      	ldrh	r3, [r7, #6]
 80072b8:	68ba      	ldr	r2, [r7, #8]
 80072ba:	2100      	movs	r1, #0
 80072bc:	68f8      	ldr	r0, [r7, #12]
 80072be:	f000 fc1b 	bl	8007af8 <USBD_LL_Transmit>

  return USBD_OK;
 80072c2:	2300      	movs	r3, #0
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3710      	adds	r7, #16
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}

080072cc <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b084      	sub	sp, #16
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	60f8      	str	r0, [r7, #12]
 80072d4:	60b9      	str	r1, [r7, #8]
 80072d6:	4613      	mov	r3, r2
 80072d8:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80072da:	88fb      	ldrh	r3, [r7, #6]
 80072dc:	68ba      	ldr	r2, [r7, #8]
 80072de:	2100      	movs	r1, #0
 80072e0:	68f8      	ldr	r0, [r7, #12]
 80072e2:	f000 fc09 	bl	8007af8 <USBD_LL_Transmit>

  return USBD_OK;
 80072e6:	2300      	movs	r3, #0
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3710      	adds	r7, #16
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b084      	sub	sp, #16
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	60f8      	str	r0, [r7, #12]
 80072f8:	60b9      	str	r1, [r7, #8]
 80072fa:	4613      	mov	r3, r2
 80072fc:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80072fe:	88fb      	ldrh	r3, [r7, #6]
 8007300:	68ba      	ldr	r2, [r7, #8]
 8007302:	2100      	movs	r1, #0
 8007304:	68f8      	ldr	r0, [r7, #12]
 8007306:	f000 fc1a 	bl	8007b3e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800730a:	2300      	movs	r3, #0
}
 800730c:	4618      	mov	r0, r3
 800730e:	3710      	adds	r7, #16
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b082      	sub	sp, #8
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2204      	movs	r2, #4
 8007320:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007324:	2300      	movs	r3, #0
 8007326:	2200      	movs	r2, #0
 8007328:	2100      	movs	r1, #0
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f000 fbe4 	bl	8007af8 <USBD_LL_Transmit>

  return USBD_OK;
 8007330:	2300      	movs	r3, #0
}
 8007332:	4618      	mov	r0, r3
 8007334:	3708      	adds	r7, #8
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}

0800733a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800733a:	b580      	push	{r7, lr}
 800733c:	b082      	sub	sp, #8
 800733e:	af00      	add	r7, sp, #0
 8007340:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2205      	movs	r2, #5
 8007346:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800734a:	2300      	movs	r3, #0
 800734c:	2200      	movs	r2, #0
 800734e:	2100      	movs	r1, #0
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f000 fbf4 	bl	8007b3e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007356:	2300      	movs	r3, #0
}
 8007358:	4618      	mov	r0, r3
 800735a:	3708      	adds	r7, #8
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007364:	2200      	movs	r2, #0
 8007366:	4912      	ldr	r1, [pc, #72]	; (80073b0 <MX_USB_DEVICE_Init+0x50>)
 8007368:	4812      	ldr	r0, [pc, #72]	; (80073b4 <MX_USB_DEVICE_Init+0x54>)
 800736a:	f7fe ff8b 	bl	8006284 <USBD_Init>
 800736e:	4603      	mov	r3, r0
 8007370:	2b00      	cmp	r3, #0
 8007372:	d001      	beq.n	8007378 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007374:	f7f8 fff6 	bl	8000364 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8007378:	490f      	ldr	r1, [pc, #60]	; (80073b8 <MX_USB_DEVICE_Init+0x58>)
 800737a:	480e      	ldr	r0, [pc, #56]	; (80073b4 <MX_USB_DEVICE_Init+0x54>)
 800737c:	f7fe ffad 	bl	80062da <USBD_RegisterClass>
 8007380:	4603      	mov	r3, r0
 8007382:	2b00      	cmp	r3, #0
 8007384:	d001      	beq.n	800738a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007386:	f7f8 ffed 	bl	8000364 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 800738a:	490c      	ldr	r1, [pc, #48]	; (80073bc <MX_USB_DEVICE_Init+0x5c>)
 800738c:	4809      	ldr	r0, [pc, #36]	; (80073b4 <MX_USB_DEVICE_Init+0x54>)
 800738e:	f7fd ff5b 	bl	8005248 <USBD_MSC_RegisterStorage>
 8007392:	4603      	mov	r3, r0
 8007394:	2b00      	cmp	r3, #0
 8007396:	d001      	beq.n	800739c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007398:	f7f8 ffe4 	bl	8000364 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800739c:	4805      	ldr	r0, [pc, #20]	; (80073b4 <MX_USB_DEVICE_Init+0x54>)
 800739e:	f7fe ffb5 	bl	800630c <USBD_Start>
 80073a2:	4603      	mov	r3, r0
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d001      	beq.n	80073ac <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80073a8:	f7f8 ffdc 	bl	8000364 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80073ac:	bf00      	nop
 80073ae:	bd80      	pop	{r7, pc}
 80073b0:	200000b0 	.word	0x200000b0
 80073b4:	200003c8 	.word	0x200003c8
 80073b8:	2000000c 	.word	0x2000000c
 80073bc:	20000100 	.word	0x20000100

080073c0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b083      	sub	sp, #12
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	4603      	mov	r3, r0
 80073c8:	6039      	str	r1, [r7, #0]
 80073ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	2212      	movs	r2, #18
 80073d0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80073d2:	4b03      	ldr	r3, [pc, #12]	; (80073e0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	370c      	adds	r7, #12
 80073d8:	46bd      	mov	sp, r7
 80073da:	bc80      	pop	{r7}
 80073dc:	4770      	bx	lr
 80073de:	bf00      	nop
 80073e0:	200000cc 	.word	0x200000cc

080073e4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b083      	sub	sp, #12
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	4603      	mov	r3, r0
 80073ec:	6039      	str	r1, [r7, #0]
 80073ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	2204      	movs	r2, #4
 80073f4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80073f6:	4b03      	ldr	r3, [pc, #12]	; (8007404 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	370c      	adds	r7, #12
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bc80      	pop	{r7}
 8007400:	4770      	bx	lr
 8007402:	bf00      	nop
 8007404:	200000e0 	.word	0x200000e0

08007408 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b082      	sub	sp, #8
 800740c:	af00      	add	r7, sp, #0
 800740e:	4603      	mov	r3, r0
 8007410:	6039      	str	r1, [r7, #0]
 8007412:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007414:	79fb      	ldrb	r3, [r7, #7]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d105      	bne.n	8007426 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800741a:	683a      	ldr	r2, [r7, #0]
 800741c:	4907      	ldr	r1, [pc, #28]	; (800743c <USBD_FS_ProductStrDescriptor+0x34>)
 800741e:	4808      	ldr	r0, [pc, #32]	; (8007440 <USBD_FS_ProductStrDescriptor+0x38>)
 8007420:	f7ff fedf 	bl	80071e2 <USBD_GetString>
 8007424:	e004      	b.n	8007430 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007426:	683a      	ldr	r2, [r7, #0]
 8007428:	4904      	ldr	r1, [pc, #16]	; (800743c <USBD_FS_ProductStrDescriptor+0x34>)
 800742a:	4805      	ldr	r0, [pc, #20]	; (8007440 <USBD_FS_ProductStrDescriptor+0x38>)
 800742c:	f7ff fed9 	bl	80071e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007430:	4b02      	ldr	r3, [pc, #8]	; (800743c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007432:	4618      	mov	r0, r3
 8007434:	3708      	adds	r7, #8
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}
 800743a:	bf00      	nop
 800743c:	2000068c 	.word	0x2000068c
 8007440:	08007cf4 	.word	0x08007cf4

08007444 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b082      	sub	sp, #8
 8007448:	af00      	add	r7, sp, #0
 800744a:	4603      	mov	r3, r0
 800744c:	6039      	str	r1, [r7, #0]
 800744e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007450:	683a      	ldr	r2, [r7, #0]
 8007452:	4904      	ldr	r1, [pc, #16]	; (8007464 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007454:	4804      	ldr	r0, [pc, #16]	; (8007468 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007456:	f7ff fec4 	bl	80071e2 <USBD_GetString>
  return USBD_StrDesc;
 800745a:	4b02      	ldr	r3, [pc, #8]	; (8007464 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800745c:	4618      	mov	r0, r3
 800745e:	3708      	adds	r7, #8
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}
 8007464:	2000068c 	.word	0x2000068c
 8007468:	08007d08 	.word	0x08007d08

0800746c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b082      	sub	sp, #8
 8007470:	af00      	add	r7, sp, #0
 8007472:	4603      	mov	r3, r0
 8007474:	6039      	str	r1, [r7, #0]
 8007476:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	221a      	movs	r2, #26
 800747c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800747e:	f000 f843 	bl	8007508 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007482:	4b02      	ldr	r3, [pc, #8]	; (800748c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007484:	4618      	mov	r0, r3
 8007486:	3708      	adds	r7, #8
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}
 800748c:	200000e4 	.word	0x200000e4

08007490 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b082      	sub	sp, #8
 8007494:	af00      	add	r7, sp, #0
 8007496:	4603      	mov	r3, r0
 8007498:	6039      	str	r1, [r7, #0]
 800749a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800749c:	79fb      	ldrb	r3, [r7, #7]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d105      	bne.n	80074ae <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80074a2:	683a      	ldr	r2, [r7, #0]
 80074a4:	4907      	ldr	r1, [pc, #28]	; (80074c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80074a6:	4808      	ldr	r0, [pc, #32]	; (80074c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80074a8:	f7ff fe9b 	bl	80071e2 <USBD_GetString>
 80074ac:	e004      	b.n	80074b8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80074ae:	683a      	ldr	r2, [r7, #0]
 80074b0:	4904      	ldr	r1, [pc, #16]	; (80074c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80074b2:	4805      	ldr	r0, [pc, #20]	; (80074c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80074b4:	f7ff fe95 	bl	80071e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80074b8:	4b02      	ldr	r3, [pc, #8]	; (80074c4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3708      	adds	r7, #8
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}
 80074c2:	bf00      	nop
 80074c4:	2000068c 	.word	0x2000068c
 80074c8:	08007d1c 	.word	0x08007d1c

080074cc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b082      	sub	sp, #8
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	4603      	mov	r3, r0
 80074d4:	6039      	str	r1, [r7, #0]
 80074d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80074d8:	79fb      	ldrb	r3, [r7, #7]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d105      	bne.n	80074ea <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80074de:	683a      	ldr	r2, [r7, #0]
 80074e0:	4907      	ldr	r1, [pc, #28]	; (8007500 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80074e2:	4808      	ldr	r0, [pc, #32]	; (8007504 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80074e4:	f7ff fe7d 	bl	80071e2 <USBD_GetString>
 80074e8:	e004      	b.n	80074f4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80074ea:	683a      	ldr	r2, [r7, #0]
 80074ec:	4904      	ldr	r1, [pc, #16]	; (8007500 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80074ee:	4805      	ldr	r0, [pc, #20]	; (8007504 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80074f0:	f7ff fe77 	bl	80071e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80074f4:	4b02      	ldr	r3, [pc, #8]	; (8007500 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3708      	adds	r7, #8
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
 80074fe:	bf00      	nop
 8007500:	2000068c 	.word	0x2000068c
 8007504:	08007d28 	.word	0x08007d28

08007508 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b084      	sub	sp, #16
 800750c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800750e:	4b0f      	ldr	r3, [pc, #60]	; (800754c <Get_SerialNum+0x44>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007514:	4b0e      	ldr	r3, [pc, #56]	; (8007550 <Get_SerialNum+0x48>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800751a:	4b0e      	ldr	r3, [pc, #56]	; (8007554 <Get_SerialNum+0x4c>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007520:	68fa      	ldr	r2, [r7, #12]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	4413      	add	r3, r2
 8007526:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d009      	beq.n	8007542 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800752e:	2208      	movs	r2, #8
 8007530:	4909      	ldr	r1, [pc, #36]	; (8007558 <Get_SerialNum+0x50>)
 8007532:	68f8      	ldr	r0, [r7, #12]
 8007534:	f000 f814 	bl	8007560 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007538:	2204      	movs	r2, #4
 800753a:	4908      	ldr	r1, [pc, #32]	; (800755c <Get_SerialNum+0x54>)
 800753c:	68b8      	ldr	r0, [r7, #8]
 800753e:	f000 f80f 	bl	8007560 <IntToUnicode>
  }
}
 8007542:	bf00      	nop
 8007544:	3710      	adds	r7, #16
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
 800754a:	bf00      	nop
 800754c:	1ffff7e8 	.word	0x1ffff7e8
 8007550:	1ffff7ec 	.word	0x1ffff7ec
 8007554:	1ffff7f0 	.word	0x1ffff7f0
 8007558:	200000e6 	.word	0x200000e6
 800755c:	200000f6 	.word	0x200000f6

08007560 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007560:	b480      	push	{r7}
 8007562:	b087      	sub	sp, #28
 8007564:	af00      	add	r7, sp, #0
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	4613      	mov	r3, r2
 800756c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800756e:	2300      	movs	r3, #0
 8007570:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007572:	2300      	movs	r3, #0
 8007574:	75fb      	strb	r3, [r7, #23]
 8007576:	e027      	b.n	80075c8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	0f1b      	lsrs	r3, r3, #28
 800757c:	2b09      	cmp	r3, #9
 800757e:	d80b      	bhi.n	8007598 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	0f1b      	lsrs	r3, r3, #28
 8007584:	b2da      	uxtb	r2, r3
 8007586:	7dfb      	ldrb	r3, [r7, #23]
 8007588:	005b      	lsls	r3, r3, #1
 800758a:	4619      	mov	r1, r3
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	440b      	add	r3, r1
 8007590:	3230      	adds	r2, #48	; 0x30
 8007592:	b2d2      	uxtb	r2, r2
 8007594:	701a      	strb	r2, [r3, #0]
 8007596:	e00a      	b.n	80075ae <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	0f1b      	lsrs	r3, r3, #28
 800759c:	b2da      	uxtb	r2, r3
 800759e:	7dfb      	ldrb	r3, [r7, #23]
 80075a0:	005b      	lsls	r3, r3, #1
 80075a2:	4619      	mov	r1, r3
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	440b      	add	r3, r1
 80075a8:	3237      	adds	r2, #55	; 0x37
 80075aa:	b2d2      	uxtb	r2, r2
 80075ac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	011b      	lsls	r3, r3, #4
 80075b2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80075b4:	7dfb      	ldrb	r3, [r7, #23]
 80075b6:	005b      	lsls	r3, r3, #1
 80075b8:	3301      	adds	r3, #1
 80075ba:	68ba      	ldr	r2, [r7, #8]
 80075bc:	4413      	add	r3, r2
 80075be:	2200      	movs	r2, #0
 80075c0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80075c2:	7dfb      	ldrb	r3, [r7, #23]
 80075c4:	3301      	adds	r3, #1
 80075c6:	75fb      	strb	r3, [r7, #23]
 80075c8:	7dfa      	ldrb	r2, [r7, #23]
 80075ca:	79fb      	ldrb	r3, [r7, #7]
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d3d3      	bcc.n	8007578 <IntToUnicode+0x18>
  }
}
 80075d0:	bf00      	nop
 80075d2:	371c      	adds	r7, #28
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bc80      	pop	{r7}
 80075d8:	4770      	bx	lr

080075da <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 80075da:	b480      	push	{r7}
 80075dc:	b083      	sub	sp, #12
 80075de:	af00      	add	r7, sp, #0
 80075e0:	4603      	mov	r3, r0
 80075e2:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 80075e4:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	370c      	adds	r7, #12
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bc80      	pop	{r7}
 80075ee:	4770      	bx	lr

080075f0 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b085      	sub	sp, #20
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	4603      	mov	r3, r0
 80075f8:	60b9      	str	r1, [r7, #8]
 80075fa:	607a      	str	r2, [r7, #4]
 80075fc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	2232      	movs	r2, #50	; 0x32
 8007602:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f44f 7200 	mov.w	r2, #512	; 0x200
 800760a:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 800760c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800760e:	4618      	mov	r0, r3
 8007610:	3714      	adds	r7, #20
 8007612:	46bd      	mov	sp, r7
 8007614:	bc80      	pop	{r7}
 8007616:	4770      	bx	lr

08007618 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8007618:	b480      	push	{r7}
 800761a:	b083      	sub	sp, #12
 800761c:	af00      	add	r7, sp, #0
 800761e:	4603      	mov	r3, r0
 8007620:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007622:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007624:	4618      	mov	r0, r3
 8007626:	370c      	adds	r7, #12
 8007628:	46bd      	mov	sp, r7
 800762a:	bc80      	pop	{r7}
 800762c:	4770      	bx	lr

0800762e <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 800762e:	b480      	push	{r7}
 8007630:	b083      	sub	sp, #12
 8007632:	af00      	add	r7, sp, #0
 8007634:	4603      	mov	r3, r0
 8007636:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8007638:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800763a:	4618      	mov	r0, r3
 800763c:	370c      	adds	r7, #12
 800763e:	46bd      	mov	sp, r7
 8007640:	bc80      	pop	{r7}
 8007642:	4770      	bx	lr

08007644 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af00      	add	r7, sp, #0
 800764a:	60b9      	str	r1, [r7, #8]
 800764c:	607a      	str	r2, [r7, #4]
 800764e:	461a      	mov	r2, r3
 8007650:	4603      	mov	r3, r0
 8007652:	73fb      	strb	r3, [r7, #15]
 8007654:	4613      	mov	r3, r2
 8007656:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	memcpy(buf,&buffer[blk_addr*STORAGE_BLK_SIZ],blk_len*STORAGE_BLK_SIZ);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	025b      	lsls	r3, r3, #9
 800765c:	4a06      	ldr	r2, [pc, #24]	; (8007678 <STORAGE_Read_FS+0x34>)
 800765e:	1899      	adds	r1, r3, r2
 8007660:	89bb      	ldrh	r3, [r7, #12]
 8007662:	025b      	lsls	r3, r3, #9
 8007664:	461a      	mov	r2, r3
 8007666:	68b8      	ldr	r0, [r7, #8]
 8007668:	f000 fb10 	bl	8007c8c <memcpy>
  return (USBD_OK);
 800766c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800766e:	4618      	mov	r0, r3
 8007670:	3710      	adds	r7, #16
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}
 8007676:	bf00      	nop
 8007678:	2000088c 	.word	0x2000088c

0800767c <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b084      	sub	sp, #16
 8007680:	af00      	add	r7, sp, #0
 8007682:	60b9      	str	r1, [r7, #8]
 8007684:	607a      	str	r2, [r7, #4]
 8007686:	461a      	mov	r2, r3
 8007688:	4603      	mov	r3, r0
 800768a:	73fb      	strb	r3, [r7, #15]
 800768c:	4613      	mov	r3, r2
 800768e:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	memcpy(&buffer[blk_addr*STORAGE_BLK_SIZ],buf,blk_len*STORAGE_BLK_SIZ);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	025b      	lsls	r3, r3, #9
 8007694:	4a06      	ldr	r2, [pc, #24]	; (80076b0 <STORAGE_Write_FS+0x34>)
 8007696:	1898      	adds	r0, r3, r2
 8007698:	89bb      	ldrh	r3, [r7, #12]
 800769a:	025b      	lsls	r3, r3, #9
 800769c:	461a      	mov	r2, r3
 800769e:	68b9      	ldr	r1, [r7, #8]
 80076a0:	f000 faf4 	bl	8007c8c <memcpy>
  return (USBD_OK);
 80076a4:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3710      	adds	r7, #16
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
 80076ae:	bf00      	nop
 80076b0:	2000088c 	.word	0x2000088c

080076b4 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 80076b4:	b480      	push	{r7}
 80076b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 80076b8:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	46bd      	mov	sp, r7
 80076be:	bc80      	pop	{r7}
 80076c0:	4770      	bx	lr
	...

080076c4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a0d      	ldr	r2, [pc, #52]	; (8007708 <HAL_PCD_MspInit+0x44>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d113      	bne.n	80076fe <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80076d6:	4b0d      	ldr	r3, [pc, #52]	; (800770c <HAL_PCD_MspInit+0x48>)
 80076d8:	69db      	ldr	r3, [r3, #28]
 80076da:	4a0c      	ldr	r2, [pc, #48]	; (800770c <HAL_PCD_MspInit+0x48>)
 80076dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80076e0:	61d3      	str	r3, [r2, #28]
 80076e2:	4b0a      	ldr	r3, [pc, #40]	; (800770c <HAL_PCD_MspInit+0x48>)
 80076e4:	69db      	ldr	r3, [r3, #28]
 80076e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80076ea:	60fb      	str	r3, [r7, #12]
 80076ec:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80076ee:	2200      	movs	r2, #0
 80076f0:	2100      	movs	r1, #0
 80076f2:	2014      	movs	r0, #20
 80076f4:	f7f9 f827 	bl	8000746 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80076f8:	2014      	movs	r0, #20
 80076fa:	f7f9 f840 	bl	800077e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80076fe:	bf00      	nop
 8007700:	3710      	adds	r7, #16
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
 8007706:	bf00      	nop
 8007708:	40005c00 	.word	0x40005c00
 800770c:	40021000 	.word	0x40021000

08007710 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b082      	sub	sp, #8
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007724:	4619      	mov	r1, r3
 8007726:	4610      	mov	r0, r2
 8007728:	f7fe fe38 	bl	800639c <USBD_LL_SetupStage>
}
 800772c:	bf00      	nop
 800772e:	3708      	adds	r7, #8
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}

08007734 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b082      	sub	sp, #8
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	460b      	mov	r3, r1
 800773e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007746:	78fa      	ldrb	r2, [r7, #3]
 8007748:	6879      	ldr	r1, [r7, #4]
 800774a:	4613      	mov	r3, r2
 800774c:	009b      	lsls	r3, r3, #2
 800774e:	4413      	add	r3, r2
 8007750:	00db      	lsls	r3, r3, #3
 8007752:	440b      	add	r3, r1
 8007754:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007758:	681a      	ldr	r2, [r3, #0]
 800775a:	78fb      	ldrb	r3, [r7, #3]
 800775c:	4619      	mov	r1, r3
 800775e:	f7fe fe68 	bl	8006432 <USBD_LL_DataOutStage>
}
 8007762:	bf00      	nop
 8007764:	3708      	adds	r7, #8
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}

0800776a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800776a:	b580      	push	{r7, lr}
 800776c:	b082      	sub	sp, #8
 800776e:	af00      	add	r7, sp, #0
 8007770:	6078      	str	r0, [r7, #4]
 8007772:	460b      	mov	r3, r1
 8007774:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800777c:	78fa      	ldrb	r2, [r7, #3]
 800777e:	6879      	ldr	r1, [r7, #4]
 8007780:	4613      	mov	r3, r2
 8007782:	009b      	lsls	r3, r3, #2
 8007784:	4413      	add	r3, r2
 8007786:	00db      	lsls	r3, r3, #3
 8007788:	440b      	add	r3, r1
 800778a:	333c      	adds	r3, #60	; 0x3c
 800778c:	681a      	ldr	r2, [r3, #0]
 800778e:	78fb      	ldrb	r3, [r7, #3]
 8007790:	4619      	mov	r1, r3
 8007792:	f7fe febf 	bl	8006514 <USBD_LL_DataInStage>
}
 8007796:	bf00      	nop
 8007798:	3708      	adds	r7, #8
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}

0800779e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800779e:	b580      	push	{r7, lr}
 80077a0:	b082      	sub	sp, #8
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80077ac:	4618      	mov	r0, r3
 80077ae:	f7fe ffcf 	bl	8006750 <USBD_LL_SOF>
}
 80077b2:	bf00      	nop
 80077b4:	3708      	adds	r7, #8
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}

080077ba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077ba:	b580      	push	{r7, lr}
 80077bc:	b084      	sub	sp, #16
 80077be:	af00      	add	r7, sp, #0
 80077c0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80077c2:	2301      	movs	r3, #1
 80077c4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	689b      	ldr	r3, [r3, #8]
 80077ca:	2b02      	cmp	r3, #2
 80077cc:	d001      	beq.n	80077d2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80077ce:	f7f8 fdc9 	bl	8000364 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80077d8:	7bfa      	ldrb	r2, [r7, #15]
 80077da:	4611      	mov	r1, r2
 80077dc:	4618      	mov	r0, r3
 80077de:	f7fe ff7f 	bl	80066e0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80077e8:	4618      	mov	r0, r3
 80077ea:	f7fe ff38 	bl	800665e <USBD_LL_Reset>
}
 80077ee:	bf00      	nop
 80077f0:	3710      	adds	r7, #16
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}
	...

080077f8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b082      	sub	sp, #8
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007806:	4618      	mov	r0, r3
 8007808:	f7fe ff79 	bl	80066fe <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	699b      	ldr	r3, [r3, #24]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d005      	beq.n	8007820 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007814:	4b04      	ldr	r3, [pc, #16]	; (8007828 <HAL_PCD_SuspendCallback+0x30>)
 8007816:	691b      	ldr	r3, [r3, #16]
 8007818:	4a03      	ldr	r2, [pc, #12]	; (8007828 <HAL_PCD_SuspendCallback+0x30>)
 800781a:	f043 0306 	orr.w	r3, r3, #6
 800781e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007820:	bf00      	nop
 8007822:	3708      	adds	r7, #8
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}
 8007828:	e000ed00 	.word	0xe000ed00

0800782c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b082      	sub	sp, #8
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800783a:	4618      	mov	r0, r3
 800783c:	f7fe ff73 	bl	8006726 <USBD_LL_Resume>
}
 8007840:	bf00      	nop
 8007842:	3708      	adds	r7, #8
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}

08007848 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b082      	sub	sp, #8
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007850:	4a23      	ldr	r2, [pc, #140]	; (80078e0 <USBD_LL_Init+0x98>)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	4a21      	ldr	r2, [pc, #132]	; (80078e0 <USBD_LL_Init+0x98>)
 800785c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007860:	4b1f      	ldr	r3, [pc, #124]	; (80078e0 <USBD_LL_Init+0x98>)
 8007862:	4a20      	ldr	r2, [pc, #128]	; (80078e4 <USBD_LL_Init+0x9c>)
 8007864:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007866:	4b1e      	ldr	r3, [pc, #120]	; (80078e0 <USBD_LL_Init+0x98>)
 8007868:	2208      	movs	r2, #8
 800786a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800786c:	4b1c      	ldr	r3, [pc, #112]	; (80078e0 <USBD_LL_Init+0x98>)
 800786e:	2202      	movs	r2, #2
 8007870:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007872:	4b1b      	ldr	r3, [pc, #108]	; (80078e0 <USBD_LL_Init+0x98>)
 8007874:	2200      	movs	r2, #0
 8007876:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007878:	4b19      	ldr	r3, [pc, #100]	; (80078e0 <USBD_LL_Init+0x98>)
 800787a:	2200      	movs	r2, #0
 800787c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800787e:	4b18      	ldr	r3, [pc, #96]	; (80078e0 <USBD_LL_Init+0x98>)
 8007880:	2200      	movs	r2, #0
 8007882:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007884:	4816      	ldr	r0, [pc, #88]	; (80078e0 <USBD_LL_Init+0x98>)
 8007886:	f7f8 ff94 	bl	80007b2 <HAL_PCD_Init>
 800788a:	4603      	mov	r3, r0
 800788c:	2b00      	cmp	r3, #0
 800788e:	d001      	beq.n	8007894 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007890:	f7f8 fd68 	bl	8000364 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800789a:	2318      	movs	r3, #24
 800789c:	2200      	movs	r2, #0
 800789e:	2100      	movs	r1, #0
 80078a0:	f7fa faf5 	bl	8001e8e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80078aa:	2358      	movs	r3, #88	; 0x58
 80078ac:	2200      	movs	r2, #0
 80078ae:	2180      	movs	r1, #128	; 0x80
 80078b0:	f7fa faed 	bl	8001e8e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_MSC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x98);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80078ba:	2398      	movs	r3, #152	; 0x98
 80078bc:	2200      	movs	r2, #0
 80078be:	2181      	movs	r1, #129	; 0x81
 80078c0:	f7fa fae5 	bl	8001e8e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0xD8);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80078ca:	23d8      	movs	r3, #216	; 0xd8
 80078cc:	2200      	movs	r2, #0
 80078ce:	2101      	movs	r1, #1
 80078d0:	f7fa fadd 	bl	8001e8e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_MSC */
  return USBD_OK;
 80078d4:	2300      	movs	r3, #0
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3708      	adds	r7, #8
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}
 80078de:	bf00      	nop
 80078e0:	20006c8c 	.word	0x20006c8c
 80078e4:	40005c00 	.word	0x40005c00

080078e8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b084      	sub	sp, #16
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078f0:	2300      	movs	r3, #0
 80078f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078f4:	2300      	movs	r3, #0
 80078f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80078fe:	4618      	mov	r0, r3
 8007900:	f7f9 f862 	bl	80009c8 <HAL_PCD_Start>
 8007904:	4603      	mov	r3, r0
 8007906:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007908:	7bfb      	ldrb	r3, [r7, #15]
 800790a:	4618      	mov	r0, r3
 800790c:	f000 f96e 	bl	8007bec <USBD_Get_USB_Status>
 8007910:	4603      	mov	r3, r0
 8007912:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007914:	7bbb      	ldrb	r3, [r7, #14]
}
 8007916:	4618      	mov	r0, r3
 8007918:	3710      	adds	r7, #16
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}

0800791e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800791e:	b580      	push	{r7, lr}
 8007920:	b084      	sub	sp, #16
 8007922:	af00      	add	r7, sp, #0
 8007924:	6078      	str	r0, [r7, #4]
 8007926:	4608      	mov	r0, r1
 8007928:	4611      	mov	r1, r2
 800792a:	461a      	mov	r2, r3
 800792c:	4603      	mov	r3, r0
 800792e:	70fb      	strb	r3, [r7, #3]
 8007930:	460b      	mov	r3, r1
 8007932:	70bb      	strb	r3, [r7, #2]
 8007934:	4613      	mov	r3, r2
 8007936:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007938:	2300      	movs	r3, #0
 800793a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800793c:	2300      	movs	r3, #0
 800793e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007946:	78bb      	ldrb	r3, [r7, #2]
 8007948:	883a      	ldrh	r2, [r7, #0]
 800794a:	78f9      	ldrb	r1, [r7, #3]
 800794c:	f7f9 f9dc 	bl	8000d08 <HAL_PCD_EP_Open>
 8007950:	4603      	mov	r3, r0
 8007952:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007954:	7bfb      	ldrb	r3, [r7, #15]
 8007956:	4618      	mov	r0, r3
 8007958:	f000 f948 	bl	8007bec <USBD_Get_USB_Status>
 800795c:	4603      	mov	r3, r0
 800795e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007960:	7bbb      	ldrb	r3, [r7, #14]
}
 8007962:	4618      	mov	r0, r3
 8007964:	3710      	adds	r7, #16
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}

0800796a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800796a:	b580      	push	{r7, lr}
 800796c:	b084      	sub	sp, #16
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
 8007972:	460b      	mov	r3, r1
 8007974:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007976:	2300      	movs	r3, #0
 8007978:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800797a:	2300      	movs	r3, #0
 800797c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007984:	78fa      	ldrb	r2, [r7, #3]
 8007986:	4611      	mov	r1, r2
 8007988:	4618      	mov	r0, r3
 800798a:	f7f9 fa23 	bl	8000dd4 <HAL_PCD_EP_Close>
 800798e:	4603      	mov	r3, r0
 8007990:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007992:	7bfb      	ldrb	r3, [r7, #15]
 8007994:	4618      	mov	r0, r3
 8007996:	f000 f929 	bl	8007bec <USBD_Get_USB_Status>
 800799a:	4603      	mov	r3, r0
 800799c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800799e:	7bbb      	ldrb	r3, [r7, #14]
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3710      	adds	r7, #16
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}

080079a8 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b084      	sub	sp, #16
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	460b      	mov	r3, r1
 80079b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079b4:	2300      	movs	r3, #0
 80079b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079b8:	2300      	movs	r3, #0
 80079ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80079c2:	78fa      	ldrb	r2, [r7, #3]
 80079c4:	4611      	mov	r1, r2
 80079c6:	4618      	mov	r0, r3
 80079c8:	f7f9 fb97 	bl	80010fa <HAL_PCD_EP_Flush>
 80079cc:	4603      	mov	r3, r0
 80079ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079d0:	7bfb      	ldrb	r3, [r7, #15]
 80079d2:	4618      	mov	r0, r3
 80079d4:	f000 f90a 	bl	8007bec <USBD_Get_USB_Status>
 80079d8:	4603      	mov	r3, r0
 80079da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3710      	adds	r7, #16
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}

080079e6 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80079e6:	b580      	push	{r7, lr}
 80079e8:	b084      	sub	sp, #16
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
 80079ee:	460b      	mov	r3, r1
 80079f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079f2:	2300      	movs	r3, #0
 80079f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079f6:	2300      	movs	r3, #0
 80079f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a00:	78fa      	ldrb	r2, [r7, #3]
 8007a02:	4611      	mov	r1, r2
 8007a04:	4618      	mov	r0, r3
 8007a06:	f7f9 fac4 	bl	8000f92 <HAL_PCD_EP_SetStall>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a0e:	7bfb      	ldrb	r3, [r7, #15]
 8007a10:	4618      	mov	r0, r3
 8007a12:	f000 f8eb 	bl	8007bec <USBD_Get_USB_Status>
 8007a16:	4603      	mov	r3, r0
 8007a18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a1a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3710      	adds	r7, #16
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b084      	sub	sp, #16
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	460b      	mov	r3, r1
 8007a2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a30:	2300      	movs	r3, #0
 8007a32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a34:	2300      	movs	r3, #0
 8007a36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a3e:	78fa      	ldrb	r2, [r7, #3]
 8007a40:	4611      	mov	r1, r2
 8007a42:	4618      	mov	r0, r3
 8007a44:	f7f9 fb05 	bl	8001052 <HAL_PCD_EP_ClrStall>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a4c:	7bfb      	ldrb	r3, [r7, #15]
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f000 f8cc 	bl	8007bec <USBD_Get_USB_Status>
 8007a54:	4603      	mov	r3, r0
 8007a56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a58:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3710      	adds	r7, #16
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}

08007a62 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a62:	b480      	push	{r7}
 8007a64:	b085      	sub	sp, #20
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	6078      	str	r0, [r7, #4]
 8007a6a:	460b      	mov	r3, r1
 8007a6c:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a74:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007a76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	da0c      	bge.n	8007a98 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007a7e:	78fb      	ldrb	r3, [r7, #3]
 8007a80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a84:	68f9      	ldr	r1, [r7, #12]
 8007a86:	1c5a      	adds	r2, r3, #1
 8007a88:	4613      	mov	r3, r2
 8007a8a:	009b      	lsls	r3, r3, #2
 8007a8c:	4413      	add	r3, r2
 8007a8e:	00db      	lsls	r3, r3, #3
 8007a90:	440b      	add	r3, r1
 8007a92:	3302      	adds	r3, #2
 8007a94:	781b      	ldrb	r3, [r3, #0]
 8007a96:	e00b      	b.n	8007ab0 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007a98:	78fb      	ldrb	r3, [r7, #3]
 8007a9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a9e:	68f9      	ldr	r1, [r7, #12]
 8007aa0:	4613      	mov	r3, r2
 8007aa2:	009b      	lsls	r3, r3, #2
 8007aa4:	4413      	add	r3, r2
 8007aa6:	00db      	lsls	r3, r3, #3
 8007aa8:	440b      	add	r3, r1
 8007aaa:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8007aae:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3714      	adds	r7, #20
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bc80      	pop	{r7}
 8007ab8:	4770      	bx	lr

08007aba <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007aba:	b580      	push	{r7, lr}
 8007abc:	b084      	sub	sp, #16
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	6078      	str	r0, [r7, #4]
 8007ac2:	460b      	mov	r3, r1
 8007ac4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007aca:	2300      	movs	r3, #0
 8007acc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ad4:	78fa      	ldrb	r2, [r7, #3]
 8007ad6:	4611      	mov	r1, r2
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f7f9 f8f0 	bl	8000cbe <HAL_PCD_SetAddress>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ae2:	7bfb      	ldrb	r3, [r7, #15]
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f000 f881 	bl	8007bec <USBD_Get_USB_Status>
 8007aea:	4603      	mov	r3, r0
 8007aec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007aee:	7bbb      	ldrb	r3, [r7, #14]
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3710      	adds	r7, #16
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b086      	sub	sp, #24
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	60f8      	str	r0, [r7, #12]
 8007b00:	607a      	str	r2, [r7, #4]
 8007b02:	461a      	mov	r2, r3
 8007b04:	460b      	mov	r3, r1
 8007b06:	72fb      	strb	r3, [r7, #11]
 8007b08:	4613      	mov	r3, r2
 8007b0a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b10:	2300      	movs	r3, #0
 8007b12:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007b1a:	893b      	ldrh	r3, [r7, #8]
 8007b1c:	7af9      	ldrb	r1, [r7, #11]
 8007b1e:	687a      	ldr	r2, [r7, #4]
 8007b20:	f7f9 f9f4 	bl	8000f0c <HAL_PCD_EP_Transmit>
 8007b24:	4603      	mov	r3, r0
 8007b26:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b28:	7dfb      	ldrb	r3, [r7, #23]
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f000 f85e 	bl	8007bec <USBD_Get_USB_Status>
 8007b30:	4603      	mov	r3, r0
 8007b32:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007b34:	7dbb      	ldrb	r3, [r7, #22]
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3718      	adds	r7, #24
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}

08007b3e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007b3e:	b580      	push	{r7, lr}
 8007b40:	b086      	sub	sp, #24
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	60f8      	str	r0, [r7, #12]
 8007b46:	607a      	str	r2, [r7, #4]
 8007b48:	461a      	mov	r2, r3
 8007b4a:	460b      	mov	r3, r1
 8007b4c:	72fb      	strb	r3, [r7, #11]
 8007b4e:	4613      	mov	r3, r2
 8007b50:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b52:	2300      	movs	r3, #0
 8007b54:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b56:	2300      	movs	r3, #0
 8007b58:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007b60:	893b      	ldrh	r3, [r7, #8]
 8007b62:	7af9      	ldrb	r1, [r7, #11]
 8007b64:	687a      	ldr	r2, [r7, #4]
 8007b66:	f7f9 f97d 	bl	8000e64 <HAL_PCD_EP_Receive>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b6e:	7dfb      	ldrb	r3, [r7, #23]
 8007b70:	4618      	mov	r0, r3
 8007b72:	f000 f83b 	bl	8007bec <USBD_Get_USB_Status>
 8007b76:	4603      	mov	r3, r0
 8007b78:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007b7a:	7dbb      	ldrb	r3, [r7, #22]
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3718      	adds	r7, #24
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b082      	sub	sp, #8
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	460b      	mov	r3, r1
 8007b8e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b96:	78fa      	ldrb	r2, [r7, #3]
 8007b98:	4611      	mov	r1, r2
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f7f9 f99f 	bl	8000ede <HAL_PCD_EP_GetRxCount>
 8007ba0:	4603      	mov	r3, r0
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3708      	adds	r7, #8
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}
	...

08007bac <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b083      	sub	sp, #12
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007bb4:	4b02      	ldr	r3, [pc, #8]	; (8007bc0 <USBD_static_malloc+0x14>)
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	370c      	adds	r7, #12
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bc80      	pop	{r7}
 8007bbe:	4770      	bx	lr
 8007bc0:	20000140 	.word	0x20000140

08007bc4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b083      	sub	sp, #12
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]

}
 8007bcc:	bf00      	nop
 8007bce:	370c      	adds	r7, #12
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bc80      	pop	{r7}
 8007bd4:	4770      	bx	lr

08007bd6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bd6:	b480      	push	{r7}
 8007bd8:	b083      	sub	sp, #12
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	6078      	str	r0, [r7, #4]
 8007bde:	460b      	mov	r3, r1
 8007be0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8007be2:	bf00      	nop
 8007be4:	370c      	adds	r7, #12
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bc80      	pop	{r7}
 8007bea:	4770      	bx	lr

08007bec <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b085      	sub	sp, #20
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007bfa:	79fb      	ldrb	r3, [r7, #7]
 8007bfc:	2b03      	cmp	r3, #3
 8007bfe:	d817      	bhi.n	8007c30 <USBD_Get_USB_Status+0x44>
 8007c00:	a201      	add	r2, pc, #4	; (adr r2, 8007c08 <USBD_Get_USB_Status+0x1c>)
 8007c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c06:	bf00      	nop
 8007c08:	08007c19 	.word	0x08007c19
 8007c0c:	08007c1f 	.word	0x08007c1f
 8007c10:	08007c25 	.word	0x08007c25
 8007c14:	08007c2b 	.word	0x08007c2b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	73fb      	strb	r3, [r7, #15]
    break;
 8007c1c:	e00b      	b.n	8007c36 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007c1e:	2302      	movs	r3, #2
 8007c20:	73fb      	strb	r3, [r7, #15]
    break;
 8007c22:	e008      	b.n	8007c36 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007c24:	2301      	movs	r3, #1
 8007c26:	73fb      	strb	r3, [r7, #15]
    break;
 8007c28:	e005      	b.n	8007c36 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007c2a:	2302      	movs	r3, #2
 8007c2c:	73fb      	strb	r3, [r7, #15]
    break;
 8007c2e:	e002      	b.n	8007c36 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007c30:	2302      	movs	r3, #2
 8007c32:	73fb      	strb	r3, [r7, #15]
    break;
 8007c34:	bf00      	nop
  }
  return usb_status;
 8007c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3714      	adds	r7, #20
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bc80      	pop	{r7}
 8007c40:	4770      	bx	lr
 8007c42:	bf00      	nop

08007c44 <__libc_init_array>:
 8007c44:	b570      	push	{r4, r5, r6, lr}
 8007c46:	2500      	movs	r5, #0
 8007c48:	4e0c      	ldr	r6, [pc, #48]	; (8007c7c <__libc_init_array+0x38>)
 8007c4a:	4c0d      	ldr	r4, [pc, #52]	; (8007c80 <__libc_init_array+0x3c>)
 8007c4c:	1ba4      	subs	r4, r4, r6
 8007c4e:	10a4      	asrs	r4, r4, #2
 8007c50:	42a5      	cmp	r5, r4
 8007c52:	d109      	bne.n	8007c68 <__libc_init_array+0x24>
 8007c54:	f000 f82e 	bl	8007cb4 <_init>
 8007c58:	2500      	movs	r5, #0
 8007c5a:	4e0a      	ldr	r6, [pc, #40]	; (8007c84 <__libc_init_array+0x40>)
 8007c5c:	4c0a      	ldr	r4, [pc, #40]	; (8007c88 <__libc_init_array+0x44>)
 8007c5e:	1ba4      	subs	r4, r4, r6
 8007c60:	10a4      	asrs	r4, r4, #2
 8007c62:	42a5      	cmp	r5, r4
 8007c64:	d105      	bne.n	8007c72 <__libc_init_array+0x2e>
 8007c66:	bd70      	pop	{r4, r5, r6, pc}
 8007c68:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007c6c:	4798      	blx	r3
 8007c6e:	3501      	adds	r5, #1
 8007c70:	e7ee      	b.n	8007c50 <__libc_init_array+0xc>
 8007c72:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007c76:	4798      	blx	r3
 8007c78:	3501      	adds	r5, #1
 8007c7a:	e7f2      	b.n	8007c62 <__libc_init_array+0x1e>
 8007c7c:	08007d8c 	.word	0x08007d8c
 8007c80:	08007d8c 	.word	0x08007d8c
 8007c84:	08007d8c 	.word	0x08007d8c
 8007c88:	08007d90 	.word	0x08007d90

08007c8c <memcpy>:
 8007c8c:	b510      	push	{r4, lr}
 8007c8e:	1e43      	subs	r3, r0, #1
 8007c90:	440a      	add	r2, r1
 8007c92:	4291      	cmp	r1, r2
 8007c94:	d100      	bne.n	8007c98 <memcpy+0xc>
 8007c96:	bd10      	pop	{r4, pc}
 8007c98:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ca0:	e7f7      	b.n	8007c92 <memcpy+0x6>

08007ca2 <memset>:
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	4402      	add	r2, r0
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d100      	bne.n	8007cac <memset+0xa>
 8007caa:	4770      	bx	lr
 8007cac:	f803 1b01 	strb.w	r1, [r3], #1
 8007cb0:	e7f9      	b.n	8007ca6 <memset+0x4>
	...

08007cb4 <_init>:
 8007cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cb6:	bf00      	nop
 8007cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cba:	bc08      	pop	{r3}
 8007cbc:	469e      	mov	lr, r3
 8007cbe:	4770      	bx	lr

08007cc0 <_fini>:
 8007cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cc2:	bf00      	nop
 8007cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cc6:	bc08      	pop	{r3}
 8007cc8:	469e      	mov	lr, r3
 8007cca:	4770      	bx	lr
